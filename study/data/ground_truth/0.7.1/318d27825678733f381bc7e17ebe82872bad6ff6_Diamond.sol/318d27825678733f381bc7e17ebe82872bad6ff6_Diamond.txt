
Begin IDiamondCut.is_proxy (Slither line:1425)


End IDiamondCut.is_proxy (Slither line:1428)


Begin IDiamondCut.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondCut 

End IDiamondCut.is_upgradeable_proxy (Slither line:1407)


Begin LibDiamond.is_proxy (Slither line:1425)


End LibDiamond.is_proxy (Slither line:1428)


Begin LibDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibDiamond 

End LibDiamond.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondLoupe.is_proxy (Slither line:1425)


End IDiamondLoupe.is_proxy (Slither line:1428)


Begin IDiamondLoupe.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondLoupe 

End IDiamondLoupe.is_upgradeable_proxy (Slither line:1407)


Begin IERC173.is_proxy (Slither line:1425)


End IERC173.is_proxy (Slither line:1428)


Begin IERC173.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC173 

End IERC173.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin Diamond.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Diamond.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(facet != address(0),Diamond: Function does not exist) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
facet != address(0)
Diamond: Function does not exist

End Diamond.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Diamond.find_delegatecall_in_exp_node

Found Expression Node: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()()) (Slither line:2802)
Expression called: calldatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
0
calldatasize()()

End Diamond.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Diamond.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2802)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
0
returndatasize()()

End Diamond.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Diamond.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2817)
Args:
gas()()
facet
0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2824)

Destination is facet (Slither line:2828)
dest.value: facet (Slither line:2831)
Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:2836)

End Diamond.find_delegatecall_in_exp_node (Slither line:2858)


End Diamond.is_proxy (Slither line:1476)


Begin Diamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: Diamond 
Local Variable: facet (Slither line:1164)
Diamond is delegating to facet
Looking for setter (Slither line:1200)


Begin Diamond.find_setter_in_contract (Slither line:3119)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3122)
Checking function: constructor(IDiamondCut.FacetCut[],address) returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)

Begin DiamondCut corner case handling (Slither line:3287)

require(bool,string)
ds.facetFunctionSelectors[_newFacet].functionSelectors.push
DiamondCut
initializeDiamondCut
require(bool,string)
ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors.pop
LibDiamond.diamondCut

End DiamondCut corner case handling (Slither line:3343)


End Diamond.find_setter_in_contract (Slither line:3345)


Implementation set by function: diamondCut in contract: LibDiamond (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Diamond.find_getter_in_contract (Slither line:2974)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: receive (Slither line:2988)

End Diamond.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in Diamond (Slither line:1305)

Begin IDiamondCut.find_getter_in_contract (Slither line:2974)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IDiamondCut.find_getter_in_contract (Slither line:3083)

Looking for Loupe functions in LibDiamond
diamondStorage() returns(LibDiamond.DiamondStorage)
setContractOwner(address) returns()
contractOwner() returns(address)
enforceIsContractOwner() returns()
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
addReplaceRemoveFacetSelectors(address,IDiamondCut.FacetCutAction,bytes4[]) returns()
addSelector(address,bytes4) returns()
removeSelector(address,bytes4) returns()
initializeDiamondCut(address,bytes) returns()
enforceHasContractCode(address,string) returns()
slitherConstructorConstantVariables() returns()
Looking for Loupe functions in DiamondFactory
deployNewDiamond(address,IDiamondCut.FacetCut[]) returns(address)
impl_address_from_contract_call: ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking external function fallback
Checking external function receive
functions_writing_to_variable: facet
functions_writing_to_variable: checking function LibDiamond.setContractOwner (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.addSelector (proxy_features line:898)
get_value_assigned: ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet
functions_writing_to_variable: addSelector writes _newFacet to ds.selectorToFacetAndPosition[_selector].facetAddress (proxy_features line:1038)
functions_writing_to_variable: checking function LibDiamond.initializeDiamondCut (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.enforceIsContractOwner (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.contractOwner (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.diamondStorage (proxy_features line:898)
functions_writing_to_variable: checking function Diamond.constructor (proxy_features line:898)
get_value_assigned: ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet
functions_writing_to_variable: constructor writes _newFacet to ds.selectorToFacetAndPosition[_selector].facetAddress (proxy_features line:1038)
functions_writing_to_variable: checking function LibDiamond.addReplaceRemoveFacetSelectors (proxy_features line:898)
get_value_assigned: ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet
functions_writing_to_variable: addReplaceRemoveFacetSelectors writes _newFacet to ds.selectorToFacetAndPosition[_selector].facetAddress (proxy_features line:1038)
functions_writing_to_variable: checking function LibDiamond.removeSelector (proxy_features line:898)
functions_writing_to_variable: checking function Diamond.receive (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.enforceHasContractCode (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.diamondCut (proxy_features line:898)
get_value_assigned: ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet
functions_writing_to_variable: diamondCut writes _newFacet to ds.selectorToFacetAndPosition[_selector].facetAddress (proxy_features line:1038)
has_compatibility_checks: dependencies: ['ds', 'REF_128', 'REF_130', 'REF_129']
has_compatibility_checks: skipping internal function addSelector
has_compatibility_checks: skipping constructor
has_compatibility_checks: skipping internal function addReplaceRemoveFacetSelectors
has_compatibility_checks: checking internal function diamondCut
require(bool,string)(_oldFacetAddress != address(this),LibDiamondCut: Can't remove or replace immutable function)
has_compatibility_checks: condition _oldFacetAddress != address(this)
require(bool,string)(contractSize > 0,_errorMessage)
has_compatibility_checks: condition contractSize > 0
has_compatibility_checks: IF node exp = selectorPosition != lastSelectorPosition
has_compatibility_checks: IF node exp = lastSelectorPosition == 0
has_compatibility_checks: IF node exp = facetAddressPosition != lastFacetAddressPosition
require(bool,string)(_selectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _selectors.length > 0
has_compatibility_checks: IF node exp = _newFacetAddress != address(0)
has_compatibility_checks: IF node exp = _init == address(0)
require(bool,string)(_oldFacetAddress != address(0),LibDiamondCut: Can't remove or replace function that doesn't exist)
has_compatibility_checks: condition _oldFacetAddress != address(0)
require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_compatibility_checks: condition _calldata.length == 0
has_compatibility_checks: IF node exp = facetAddressPosition == 0 && ds.facetFunctionSelectors[_newFacetAddress].functionSelectors.length == 0
require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_compatibility_checks: condition _calldata.length > 0
has_compatibility_checks: IF node exp = _init != address(this)
has_compatibility_checks: IF node exp = ! success
has_compatibility_checks: IF node exp = error.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(error))', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(error))', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: ConditionalExpression if error.length > 0 then revert(string)(string(error)) else revert(string)(LibDiamondCut: _init function reverted)
has_compatibility_checks: IF node exp = _action == IDiamondCut.FacetCutAction.Add
require(bool,string)(_action == IDiamondCut.FacetCutAction.Remove,LibDiamondCut: action not set to FacetCutAction.Remove)
has_compatibility_checks: condition _action == IDiamondCut.FacetCutAction.Remove
require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_compatibility_checks: condition oldFacetAddress == address(0)
has_compatibility_checks: IF node exp = _action == IDiamondCut.FacetCutAction.Replace
has_compatibility_checks: IF node can lead to revert ["require(bool,string)(oldFacetAddress != _newFacetAddress,LibDiamondCut: Can't replace function with same function)", 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: IF node can lead to revert ["require(bool,string)(oldFacetAddress != _newFacetAddress,LibDiamondCut: Can't replace function with same function)", 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: ConditionalExpression if _action == IDiamondCut.FacetCutAction.Replace then require(bool,string)(oldFacetAddress != _newFacetAddress,LibDiamondCut: Can't replace function with same function) else revert(string)(LibDiamondCut: Incorrect FacetCutAction)
require(bool,string)(oldFacetAddress != _newFacetAddress,LibDiamondCut: Can't replace function with same function)
has_compatibility_checks: condition oldFacetAddress != _newFacetAddress
check_condition_from_expression: condition ds.selectorToFacetAndPosition[selector].facetAddress != _newFacetAddress
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(facet != address(0),Diamond: Function does not exist)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ds = position
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: position = LibDiamond.DIAMOND_STORAGE_POSITION
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
Found public function: constructor
Found fallback
Found external function: receive
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_oldFacetAddress != address(this),LibDiamondCut: Can't remove or replace immutable function)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector)
has_time_delay: (node.type) EXPRESSION
(Expression) DiamondCut(_diamondCut,_init,_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition
has_time_delay: (node.type) EXPRESSION
(Expression) initializeDiamondCut(_init,_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(contractSize > 0,_errorMessage)
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastSelectorPosition = ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors.length - 1
has_time_delay: (node.type) EXPRESSION
(Expression) contractSize = extcodesize(uint256)(_contract)
has_time_delay: (node.type) IF
(Expression) selectorPosition != lastSelectorPosition
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors.pop()
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastSelector = ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors[lastSelectorPosition]
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors[selectorPosition] = lastSelector
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition)
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.selectorToFacetAndPosition[_selector]
has_time_delay: (node.type) IF
(Expression) lastSelectorPosition == 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastFacetAddressPosition = ds.facetAddresses.length - 1
has_time_delay: (node.type) NEW VARIABLE
(Expression) facetAddressPosition = ds.facetFunctionSelectors[_oldFacetAddress].facetAddressPosition
has_time_delay: (node.type) IF
(Expression) facetAddressPosition != lastFacetAddressPosition
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses.pop()
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition]
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses[facetAddressPosition] = lastFacetAddress
has_time_delay: (node.type) IF_LOOP
(Expression) facetIndex < _diamondCut.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_selectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition)
has_time_delay: (node.type) IF
(Expression) _newFacetAddress != address(0)
has_time_delay: (node.type) IF
(Expression) _init == address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) facetIndex ++
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.facetFunctionSelectors[_oldFacetAddress]
has_time_delay: (node.type) EXPRESSION
(Expression) addReplaceRemoveFacetSelectors(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].action,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_oldFacetAddress != address(0),LibDiamondCut: Can't remove or replace function that doesn't exist)
has_time_delay: (node.type) EXPRESSION
(Expression) removeSelector(oldFacetAddress,selector)
has_time_delay: (node.type) NEW VARIABLE
(Expression) facetAddressPosition = ds.facetFunctionSelectors[_newFacetAddress].facetAddressPosition
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_time_delay: (node.type) EXPRESSION
(Expression) addSelector(_newFacetAddress,selector)
has_time_delay: (node.type) IF
(Expression) facetAddressPosition == 0 && ds.facetFunctionSelectors[_newFacetAddress].functionSelectors.length == 0
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: Incorrect FacetCutAction)
has_time_delay: (node.type) IF
(Expression) _init != address(this)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_newFacetAddress,LibDiamondCut: New facet has no code)
has_time_delay: (node.type) IF
(Expression) ! success
has_time_delay: (node.type) EXPRESSION
(Expression) facetAddressPosition = ds.facetAddresses.length
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses.push(_newFacetAddress)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_init,LibDiamondCut: _init address has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_newFacetAddress].facetAddressPosition = uint16(facetAddressPosition)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = DIAMOND_STORAGE_POSITION
has_time_delay: (node.type) EXPRESSION
(Expression) (success,error) = _init.delegatecall(_calldata)
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex_scope_0 < _selectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) ds = position
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex_scope_0 ++
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _selectors.length
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector_scope_1 = _selectors[selectorIndex_scope_0]
has_time_delay: (node.type) EXPRESSION
(Expression) removeSelector(ds.selectorToFacetAndPosition[selector_scope_1].facetAddress,selector_scope_1)
has_time_delay: (node.type) IF
(Expression) error.length > 0
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _selectors[selectorIndex]
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(string(error))
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress
has_time_delay: (node.type) IF
(Expression) _action == IDiamondCut.FacetCutAction.Add
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: _init function reverted)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_action == IDiamondCut.FacetCutAction.Remove,LibDiamondCut: action not set to FacetCutAction.Remove)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_time_delay: (node.type) EXPRESSION
(Expression) addSelector(_newFacetAddress,selector)
has_time_delay: (node.type) IF
(Expression) _action == IDiamondCut.FacetCutAction.Replace
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != _newFacetAddress,LibDiamondCut: Can't replace function with same function)

Begin DiamondFactory.is_proxy (Slither line:1425)


End DiamondFactory.is_proxy (Slither line:1428)


Begin DiamondFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: DiamondFactory 

End DiamondFactory.is_upgradeable_proxy (Slither line:1407)

