
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin Roles.is_proxy (Slither line:1425)


End Roles.is_proxy (Slither line:1428)


Begin Roles.is_upgradeable_proxy (Slither line:1136)

Checking contract: Roles 

End Roles.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin PauserRole.is_proxy (Slither line:1425)


End PauserRole.is_proxy (Slither line:1428)


Begin PauserRole.is_upgradeable_proxy (Slither line:1136)

Checking contract: PauserRole 

End PauserRole.is_upgradeable_proxy (Slither line:1407)


Begin Pausable.is_proxy (Slither line:1425)


End Pausable.is_proxy (Slither line:1428)


Begin Pausable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Pausable 

End Pausable.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin ERC20.is_proxy (Slither line:1425)


End ERC20.is_proxy (Slither line:1428)


Begin ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20 

End ERC20.is_upgradeable_proxy (Slither line:1407)


Begin ERC20Burnable.is_proxy (Slither line:1425)


End ERC20Burnable.is_proxy (Slither line:1428)


Begin ERC20Burnable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Burnable 

End ERC20Burnable.is_upgradeable_proxy (Slither line:1407)


Begin ERC20Pausable.is_proxy (Slither line:1425)


End ERC20Pausable.is_proxy (Slither line:1428)


Begin ERC20Pausable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Pausable 

End ERC20Pausable.is_upgradeable_proxy (Slither line:1407)


Begin ERC20Detailed.is_proxy (Slither line:1425)


End ERC20Detailed.is_proxy (Slither line:1428)


Begin ERC20Detailed.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Detailed 

End ERC20Detailed.is_upgradeable_proxy (Slither line:1407)


Begin APX.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin APX.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(impl != address(0),ERC20: account is the zero address) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
impl != address(0)
ERC20: account is the zero address

End APX.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin APX.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'impl'
Looking for corresponding Variable
Current function: fallback

Begin APX.find_delegate_variable_from_name
Searching for impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _name (Slither line:1689)
Checking _symbol (Slither line:1689)
Checking _decimals (Slither line:1689)
Checking _balances (Slither line:1689)
Checking _allowed (Slither line:1689)
Checking _totalSupply (Slither line:1689)
Checking owner (Slither line:1689)
Checking newOwner (Slither line:1689)
Checking _pausers (Slither line:1689)
Checking _pausersCount (Slither line:1689)
Checking _paused (Slither line:1689)
Checking implementation (Slither line:1689)
Checking timelockList (Slither line:1689)
Checking frozenAccount (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking impl (Slither line:1703)
impl is a Local Variable in APX.fallback (Slither line:1707)
Expression: implementation (Slither line:1719)
Identifier value: implementation (Slither line:1725)
implementation is a State Variable in contract APX (Slither line:1730)

End APX.find_delegate_variable_by_name


End APX.find_delegatecall_in_asm (Slither line:1637)


End APX.is_proxy (Slither line:1476)


Begin APX.is_upgradeable_proxy (Slither line:1136)

Checking contract: APX 
APX is delegating to implementation
Looking for setter (Slither line:1200)


Begin APX.find_setter_in_contract (Slither line:3119)

Checking function: constructor() returns() (Slither line:3127)
Checking function: balanceOf(address) returns(uint256) (Slither line:3127)
Visibility: public
c
i ++
totalBalance = totalBalance.add(timelockList[owner][i]._amount)
is an Assignment Operation (Slither line:3216)
_balances[owner]
require(bool,string)(c >= a,SafeMath: addition overflow)
totalBalance
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
timelockList[holder].pop()
c
idx ++
super.transfer(to,value)
Unlock(holder,releaseAmount)
_balances[holder] = _balances[holder].add(releaseAmount)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_autoUnlock(msg.sender)
_transfer(msg.sender,to,value)
true
true
true
notFrozen(msg.sender)
require(bool,string)(! _paused,Pausable: paused)
idx -= 1
is an Assignment Operation (Slither line:3216)
require(bool,string)(c >= a,SafeMath: addition overflow)
require(bool,string)(to != address(0),ERC20: account to the zero address)
notFrozen(to)
_balances[from] = _balances[from].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
super.transfer(to,value)
_balances[to] = _balances[to].add(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Transfer(from,to,value)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
require(bool,string)(! frozenAccount[_holder],ERC20: frozenAccount)
whenNotPaused()
timelockList[holder][idx] = timelockList[holder][timelockList[holder].length.sub(1)]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
c
Checking function: freezeAccount(address,bool) returns(bool) (Slither line:3127)
Visibility: public
role.bearer[account]
_pausers.has(account)
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
true
account == owner
onlyPauser()
frozenAccount[holder] = value
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(account != address(0),Roles: account is the zero address)
Freeze(holder,value)
Checking function: lock(address,uint256,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(account != address(0),Roles: account is the zero address)
_balances[holder] = _balances[holder].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
role.bearer[account]
_pausers.has(account)
timelockList[holder].push(LockInfo(releaseTime,value))
Lock(holder,value,releaseTime)
true
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
require(bool,string)(_balances[holder] >= value,There is not enough balances of holder.)
_lock(holder,value,releaseTime)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
true
account == owner
onlyPauser()
c
Checking function: transferWithLock(address,uint256,uint256) returns(bool) (Slither line:3127)
Visibility: public
c
true
onlyPauser()
require(bool,string)(account != address(0),Roles: account is the zero address)
_balances[holder] = _balances[holder].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
role.bearer[account]
_pausers.has(account)
timelockList[holder].push(LockInfo(releaseTime,value))
Lock(holder,value,releaseTime)
true
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
require(bool,string)(to != address(0),ERC20: account to the zero address)
_balances[from] = _balances[from].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_balances[to] = _balances[to].add(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Transfer(from,to,value)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
account == owner
_transfer(msg.sender,holder,value)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
_lock(holder,value,releaseTime)
Checking function: unlock(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
timelockList[holder].pop()
require(bool,string)(timelockList[holder].length > idx,There is not lock info.)
c
Unlock(holder,releaseAmount)
_unlock(holder,idx)
_balances[holder] = _balances[holder].add(releaseAmount)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
true
require(bool,string)(account != address(0),Roles: account is the zero address)
true
role.bearer[account]
onlyPauser()
_pausers.has(account)
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
require(bool,string)(b <= a,SafeMath: subtraction overflow)
account == owner
require(bool,string)(c >= a,SafeMath: addition overflow)
timelockList[holder][idx] = timelockList[holder][timelockList[holder].length.sub(1)]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
c
Checking function: _lock(address,uint256,uint256) returns(bool) (Slither line:3127)
Visibility: internal
Checking function: _unlock(address,uint256) returns(bool) (Slither line:3127)
Visibility: internal
Checking function: _autoUnlock(address) returns(bool) (Slither line:3127)
Visibility: internal
Checking function: _setImplementation(address) returns() (Slither line:3127)
Visibility: internal
Checking function: fallback() returns() (Slither line:3127)
Checking function: burn(uint256) returns() (Slither line:3127)
Visibility: public
require(bool,string)(b <= a,SafeMath: subtraction overflow)
c
_totalSupply = _totalSupply.sub(value)
is an Assignment Operation (Slither line:3216)
_balances[account] = _balances[account].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_burn(msg.sender,value)
Transfer(account,address(0),value)
require(bool,string)(account != address(0),ERC20: account from the zero address)
Checking function: burnFrom(address,uint256) returns() (Slither line:3127)
Visibility: public
require(bool,string)(b <= a,SafeMath: subtraction overflow)
_burnFrom(from,value)
_totalSupply = _totalSupply.sub(value)
is an Assignment Operation (Slither line:3216)
_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_balances[account] = _balances[account].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_burn(account,value)
Transfer(account,address(0),value)
Approval(account,msg.sender,_allowed[account][msg.sender])
c
require(bool,string)(account != address(0),ERC20: account from the zero address)
Checking function: totalSupply() returns(uint256) (Slither line:3127)
Visibility: public
_totalSupply
Checking function: balanceOf(address) returns(uint256) (Slither line:3127)
Visibility: public
_balances[owner]
Checking function: allowance(address,address) returns(uint256) (Slither line:3127)
Visibility: public
_allowed[owner][spender]
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
true
require(bool,string)(c >= a,SafeMath: addition overflow)
require(bool,string)(to != address(0),ERC20: account to the zero address)
c
require(bool,string)(b <= a,SafeMath: subtraction overflow)
_balances[from] = _balances[from].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_balances[to] = _balances[to].add(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_transfer(msg.sender,to,value)
c
Transfer(from,to,value)
Checking function: approve(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(spender != address(0),ERC20: approve from the zero address)
_allowed[msg.sender][spender] = value
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Approval(msg.sender,spender,value)
true
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(to != address(0),ERC20: account to the zero address)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
true
c
_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_balances[from] = _balances[from].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_transfer(from,to,value)
_balances[to] = _balances[to].add(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
Approval(from,msg.sender,_allowed[from][msg.sender])
Transfer(from,to,value)
Checking function: increaseAllowance(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(spender != address(0),ERC20: increaseAllowance from the zero address)
c
_allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Approval(msg.sender,spender,_allowed[msg.sender][spender])
require(bool,string)(c >= a,SafeMath: addition overflow)
true
Checking function: decreaseAllowance(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
Approval(msg.sender,spender,_allowed[msg.sender][spender])
require(bool,string)(b <= a,SafeMath: subtraction overflow)
true
require(bool,string)(spender != address(0),ERC20: decreaseAllowance from the zero address)
_allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
c
Checking function: _transfer(address,address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _mint(address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _burn(address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _burnFrom(address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: external
Checking function: approve(address,uint256) returns(bool) (Slither line:3127)
Visibility: external
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3127)
Visibility: external
Checking function: totalSupply() returns(uint256) (Slither line:3127)
Visibility: external
Checking function: balanceOf(address) returns(uint256) (Slither line:3127)
Visibility: external
Checking function: allowance(address,address) returns(uint256) (Slither line:3127)
Visibility: external
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
c
_transfer(msg.sender,to,value)
true
require(bool,string)(! _paused,Pausable: paused)
require(bool,string)(to != address(0),ERC20: account to the zero address)
_balances[from] = _balances[from].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
super.transfer(to,value)
_balances[to] = _balances[to].add(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Transfer(from,to,value)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
whenNotPaused()
require(bool,string)(c >= a,SafeMath: addition overflow)
c
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3127)
Visibility: public
c
super.transferFrom(from,to,value)
_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
whenNotPaused()
_transfer(from,to,value)
require(bool,string)(! _paused,Pausable: paused)
Approval(from,msg.sender,_allowed[from][msg.sender])
require(bool,string)(to != address(0),ERC20: account to the zero address)
true
_balances[from] = _balances[from].sub(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_balances[to] = _balances[to].add(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Transfer(from,to,value)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
Checking function: approve(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(spender != address(0),ERC20: approve from the zero address)
whenNotPaused()
_allowed[msg.sender][spender] = value
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
super.approve(spender,value)
Approval(msg.sender,spender,value)
require(bool,string)(! _paused,Pausable: paused)
true
Checking function: increaseAllowance(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(spender != address(0),ERC20: increaseAllowance from the zero address)
require(bool,string)(! _paused,Pausable: paused)
c
whenNotPaused()
_allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Approval(msg.sender,spender,_allowed[msg.sender][spender])
require(bool,string)(c >= a,SafeMath: addition overflow)
true
super.increaseAllowance(spender,addedValue)
Checking function: decreaseAllowance(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
super.decreaseAllowance(spender,subtractedValue)
Approval(msg.sender,spender,_allowed[msg.sender][spender])
require(bool,string)(! _paused,Pausable: paused)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
true
whenNotPaused()
require(bool,string)(spender != address(0),ERC20: decreaseAllowance from the zero address)
c
_allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Checking function: constructor() returns() (Slither line:3127)
Checking function: paused() returns(bool) (Slither line:3127)
Visibility: public
_paused
Checking function: pause() returns() (Slither line:3127)
Visibility: public
require(bool,string)(account != address(0),Roles: account is the zero address)
role.bearer[account]
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
_pausers.has(account)
onlyPauser()
account == owner
_paused = true
is an Assignment Operation (Slither line:3216)
whenNotPaused()
require(bool,string)(! _paused,Pausable: paused)
Paused(msg.sender)
Checking function: unpause() returns() (Slither line:3127)
Visibility: public
onlyPauser()
role.bearer[account]
_pausers.has(account)
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
require(bool,string)(_paused,Pausable: not paused)
account == owner
_paused = false
is an Assignment Operation (Slither line:3216)
whenPaused()
Unpaused(msg.sender)
require(bool,string)(account != address(0),Roles: account is the zero address)
Checking function: constructor() returns() (Slither line:3127)
Checking function: isPauser(address) returns(bool) (Slither line:3127)
Visibility: public
role.bearer[account]
_pausers.has(account)
require(bool,string)(account != address(0),Roles: account is the zero address)
Checking function: addPauser(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(account != address(0),Roles: account is the zero address)
role.bearer[account]
_pausers.has(account)
_pausers.add(account)
require(bool,string)(account != address(0),Roles: account is the zero address)
PauserAdded(account)
require(bool,string)(! has(role,account),Roles: account already has role)
role.bearer[account] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool)(isPauser(msg.sender) || isOwner(msg.sender))
_addPauser(account)
account == owner
onlyPauser()
Checking function: removePauser(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(account != address(0),Roles: account is the zero address)
require(bool,string)(account != address(0),Roles: account is the zero address)
role.bearer[account]
require(bool,string)(msg.sender == owner,Ownable: caller is not the owner)
_pausers.remove(account)
onlyOwner()
require(bool,string)(has(role,account),Roles: account does not have role)
PauserRemoved(account)
role.bearer[account] = false
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_removePauser(account)
Checking function: renouncePauser() returns() (Slither line:3127)
Visibility: public
role.bearer[account]
require(bool,string)(account != address(0),Roles: account is the zero address)
_pausers.remove(account)
onlyOwner()
require(bool,string)(has(role,account),Roles: account does not have role)
PauserRemoved(account)
role.bearer[account] = false
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(account != address(0),Roles: account is the zero address)
_removePauser(msg.sender)
require(bool,string)(msg.sender == owner,Ownable: caller is not the owner)
Checking function: _addPauser(address) returns() (Slither line:3127)
Visibility: internal
Checking function: _removePauser(address) returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: isOwner(address) returns(bool) (Slither line:3127)
Visibility: public
account == owner
Checking function: transferOwnership(address) returns() (Slither line:3127)
Visibility: public
onlyOwner()
require(bool,string)(_newOwner != address(0),Ownable: new owner is the zero address)
newOwner = _newOwner
is an Assignment Operation (Slither line:3216)
require(bool,string)(msg.sender == owner,Ownable: caller is not the owner)
Checking function: acceptOwnership() returns(bool) (Slither line:3127)
Visibility: public
newOwner = address(0)
is an Assignment Operation (Slither line:3216)
require(bool,string)(msg.sender == newOwner,Ownable: caller is not the new owner)
true
OwnershipTransferred(owner,newOwner)
require(bool,string)(msg.sender != address(0),Ownable: account is the zero address)
owner = newOwner
is an Assignment Operation (Slither line:3216)
onlyNewOwner()
Checking function: constructor(string,string,uint8) returns() (Slither line:3127)
Checking function: name() returns(string) (Slither line:3127)
Visibility: public
_name
Checking function: symbol() returns(string) (Slither line:3127)
Visibility: public
_symbol
Checking function: decimals() returns(uint8) (Slither line:3127)
Visibility: public
_decimals

End APX.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in APX (Slither line:1269)
Looking for getter (Slither line:1273)


Begin APX.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
Checking function: burn (Slither line:2988)
Checking function: burnFrom (Slither line:2988)
Checking function: totalSupply (Slither line:2988)
totalSupply returns uint256 variable  (Slither line:3008)
RETURN node expression: _totalSupply (Slither line:3028)
Checking function: balanceOf (Slither line:2988)
balanceOf returns uint256 variable  (Slither line:3008)
RETURN node expression: _balances[owner] (Slither line:3028)
Checking function: allowance (Slither line:2988)
allowance returns uint256 variable  (Slither line:3008)
RETURN node expression: _allowed[owner][spender] (Slither line:3028)
Checking function: transfer (Slither line:2988)
transfer returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: approve (Slither line:2988)
approve returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: transferFrom (Slither line:2988)
transferFrom returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: increaseAllowance (Slither line:2988)
increaseAllowance returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: decreaseAllowance (Slither line:2988)
decreaseAllowance returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: _transfer (Slither line:2988)
Checking function: _mint (Slither line:2988)
Checking function: _burn (Slither line:2988)
Checking function: _burnFrom (Slither line:2988)
Checking function: transfer (Slither line:2988)
transfer returns bool variable  (Slither line:3008)
RETURN node expression: super.transfer(to,value) (Slither line:3028)
Checking function: transferFrom (Slither line:2988)
transferFrom returns bool variable  (Slither line:3008)
RETURN node expression: super.transferFrom(from,to,value) (Slither line:3028)
Checking function: approve (Slither line:2988)
approve returns bool variable  (Slither line:3008)
RETURN node expression: super.approve(spender,value) (Slither line:3028)
Checking function: increaseAllowance (Slither line:2988)
increaseAllowance returns bool variable called success (Slither line:3008)
RETURN node expression: super.increaseAllowance(spender,addedValue) (Slither line:3028)
Checking function: decreaseAllowance (Slither line:2988)
decreaseAllowance returns bool variable called success (Slither line:3008)
RETURN node expression: super.decreaseAllowance(spender,subtractedValue) (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: paused (Slither line:2988)
paused returns bool variable  (Slither line:3008)
RETURN node expression: _paused (Slither line:3028)
Checking function: pause (Slither line:2988)
Checking function: unpause (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: isPauser (Slither line:2988)
isPauser returns bool variable  (Slither line:3008)
RETURN node expression: _pausers.has(account) (Slither line:3028)
Checking function: addPauser (Slither line:2988)
Checking function: removePauser (Slither line:2988)
Checking function: renouncePauser (Slither line:2988)
Checking function: _addPauser (Slither line:2988)
Checking function: _removePauser (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: isOwner (Slither line:2988)
isOwner returns bool variable  (Slither line:3008)
RETURN node expression: account == owner (Slither line:3028)
Checking function: transferOwnership (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
acceptOwnership returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: name (Slither line:2988)
name returns string variable  (Slither line:3008)
RETURN node expression: _name (Slither line:3028)
Checking function: symbol (Slither line:2988)
symbol returns string variable  (Slither line:3008)
RETURN node expression: _symbol (Slither line:3028)
Checking function: decimals (Slither line:2988)
decimals returns uint8 variable  (Slither line:3008)
RETURN node expression: _decimals (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: balanceOf (Slither line:2988)
balanceOf returns uint256 variable  (Slither line:3008)
RETURN node expression: totalBalance (Slither line:3028)
Checking function: transfer (Slither line:2988)
transfer returns bool variable  (Slither line:3008)
RETURN node expression: super.transfer(to,value) (Slither line:3028)
Checking function: freezeAccount (Slither line:2988)
freezeAccount returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: lock (Slither line:2988)
lock returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: transferWithLock (Slither line:2988)
transferWithLock returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: unlock (Slither line:2988)
unlock returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: _lock (Slither line:2988)
_lock returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: _unlock (Slither line:2988)
_unlock returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: _autoUnlock (Slither line:2988)
_autoUnlock returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: _setImplementation (Slither line:2988)
Checking function: fallback (Slither line:2988)

End APX.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in APX (Slither line:1305)
Checking node of type ENTRY_POINT (Slither line:1395)
Checking node of type NEW VARIABLE (Slither line:1395)
impl
impl = implementation
Checking node of type EXPRESSION (Slither line:1395)
require(bool,string)(impl != address(0),ERC20: account is the zero address)
Checking node of type INLINE ASM (Slither line:1395)

End APX.is_upgradeable_proxy (Slither line:1407)

