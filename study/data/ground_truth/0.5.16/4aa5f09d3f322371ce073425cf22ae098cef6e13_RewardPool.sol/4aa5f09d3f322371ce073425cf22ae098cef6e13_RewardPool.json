{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "RewardPoolDelegator (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.5.16/4aa5f09d3f322371ce073425cf22ae098cef6e13_RewardPool.sol/4aa5f09d3f322371ce073425cf22ae098cef6e13_RewardPool.sol#88-204)",
        "elements": [],
        "description": "RewardPoolDelegator (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.5.16/4aa5f09d3f322371ce073425cf22ae098cef6e13_RewardPool.sol/4aa5f09d3f322371ce073425cf22ae098cef6e13_RewardPool.sol#88-204) is an upgradeable proxy.\nimplementation was found in a different contract.\nimplementation is an address state variable.\n uses Inherited Storage\nMissing compatibility check in RewardPoolDelegator._setPendingImplementation(address)\nFound compatibility check in RewardPoolDelegator._acceptImplementation()\n",
        "id": "e77fe4714924ec3216af41b9e3a2d8deaf761456252f27c541549a24dce78548",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "RewardPoolDelegationStorage.implementation",
          "impl_address_setter": "RewardPoolDelegator._acceptImplementation()",
          "impl_address_getter": "not found",
          "impl_address_location": "RewardPoolDelegationStorage (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.5.16/4aa5f09d3f322371ce073425cf22ae098cef6e13_RewardPool.sol/4aa5f09d3f322371ce073425cf22ae098cef6e13_RewardPool.sol#8-34)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "inherited_storage": true,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "RewardPoolDelegator._setPendingImplementation(address)": "missing",
              "RewardPoolDelegator._acceptImplementation()": "require(bool,string)(msg.sender == pendingImplementation && pendingImplementation != address(0),pendingImplementation check)"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "_setPendingImplementation(address)",
              "_acceptImplementation()",
              "_setPendingAdmin(address)",
              "_acceptAdmin()"
            ]
          }
        }
      }
    ]
  }
}