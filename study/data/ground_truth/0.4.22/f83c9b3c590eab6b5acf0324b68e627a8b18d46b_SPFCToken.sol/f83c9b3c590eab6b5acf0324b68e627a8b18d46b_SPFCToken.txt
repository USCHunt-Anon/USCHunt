
Begin ERC20Interface.is_proxy (Slither line:1425)


End ERC20Interface.is_proxy (Slither line:1428)


Begin ERC20Interface.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Interface 

End ERC20Interface.is_upgradeable_proxy (Slither line:1407)


Begin ERC223Interface.is_proxy (Slither line:1425)


End ERC223Interface.is_proxy (Slither line:1428)


Begin ERC223Interface.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC223Interface 

End ERC223Interface.is_upgradeable_proxy (Slither line:1407)


Begin owned.is_proxy (Slither line:1425)


End owned.is_proxy (Slither line:1428)


Begin owned.is_upgradeable_proxy (Slither line:1136)

Checking contract: owned 

End owned.is_upgradeable_proxy (Slither line:1407)


Begin ContractReceiver.is_proxy (Slither line:1425)


End ContractReceiver.is_proxy (Slither line:1428)


Begin ContractReceiver.is_upgradeable_proxy (Slither line:1136)

Checking contract: ContractReceiver 

End ContractReceiver.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin TimeVaultInterface.is_proxy (Slither line:1425)


End TimeVaultInterface.is_proxy (Slither line:1428)


Begin TimeVaultInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: TimeVaultInterface 

End TimeVaultInterface.is_upgradeable_proxy (Slither line:1407)


Begin SPFCTokenType.is_proxy (Slither line:1425)


End SPFCTokenType.is_proxy (Slither line:1428)


Begin SPFCTokenType.is_upgradeable_proxy (Slither line:1136)

Checking contract: SPFCTokenType 

End SPFCTokenType.is_upgradeable_proxy (Slither line:1407)


Begin ERC20Token.is_proxy (Slither line:1425)


End ERC20Token.is_proxy (Slither line:1428)


Begin ERC20Token.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Token 

End ERC20Token.is_upgradeable_proxy (Slither line:1407)


Begin TimeVaultToken.is_proxy (Slither line:1425)


End TimeVaultToken.is_proxy (Slither line:1428)


Begin TimeVaultToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: TimeVaultToken 

End TimeVaultToken.is_upgradeable_proxy (Slither line:1407)


Begin StandardToken.is_proxy (Slither line:1425)


End StandardToken.is_proxy (Slither line:1428)


Begin StandardToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: StandardToken 

End StandardToken.is_upgradeable_proxy (Slither line:1407)


Begin StandardTokenExt.is_proxy (Slither line:1425)


End StandardTokenExt.is_proxy (Slither line:1428)


Begin StandardTokenExt.is_upgradeable_proxy (Slither line:1136)

Checking contract: StandardTokenExt 

End StandardTokenExt.is_upgradeable_proxy (Slither line:1407)


Begin OwnershipTransferrable.is_proxy (Slither line:1425)


End OwnershipTransferrable.is_proxy (Slither line:1428)


Begin OwnershipTransferrable.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnershipTransferrable 

End OwnershipTransferrable.is_upgradeable_proxy (Slither line:1407)


Begin VersionedToken.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin VersionedToken.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let functionCallSize := mload(functionCall) (Slither line:1576)
    let functionCallDataAddress := add(functionCall, 0x20) (Slither line:1576)
    let functionCallResult := delegatecall(gas(), upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'upgradableContractMem'
Looking for corresponding Variable
Current function: fallback

Begin VersionedToken.find_delegate_variable_from_name
Searching for upgradableContractMem (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking upgradableContractAddress (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking functionCall (Slither line:1703)
Checking upgradableContractMem (Slither line:1703)
upgradableContractMem is a Local Variable in VersionedToken.fallback (Slither line:1707)
Expression: upgradableContractAddress (Slither line:1719)
Identifier value: upgradableContractAddress (Slither line:1725)
upgradableContractAddress is a State Variable in contract VersionedToken (Slither line:1730)

End VersionedToken.find_delegate_variable_by_name


End VersionedToken.find_delegatecall_in_asm (Slither line:1637)


End VersionedToken.is_proxy (Slither line:1476)


Begin VersionedToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: VersionedToken 
VersionedToken is delegating to upgradableContractAddress
Looking for setter (Slither line:1200)


Begin VersionedToken.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: upgradeToken(address) returns() (Slither line:3127)
Visibility: public
onlyOwner()
require(bool)(msg.sender == owner)
upgradableContractAddress = newImplementation
is an Assignment Operation (Slither line:3216)

End VersionedToken.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeToken in contract: VersionedToken (Slither line:1264)
Looking for getter (Slither line:1273)


Begin VersionedToken.find_getter_in_contract (Slither line:2974)

upgradableContractAddress is a Variable object
newImplementation
Checking function: constructor (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: upgradeToken (Slither line:2988)
Checking function: fallback (Slither line:2988)

End VersionedToken.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in VersionedToken (Slither line:1305)
Checking for upgradableContractAddress at slot 1 in contract SPFCTokenType (Slither line:1355)
Found totalSupply at slot 1 in contract SPFCTokenType (Slither line:1362)
Checking for totalSupply at slot 1 in contract ERC20Token (Slither line:1355)
Found decimals at slot 1 in contract ERC20Token (Slither line:1362)
Checking for decimals at slot 1 in contract TimeVaultToken (Slither line:1355)
Found totalSupply at slot 1 in contract TimeVaultToken (Slither line:1362)
Checking for totalSupply at slot 1 in contract StandardToken (Slither line:1355)
Found totalSupply at slot 1 in contract StandardToken (Slither line:1362)
Checking for totalSupply at slot 1 in contract StandardTokenExt (Slither line:1355)
Found totalSupply at slot 1 in contract StandardTokenExt (Slither line:1362)
Checking for totalSupply at slot 1 in contract OwnershipTransferrable (Slither line:1355)
Found totalSupply at slot 1 in contract OwnershipTransferrable (Slither line:1362)
Checking for totalSupply at slot 1 in contract SPFCToken (Slither line:1355)
Found upgradableContractAddress at slot 1 in contract SPFCToken (Slither line:1362)

Begin SPFCToken.find_getter_in_contract (Slither line:2974)

upgradableContractAddress is a Variable object
newImplementation
Checking function: constructor (Slither line:2988)
Checking function: upgradeToken (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: constructor (Slither line:2988)

End SPFCToken.find_getter_in_contract (Slither line:3083)

Checking public function upgradeToken
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function upgradeToken
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function fallback
functions_writing_to_variable: upgradableContractAddress
functions_writing_to_variable: checking function VersionedToken.fallback (proxy_features line:898)
functions_writing_to_variable: checking function VersionedToken.constructor (proxy_features line:898)
functions_writing_to_variable: exp = upgradableContractAddress = initialImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: upgradableContractAddress = initialImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: upgradableContractAddress (proxy_features line:924)
get_value_assigned: upgradableContractAddress = initialImplementation
functions_writing_to_variable: constructor writes initialImplementation to upgradableContractAddress (proxy_features line:929)
functions_writing_to_variable: checking function VersionedToken.constructor (proxy_features line:898)
functions_writing_to_variable: checking function VersionedToken.upgradeToken (proxy_features line:898)
functions_writing_to_variable: exp = upgradableContractAddress = newImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: upgradableContractAddress = newImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: upgradableContractAddress (proxy_features line:924)
get_value_assigned: upgradableContractAddress = newImplementation
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:909)
functions_writing_to_variable: upgradeToken writes newImplementation to upgradableContractAddress (proxy_features line:929)
has_compatibility_checks: dependencies: ['initialImplementation', 'newImplementation', '_initialImplementation']
has_compatibility_checks: skipping constructor
has_compatibility_checks: checking public function upgradeToken
require(bool)(msg.sender == owner)
has_compatibility_checks: condition msg.sender == owner
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let functionCallSize := mload(functionCall)
    let functionCallDataAddress := add(functionCall, 0x20)
    let functionCallResult := delegatecall(gas(), upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0)
    let freeMemAddress := mload(0x40)
    switch functionCallResult
    case 0 {
        revert(freeMemAddress, 0)
    }
    default {
        returndatacopy(freeMemAddress, 0x0, returndatasize())
        return(freeMemAddress, returndatasize())
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: functionCall = msg.data
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: upgradableContractMem = upgradableContractAddress
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found public function: constructor
Found public function: upgradeToken
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == owner)
has_time_delay: (node.type) EXPRESSION
(Expression) upgradableContractAddress = newImplementation

Begin SPFCToken.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin SPFCToken.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let functionCallSize := mload(functionCall) (Slither line:1576)
    let functionCallDataAddress := add(functionCall, 0x20) (Slither line:1576)
    let functionCallResult := delegatecall(gas(), upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'upgradableContractMem'
Looking for corresponding Variable
Current function: fallback

Begin SPFCToken.find_delegate_variable_from_name
Searching for upgradableContractMem (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking upgradableContractAddress (Slither line:1689)
Checking decimals (Slither line:1689)
Checking totalSupply (Slither line:1689)
Checking balances (Slither line:1689)
Checking timevault (Slither line:1689)
Checking allowed (Slither line:1689)
Checking released (Slither line:1689)
Checking globalTimeVault (Slither line:1689)
Checking name (Slither line:1689)
Checking symbol (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking functionCall (Slither line:1703)
Checking upgradableContractMem (Slither line:1703)
upgradableContractMem is a Local Variable in SPFCToken.fallback (Slither line:1707)
Expression: upgradableContractAddress (Slither line:1719)
Identifier value: upgradableContractAddress (Slither line:1725)
upgradableContractAddress is a State Variable in contract VersionedToken (Slither line:1730)

End SPFCToken.find_delegate_variable_by_name


End SPFCToken.find_delegatecall_in_asm (Slither line:1637)


End SPFCToken.is_proxy (Slither line:1476)


Begin SPFCToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: SPFCToken 
SPFCToken is delegating to upgradableContractAddress
Looking for setter (Slither line:1200)

Looking for setter in VersionedToken (Slither line:1204)


Begin VersionedToken.find_setter_in_contract (Slither line:3119)

Expression: newImplementation (Slither line:3122)
Checking function: constructor(address) returns() (Slither line:3127)
Checking function: upgradeToken(address) returns() (Slither line:3127)
Visibility: public
onlyOwner()
require(bool)(msg.sender == owner)
upgradableContractAddress = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation

End VersionedToken.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeToken in contract: VersionedToken (Slither line:1264)
Looking for getter (Slither line:1273)


Begin VersionedToken.find_getter_in_contract (Slither line:2974)

upgradableContractAddress is a Variable object
newImplementation
Checking function: constructor (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: upgradeToken (Slither line:2988)
Checking function: fallback (Slither line:2988)

End VersionedToken.find_getter_in_contract (Slither line:3083)


Begin SPFCToken.find_getter_in_contract (Slither line:2974)

upgradableContractAddress is a Variable object
newImplementation
Checking function: constructor (Slither line:2988)
Checking function: upgradeToken (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: constructor (Slither line:2988)

End SPFCToken.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in SPFCToken (Slither line:1305)
or in VersionedToken (Slither line:1319)
Checking for upgradableContractAddress at slot 1 in contract SPFCTokenType (Slither line:1355)
Found totalSupply at slot 1 in contract SPFCTokenType (Slither line:1362)
Checking for totalSupply at slot 1 in contract ERC20Token (Slither line:1355)
Found decimals at slot 1 in contract ERC20Token (Slither line:1362)
Checking for decimals at slot 1 in contract TimeVaultToken (Slither line:1355)
Found totalSupply at slot 1 in contract TimeVaultToken (Slither line:1362)
Checking for totalSupply at slot 1 in contract StandardToken (Slither line:1355)
Found totalSupply at slot 1 in contract StandardToken (Slither line:1362)
Checking for totalSupply at slot 1 in contract StandardTokenExt (Slither line:1355)
Found totalSupply at slot 1 in contract StandardTokenExt (Slither line:1362)
Checking for totalSupply at slot 1 in contract OwnershipTransferrable (Slither line:1355)
Found totalSupply at slot 1 in contract OwnershipTransferrable (Slither line:1362)
Checking for totalSupply at slot 1 in contract VersionedToken (Slither line:1355)
Found upgradableContractAddress at slot 1 in contract VersionedToken (Slither line:1362)

Begin VersionedToken.find_getter_in_contract (Slither line:2974)

upgradableContractAddress is a Variable object
newImplementation
Checking function: constructor (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: upgradeToken (Slither line:2988)
Checking function: fallback (Slither line:2988)

End VersionedToken.find_getter_in_contract (Slither line:3083)

impl_address_from_contract_call: newImplementation
impl_address_from_contract_call: StateVariable upgradableContractAddress
impl_address_from_contract_call: getter is None
Checking public function upgradeToken
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function upgradeToken
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function fallback
functions_writing_to_variable: upgradableContractAddress
functions_writing_to_variable: checking function SPFCToken.fallback (proxy_features line:898)
functions_writing_to_variable: checking function SPFCToken.upgradeToken (proxy_features line:898)
functions_writing_to_variable: exp = upgradableContractAddress = newImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: upgradableContractAddress = newImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: upgradableContractAddress (proxy_features line:924)
get_value_assigned: upgradableContractAddress = newImplementation
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:909)
functions_writing_to_variable: upgradeToken writes newImplementation to upgradableContractAddress (proxy_features line:929)
functions_writing_to_variable: checking function VersionedToken.constructor (proxy_features line:898)
functions_writing_to_variable: checking function VersionedToken.upgradeToken (proxy_features line:898)
functions_writing_to_variable: exp = upgradableContractAddress = newImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: upgradableContractAddress = newImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: upgradableContractAddress (proxy_features line:924)
get_value_assigned: upgradableContractAddress = newImplementation
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:909)
functions_writing_to_variable: upgradeToken writes newImplementation to upgradableContractAddress (proxy_features line:929)
functions_writing_to_variable: checking function SPFCToken.constructor (proxy_features line:898)
get_value_assigned: upgradableContractAddress = initialImplementation
functions_writing_to_variable: constructor writes initialImplementation to upgradableContractAddress (proxy_features line:1013)
functions_writing_to_variable: checking function VersionedToken.fallback (proxy_features line:898)
functions_writing_to_variable: checking function VersionedToken.constructor (proxy_features line:898)
functions_writing_to_variable: exp = upgradableContractAddress = initialImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: upgradableContractAddress = initialImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: upgradableContractAddress (proxy_features line:924)
get_value_assigned: upgradableContractAddress = initialImplementation
functions_writing_to_variable: constructor writes initialImplementation to upgradableContractAddress (proxy_features line:929)
functions_writing_to_variable: checking function SPFCToken.constructor (proxy_features line:898)
functions_writing_to_variable: checking function SPFCToken.constructor (proxy_features line:898)
functions_writing_to_variable: exp = upgradableContractAddress = initialImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: upgradableContractAddress = initialImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: upgradableContractAddress (proxy_features line:924)
get_value_assigned: upgradableContractAddress = initialImplementation
functions_writing_to_variable: constructor writes initialImplementation to upgradableContractAddress (proxy_features line:929)
has_compatibility_checks: dependencies: ['newImplementation', 'initialImplementation', 'newImplementation', 'initialImplementation', '_initialImplementation']
has_compatibility_checks: checking public function upgradeToken
require(bool)(msg.sender == owner)
has_compatibility_checks: condition msg.sender == owner
has_compatibility_checks: checking public function upgradeToken
require(bool)(msg.sender == owner)
has_compatibility_checks: condition msg.sender == owner
has_compatibility_checks: skipping constructor
has_compatibility_checks: skipping constructor
has_compatibility_checks: skipping constructor
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let functionCallSize := mload(functionCall)
    let functionCallDataAddress := add(functionCall, 0x20)
    let functionCallResult := delegatecall(gas(), upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0)
    let freeMemAddress := mload(0x40)
    switch functionCallResult
    case 0 {
        revert(freeMemAddress, 0)
    }
    default {
        returndatacopy(freeMemAddress, 0x0, returndatasize())
        return(freeMemAddress, returndatasize())
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: upgradableContractMem = upgradableContractAddress
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: functionCall = msg.data
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: constructor
Found public function: upgradeToken
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == owner)
has_time_delay: (node.type) EXPRESSION
(Expression) upgradableContractAddress = newImplementation

Begin SPFCTokenImpl.is_proxy (Slither line:1425)


End SPFCTokenImpl.is_proxy (Slither line:1428)


Begin SPFCTokenImpl.is_upgradeable_proxy (Slither line:1136)

Checking contract: SPFCTokenImpl 

End SPFCTokenImpl.is_upgradeable_proxy (Slither line:1407)

