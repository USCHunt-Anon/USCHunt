{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "ControllerProxy (../../smart-contract-sanctuary/bsc/contracts/testnet/sorted/0.4.23/2c./bsc/contracts/testnet/2c/2C3175F8816B11fEfc4037E8137aA3974C58D5b9_ControllerProxy.sol/2C3175F8816B11fEfc4037E8137aA3974C58D5b9_ControllerProxy.sol#123-144)",
        "elements": [],
        "description": "ControllerProxy (../../smart-contract-sanctuary/bsc/contracts/testnet/sorted/0.4.23/2c./bsc/contracts/testnet/2c/2C3175F8816B11fEfc4037E8137aA3974C58D5b9_ControllerProxy.sol/2C3175F8816B11fEfc4037E8137aA3974C58D5b9_ControllerProxy.sol#123-144) is an upgradeable proxy.\ncontrollerDelegate was found in a different contract.\ncontrollerDelegate is an address state variable.\nMissing compatibility check in ControllerProxy.setControllerDelegate(address)\n",
        "id": "2c140a6fc24db9c7699937a86e0c6d56fd864d426bbb9ce01d5af76bf0044f00",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "ControllerStorage.controllerDelegate",
          "impl_address_setter": "ControllerProxy.setControllerDelegate(address)",
          "impl_address_getter": "not found",
          "impl_address_location": "ControllerStorage (../../smart-contract-sanctuary/bsc/contracts/testnet/sorted/0.4.23/2c./bsc/contracts/testnet/2c/2C3175F8816B11fEfc4037E8137aA3974C58D5b9_ControllerProxy.sol/2C3175F8816B11fEfc4037E8137aA3974C58D5b9_ControllerProxy.sol#89-95)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "ControllerProxy.setControllerDelegate(address)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "getDelegate()",
              "isWorker(address)",
              "allWorkers()",
              "addWorker(address)",
              "removeWorker(address)",
              "setOwner(address)",
              "getDelegate()",
              "setWalletsDelegate(address)",
              "setControllerDelegate(address)"
            ]
          }
        }
      }
    ]
  }
}