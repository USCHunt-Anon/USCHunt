
Begin Owned.is_proxy (Slither line:1425)


End Owned.is_proxy (Slither line:1428)


Begin Owned.is_upgradeable_proxy (Slither line:1136)

Checking contract: Owned 

End Owned.is_upgradeable_proxy (Slither line:1407)


Begin ReadProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ReadProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    calldatacopy(0, 0, calldatasize()) (Slither line:1576)
    let result := staticcall(gas(), sload(target_slot), 0, calldatasize(), 0, 0) (Slither line:1576)
    returndatacopy(0, 0, returndatasize()) (Slither line:1576)
    if iszero(result) { revert(0, returndatasize()) } (Slither line:1576)
    return(0, returndatasize()) (Slither line:1576)
} (Slither line:1576)

End ReadProxy.find_delegatecall_in_asm (Slither line:1637)


Begin ReadProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    calldatacopy(0, 0, calldatasize()) (Slither line:1576)
    let result := staticcall(gas(), sload(target_slot), 0, calldatasize(), 0, 0) (Slither line:1576)

Found call in inline asm (Slither line:1622)
Destination param is called 'target_slot'
Looking for corresponding Variable
Current function: fallback

Begin ReadProxy.find_delegate_variable_from_name
Searching for target_slot (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking nominatedOwner (Slither line:1689)
Checking target (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
fallback contains assembly, searching for sload (Slither line:1875)

Begin ReadProxy.find_delegate_variable_from_name
Searching for target (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking nominatedOwner (Slither line:1689)
Checking target (Slither line:1689)
target is a State Variable in contract ReadProxy (Slither line:1693)

End ReadProxy.find_delegate_variable_by_name


End ReadProxy.find_delegate_variable_from_name (Slither line:1939)


End ReadProxy.find_delegatecall_in_asm (Slither line:1637)


End ReadProxy.is_proxy (Slither line:1476)


Begin ReadProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ReadProxy 
ReadProxy is delegating to target
Looking for setter (Slither line:1200)


Begin ReadProxy.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address) returns() (Slither line:3117)
Checking function: setTarget(address) returns() (Slither line:3117)
Visibility: external
_onlyOwner()
onlyOwner()
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
target = _target
is an Assignment Operation (Slither line:3206)

End ReadProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: setTarget in contract: ReadProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin ReadProxy.find_getter_in_contract (Slither line:2964)

target is a Variable object
_target
Checking function: constructor (Slither line:2978)
Checking function: nominateNewOwner (Slither line:2978)
Checking function: acceptOwnership (Slither line:2978)
Checking function: _onlyOwner (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: setTarget (Slither line:2978)
Checking function: fallback (Slither line:2978)

End ReadProxy.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in ReadProxy (Slither line:1305)

Begin Owned.find_getter_in_contract (Slither line:2964)

target is a Variable object
_target
Checking function: constructor (Slither line:2978)
Checking function: nominateNewOwner (Slither line:2978)
Checking function: acceptOwnership (Slither line:2978)
Checking function: _onlyOwner (Slither line:2978)

End Owned.find_getter_in_contract (Slither line:3073)

Checking external function nominateNewOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function acceptOwnership
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nominatedOwner,You must be nominated before you can accept ownership)
Checking external function setTarget
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function nominateNewOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function acceptOwnership
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nominatedOwner,You must be nominated before you can accept ownership)
Checking external function setTarget
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function fallback
functions_writing_to_variable: target
functions_writing_to_variable: checking function ReadProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function ReadProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function ReadProxy.setTarget (proxy_features line:893)
functions_writing_to_variable: exp = target = _target (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: target = _target (proxy_features line:907)
functions_writing_to_variable: Identifier: target (proxy_features line:919)
get_value_assigned: target = _target
functions_writing_to_variable: exp = TargetUpdated(target) (proxy_features line:904)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = _onlyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == owner,Only the contract owner may perform this action) (proxy_features line:904)
functions_writing_to_variable: setTarget writes _target to target (proxy_features line:924)
functions_writing_to_variable: checking function ReadProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function ReadProxy.acceptOwnership (proxy_features line:893)
functions_writing_to_variable: checking function ReadProxy._onlyOwner (proxy_features line:893)
functions_writing_to_variable: checking function ReadProxy.nominateNewOwner (proxy_features line:893)
has_compatibility_checks: dependencies: ['_target']
has_compatibility_checks: checking external function setTarget
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_compatibility_checks: condition msg.sender == owner
Found public function: constructor
Found external function: nominateNewOwner
has_time_delay: (node.type) EXPRESSION
(Expression) _onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_time_delay: (node.type) EXPRESSION
(Expression) target = _target
has_time_delay: (node.type) EXPRESSION
(Expression) TargetUpdated(target)
