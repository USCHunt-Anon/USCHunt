
Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin ERCProxy.is_proxy (Slither line:1425)


End ERCProxy.is_proxy (Slither line:1428)


Begin ERCProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERCProxy 

End ERCProxy.is_upgradeable_proxy (Slither line:1407)


Begin DelegateProxy.is_proxy (Slither line:1425)


End DelegateProxy.is_proxy (Slither line:1428)


Begin DelegateProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateProxy 

End DelegateProxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradableProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin UpgradableProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    _impl := sload(position) (Slither line:1576)
} (Slither line:1576)

End UpgradableProxy.find_delegatecall_in_asm (Slither line:1637)


Begin UpgradableProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    _impl := sload(position) (Slither line:1576)
} (Slither line:1576)

End UpgradableProxy.find_delegatecall_in_asm (Slither line:1637)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin UpgradableProxy.find_delegatecall_in_exp_node

Found Expression Node: delegatedFwd(loadImplementation(),msg.data) (Slither line:2792)
Expression called: delegatedFwd
Type of call: tuple() (Slither line:2807)
Args:
loadImplementation()
msg.data

End UpgradableProxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin UpgradableProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin UpgradableProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking OWNER_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in UpgradableProxy.delegatedFwd (Slither line:1805)
CallExpression: delegatedFwd(loadImplementation(),msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(loadImplementation(),msg.data) (Slither line:1832)
The value passed to parameter #0 is loadImplementation() (Slither line:1835)

Begin UpgradableProxy.find_delegate_from_call_exp

loadImplementation() (Slither line:1993)
called = loadImplementation (Slither line:2000)
Return node of function UpgradableProxy.loadImplementation(): RETURN _impl (Slither line:2031)
_impl (Slither line:2038)
loadImplementation returns a variable of type address   called _impl (Slither line:2183)
loadImplementation contains assembly - looking for sload (Slither line:2189)
Looking in ASSEMBLY node (Slither line:2196)
{  (Slither line:2200)
    _impl := sload(position)  (Slither line:2200)
Return value set by sload in asm (Slither line:2202)
Found storage slot: IMPLEMENTATION_SLOT (Slither line:2222)

End UpgradableProxy.find_delegate_from_call_exp (Slither line:2318)

AssignmentOperation: IMPLEMENTATION_SLOT (Slither line:1811)
delegatedFwd contains assembly, searching for sload (Slither line:1875)

End UpgradableProxy.find_delegate_variable_from_name (Slither line:1939)


Begin UpgradableProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2673)


End UpgradableProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2700)


End UpgradableProxy.find_delegatecall_in_asm (Slither line:1637)

Setting UpgradableProxy._delegate_variable = UpgradableProxy._proxy_impl_slot: IMPLEMENTATION_SLOT (Slither line:1473)


End UpgradableProxy.is_proxy (Slither line:1476)


Begin UpgradableProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradableProxy 
Call destination IMPLEMENTATION_SLOT is constant (Slither line:1146)

IMPLEMENTATION_SLOT is the implementation storage slot (Slither line:1149)

UpgradableProxy is delegating to IMPLEMENTATION_SLOT
Looking for setter (Slither line:1200)


Begin UpgradableProxy.find_setter_in_contract (Slither line:3109)

Expression: keccak256(bytes)(matic.network.proxy.implementation) (Slither line:3112)
Checking function: constructor(address) returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: owner() returns(address) (Slither line:3117)
Visibility: external
_owner
loadOwner()
Checking function: loadOwner() returns(address) (Slither line:3117)
Visibility: internal
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: external
loadImplementation()
_impl
Checking function: loadImplementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: transferOwnership(address) returns() (Slither line:3117)
Visibility: public
onlyProxyOwner()
require(bool,string)(newOwner != address(0),ZERO_ADDRESS)
_owner
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
OwnerUpdate(newOwner,loadOwner())
setOwner(newOwner)
    sstore(position, newOwner) (Slither line:3153)
transferOwnership reads and/or writes to variable position (Slither line:3160)
transferOwnership reads and/or writes to variable OWNER_SLOT (Slither line:3160)
Checking function: setOwner(address) returns() (Slither line:3117)
Visibility: private
Checking function: updateImplementation(address) returns() (Slither line:3117)
Visibility: public
_owner
    sstore(position, _newProxyTo) (Slither line:3153)
updateImplementation reads and/or writes to variable position (Slither line:3160)
updateImplementation reads and/or writes to variable IMPLEMENTATION_SLOT (Slither line:3160)

End UpgradableProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: updateImplementation in contract: UpgradableProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradableProxy.find_getter_in_contract (Slither line:2964)

IMPLEMENTATION_SLOT is a Variable object
keccak256(bytes)(matic.network.proxy.implementation)
Checking function: proxyType (Slither line:2978)
proxyType returns uint256 variable called proxyTypeId (Slither line:2998)
Checking function: delegatedFwd (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: fallback (Slither line:2978)
Checking function: owner (Slither line:2978)
owner returns address variable  (Slither line:2998)
RETURN node expression: loadOwner() (Slither line:3018)
Checking function: loadOwner (Slither line:2978)
loadOwner returns address variable  (Slither line:2998)
loadOwner contains assembly (Slither line:3041)
RETURN node expression: _owner (Slither line:3018)
loadOwner contains assembly (Slither line:3041)
loadOwner contains assembly (Slither line:3041)
loadOwner contains assembly (Slither line:3041)
loadOwner contains assembly (Slither line:3041)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: loadImplementation() (Slither line:3018)
Checking function: loadImplementation (Slither line:2978)
loadImplementation returns address variable  (Slither line:2998)
loadImplementation contains assembly (Slither line:3041)

End UpgradableProxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: loadImplementation in contract: UpgradableProxy (Slither line:1285)

End UpgradableProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: UpgradableProxy
Setter found in contract UpgradableProxy
Checking external function proxyType
Checking external function implementation
Checking external function proxyType
Checking external function implementation
Checking external function owner
Checking external function implementation
Checking public function transferOwnership
Checking public function updateImplementation
Checking public function updateAndCall
Checking external function fallback
functions_writing_to_variable: IMPLEMENTATION_SLOT
functions_writing_to_variable: checking function UpgradableProxy.loadOwner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.updateImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.isContract (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.loadImplementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.constructor (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.setOwner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.setImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.owner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:907)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.updateAndCall (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:893)
has_compatibility_checks: dependencies: []
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
has_compatibility_checks: checking public function constructor
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found external function: proxyType
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) RETURN
(Expression) _impl
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_time_delay: (node.type) IF
(Expression) _target == address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_time_delay: (node.type) EXPRESSION
(Expression) ProxyUpdated(_newProxyTo,loadImplementation())
has_time_delay: (node.type) EXPRESSION
(Expression) setImplementation(_newProxyTo)
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = OWNER_SLOT

Begin StakeManagerProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin StakeManagerProxy.find_delegatecall_in_exp_node

Found Expression Node: delegatedFwd(loadImplementation(),msg.data) (Slither line:2792)
Expression called: delegatedFwd
Type of call: tuple() (Slither line:2807)
Args:
loadImplementation()
msg.data

End StakeManagerProxy.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin StakeManagerProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin StakeManagerProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking OWNER_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in StakeManagerProxy.delegatedFwd (Slither line:1805)
CallExpression: delegatedFwd(loadImplementation(),msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(loadImplementation(),msg.data) (Slither line:1832)
The value passed to parameter #0 is loadImplementation() (Slither line:1835)

Begin StakeManagerProxy.find_delegate_from_call_exp

loadImplementation() (Slither line:1993)
called = loadImplementation (Slither line:2000)
Return node of function UpgradableProxy.loadImplementation(): RETURN _impl (Slither line:2031)
_impl (Slither line:2038)
loadImplementation returns a variable of type address   called _impl (Slither line:2183)
loadImplementation contains assembly - looking for sload (Slither line:2189)
Looking in ASSEMBLY node (Slither line:2196)
{  (Slither line:2200)
    _impl := sload(position)  (Slither line:2200)
Return value set by sload in asm (Slither line:2202)
Found storage slot: IMPLEMENTATION_SLOT (Slither line:2222)

End StakeManagerProxy.find_delegate_from_call_exp (Slither line:2318)

AssignmentOperation: IMPLEMENTATION_SLOT (Slither line:1811)
delegatedFwd contains assembly, searching for sload (Slither line:1875)

End StakeManagerProxy.find_delegate_variable_from_name (Slither line:1939)


Begin StakeManagerProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2673)


End StakeManagerProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2700)


End StakeManagerProxy.find_delegatecall_in_asm (Slither line:1637)

Setting StakeManagerProxy._delegate_variable = StakeManagerProxy._proxy_impl_slot: IMPLEMENTATION_SLOT (Slither line:1473)


End StakeManagerProxy.is_proxy (Slither line:1476)


Begin StakeManagerProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakeManagerProxy 
Call destination IMPLEMENTATION_SLOT is constant (Slither line:1146)

IMPLEMENTATION_SLOT is the implementation storage slot (Slither line:1149)

StakeManagerProxy is delegating to IMPLEMENTATION_SLOT
Looking for setter (Slither line:1200)

Looking for setter in UpgradableProxy (Slither line:1204)


Begin UpgradableProxy.find_setter_in_contract (Slither line:3109)

Expression: keccak256(bytes)(matic.network.proxy.implementation) (Slither line:3112)
Checking function: constructor(address) returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: owner() returns(address) (Slither line:3117)
Visibility: external
_owner
loadOwner()
Checking function: loadOwner() returns(address) (Slither line:3117)
Visibility: internal
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: external
loadImplementation()
_impl
Checking function: loadImplementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: transferOwnership(address) returns() (Slither line:3117)
Visibility: public
onlyProxyOwner()
require(bool,string)(newOwner != address(0),ZERO_ADDRESS)
_owner
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
OwnerUpdate(newOwner,loadOwner())
setOwner(newOwner)
    sstore(position, newOwner) (Slither line:3153)
transferOwnership reads and/or writes to variable position (Slither line:3160)
transferOwnership reads and/or writes to variable OWNER_SLOT (Slither line:3160)
Checking function: setOwner(address) returns() (Slither line:3117)
Visibility: private
Checking function: updateImplementation(address) returns() (Slither line:3117)
Visibility: public
_owner
    sstore(position, _newProxyTo) (Slither line:3153)
updateImplementation reads and/or writes to variable position (Slither line:3160)
updateImplementation reads and/or writes to variable IMPLEMENTATION_SLOT (Slither line:3160)

End UpgradableProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: updateImplementation in contract: UpgradableProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradableProxy.find_getter_in_contract (Slither line:2964)

IMPLEMENTATION_SLOT is a Variable object
keccak256(bytes)(matic.network.proxy.implementation)

End UpgradableProxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: loadImplementation in contract: UpgradableProxy (Slither line:1285)

End StakeManagerProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: StakeManagerProxy
Setter found in contract UpgradableProxy
impl_address_from_contract_call: keccak256(bytes)(matic.network.proxy.implementation)
impl_address_from_contract_call: StateVariable IMPLEMENTATION_SLOT
impl_address_from_contract_call: getter is loadImplementation
getter.full_name = loadImplementation()
impl_address_from_contract_call: CallExpression delegatedFwd(loadImplementation(),msg.data)
impl_address_from_contract_call: arg is loadImplementation()
impl_address_from_contract_call: CallExpression loadImplementation()
called: keccak256(bytes)
Checking external function owner
Checking external function implementation
Checking public function transferOwnership
Checking public function updateImplementation
Checking public function updateAndCall
Checking external function proxyType
Checking external function implementation
Checking external function proxyType
Checking external function implementation
Checking external function fallback
functions_writing_to_variable: IMPLEMENTATION_SLOT
functions_writing_to_variable: checking function UpgradableProxy.loadOwner (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.setImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.constructor (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.loadImplementation (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.updateAndCall (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.isContract (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.loadImplementation (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.constructor (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.setImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.owner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.constructor (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.setOwner (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.setOwner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:907)
functions_writing_to_variable: checking function StakeManagerProxy.loadOwner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.updateImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.isContract (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function StakeManagerProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:907)
functions_writing_to_variable: checking function UpgradableProxy.owner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.updateAndCall (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.updateImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
    sstore(position, _newProxyTo)
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function StakeManagerProxy.implementation (proxy_features line:893)
has_compatibility_checks: dependencies: []
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: checking public function constructor
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
has_compatibility_checks: checking public function constructor
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: checking public function constructor
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found fallback
Found external function: owner
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) RETURN
(Expression) _impl
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_time_delay: (node.type) IF
(Expression) _target == address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_time_delay: (node.type) EXPRESSION
(Expression) ProxyUpdated(_newProxyTo,loadImplementation())
has_time_delay: (node.type) EXPRESSION
(Expression) setImplementation(_newProxyTo)
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = OWNER_SLOT
