{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "ShadowFaxDelegator (../../smart-contract-sanctuary/bsc/contracts/testnet/sorted/0.6.12/1e30d14353181296e2a0624e925350d86fcd71c2_ShadowFaxDelegator.sol/1e30d14353181296e2a0624e925350d86fcd71c2_ShadowFaxDelegator.sol#121-197)",
        "elements": [],
        "description": "ShadowFaxDelegator (../../smart-contract-sanctuary/bsc/contracts/testnet/sorted/0.6.12/1e30d14353181296e2a0624e925350d86fcd71c2_ShadowFaxDelegator.sol/1e30d14353181296e2a0624e925350d86fcd71c2_ShadowFaxDelegator.sol#121-197) is an upgradeable proxy.\nimplementation was found in a different contract.\nimplementation is an address state variable.\nMissing compatibility check in ShadowFaxDelegator._setImplementation(address)\nMissing compatibility check in ShadowFaxDelegator.constructor(address,address)\n",
        "id": "92b414f3a84a0b2cb759cf4897ad4ffebce4978a6afec8f2a1b9bf491af0f4b2",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "ShadowFaxAdminStorage.implementation",
          "impl_address_setter": "ShadowFaxDelegator._setImplementation(address)",
          "impl_address_getter": "not found",
          "impl_address_location": "ShadowFaxAdminStorage (../../smart-contract-sanctuary/bsc/contracts/testnet/sorted/0.6.12/1e30d14353181296e2a0624e925350d86fcd71c2_ShadowFaxDelegator.sol/1e30d14353181296e2a0624e925350d86fcd71c2_ShadowFaxDelegator.sol#110-114)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "ShadowFaxDelegator._setImplementation(address)": "missing",
              "ShadowFaxDelegator.constructor(address,address)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "owner()",
              "renounceOwnership()",
              "transferOwnership(address)",
              "_setImplementation(address)",
              "_setAdmin(address)"
            ]
          }
        }
      }
    ]
  }
}