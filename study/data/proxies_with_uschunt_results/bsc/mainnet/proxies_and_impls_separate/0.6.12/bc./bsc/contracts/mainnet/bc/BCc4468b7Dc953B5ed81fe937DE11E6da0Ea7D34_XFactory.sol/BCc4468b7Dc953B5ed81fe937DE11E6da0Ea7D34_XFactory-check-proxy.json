{
  "success": false,
  "error": "Invalid compilation: \nInvalid solc compilation Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> /home/webthethird/Documents/ethereum/smart-contract-sanctuary/bsc/contracts/mainnet/proxies_and_impls_separate//0.6.12/bc./bsc/contracts/mainnet/bc/BCc4468b7Dc953B5ed81fe937DE11E6da0Ea7D34_XFactory.sol/BCc4468b7Dc953B5ed81fe937DE11E6da0Ea7D34_XFactory.sol\n\nError: Duplicate experimental feature name.\n    --> /home/webthethird/Documents/ethereum/smart-contract-sanctuary/bsc/contracts/mainnet/proxies_and_impls_separate//0.6.12/bc./bsc/contracts/mainnet/bc/BCc4468b7Dc953B5ed81fe937DE11E6da0Ea7D34_XFactory.sol/BCc4468b7Dc953B5ed81fe937DE11E6da0Ea7D34_XFactory.sol:1674:1:\n     |\n1674 | pragma experimental ABIEncoderV2;\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
  "results": {
    "proxy-present": false,
    "contract_v2-present": false,
    "detectors": [
      {
        "elements": [],
        "description": "Initializable contract not found, the contract does not follow a standard initalization schema.\n",
        "markdown": "Initializable contract not found, the contract does not follow a standard initalization schema.\n",
        "first_markdown_element": "",
        "id": "cd3ea1ea9752968141b08f29be99ab04db7e40ff88ebc2b2479a7ed0c3dcf61d",
        "check": "init-missing"
      }
    ]
  }
}