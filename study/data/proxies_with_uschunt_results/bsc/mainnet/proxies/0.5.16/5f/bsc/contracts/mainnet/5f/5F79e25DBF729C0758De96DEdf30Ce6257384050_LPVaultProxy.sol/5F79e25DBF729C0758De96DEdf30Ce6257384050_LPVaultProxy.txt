
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin IBEP20.is_proxy (Slither line:1425)


End IBEP20.is_proxy (Slither line:1428)


Begin IBEP20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBEP20 

End IBEP20.is_upgradeable_proxy (Slither line:1407)


Begin LPVaultAdminStorage.is_proxy (Slither line:1425)


End LPVaultAdminStorage.is_proxy (Slither line:1428)


Begin LPVaultAdminStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: LPVaultAdminStorage 

End LPVaultAdminStorage.is_upgradeable_proxy (Slither line:1407)


Begin LPVaultErrorReporter.is_proxy (Slither line:1425)


End LPVaultErrorReporter.is_proxy (Slither line:1428)


Begin LPVaultErrorReporter.is_upgradeable_proxy (Slither line:1136)

Checking contract: LPVaultErrorReporter 

End LPVaultErrorReporter.is_upgradeable_proxy (Slither line:1407)


Begin LPVaultProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin LPVaultProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_mem_ptr := mload(0x40) (Slither line:1576)
    returndatacopy(free_mem_ptr, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End LPVaultProxy.find_delegatecall_in_asm (Slither line:1637)


Begin LPVaultProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_mem_ptr := mload(0x40) (Slither line:1576)
    returndatacopy(free_mem_ptr, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End LPVaultProxy.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End LPVaultProxy.is_proxy (Slither line:1476)


Begin LPVaultProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: LPVaultProxy 
LPVaultProxy is delegating to lpVaultImplementation
Looking for setter (Slither line:1200)

Looking for setter in LPVaultAdminStorage (Slither line:1204)


Begin LPVaultAdminStorage.find_setter_in_contract (Slither line:3119)


End LPVaultAdminStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in LPVaultAdminStorage 
Looking in LPVaultProxy (Slither line:1213)

Begin LPVaultProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor() returns() (Slither line:3127)
Checking function: _setPendingImplementation(address) returns(uint256) (Slither line:3127)
Visibility: public
pendingLPVaultImplementation = newPendingImplementation
is an Assignment Operation (Slither line:3216)
fail(Error.UNAUTHORIZED,FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK)
NewPendingImplementation(oldPendingImplementation,pendingLPVaultImplementation)
uint256(err)
Failure(uint256(err),uint256(info),0)
uint256(Error.NO_ERROR)
Checking function: _acceptImplementation() returns(uint256) (Slither line:3127)
Visibility: public
pendingLPVaultImplementation = address(0)
is an Assignment Operation (Slither line:3216)
NewImplementation(oldImplementation,lpVaultImplementation)
fail(Error.UNAUTHORIZED,FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK)
NewPendingImplementation(oldPendingImplementation,pendingLPVaultImplementation)
uint256(err)
lpVaultImplementation = pendingLPVaultImplementation
is an Assignment Operation (Slither line:3216)

End LPVaultProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: _acceptImplementation in contract: LPVaultProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin LPVaultAdminStorage.find_getter_in_contract (Slither line:2974)

lpVaultImplementation is a Variable object
pendingLPVaultImplementation

End LPVaultAdminStorage.find_getter_in_contract (Slither line:3083)


Begin LPVaultProxy.find_getter_in_contract (Slither line:2974)

lpVaultImplementation is a Variable object
pendingLPVaultImplementation
Checking function: fail (Slither line:2988)
fail returns uint256 variable  (Slither line:3008)
RETURN node expression: uint256(err) (Slither line:3028)
Checking function: failOpaque (Slither line:2988)
failOpaque returns uint256 variable  (Slither line:3008)
RETURN node expression: uint256(err) (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: _setPendingImplementation (Slither line:2988)
_setPendingImplementation returns uint256 variable  (Slither line:3008)
RETURN node expression: fail(Error.UNAUTHORIZED,FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK) (Slither line:3028)
RETURN node expression: uint256(Error.NO_ERROR) (Slither line:3028)
Checking function: _acceptImplementation (Slither line:2988)
_acceptImplementation returns uint256 variable  (Slither line:3008)
RETURN node expression: fail(Error.UNAUTHORIZED,FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK) (Slither line:3028)
RETURN node expression: uint256(Error.NO_ERROR) (Slither line:3028)
Checking function: _setPendingAdmin (Slither line:2988)
_setPendingAdmin returns uint256 variable  (Slither line:3008)
RETURN node expression: uint256(Error.NO_ERROR) (Slither line:3028)
RETURN node expression: fail(Error.UNAUTHORIZED,FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK) (Slither line:3028)
Checking function: _acceptAdmin (Slither line:2988)
_acceptAdmin returns uint256 variable  (Slither line:3008)
RETURN node expression: uint256(Error.NO_ERROR) (Slither line:3028)
RETURN node expression: fail(Error.UNAUTHORIZED,FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK) (Slither line:3028)
Checking function: fallback (Slither line:2988)

End LPVaultProxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in LPVaultProxy (Slither line:1305)
or in LPVaultAdminStorage (Slither line:1319)

Begin LPVaultStorage.find_getter_in_contract (Slither line:2974)

lpVaultImplementation is a Variable object
pendingLPVaultImplementation

End LPVaultStorage.find_getter_in_contract (Slither line:3083)


End LPVaultProxy.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: pendingLPVaultImplementation
impl_address_from_contract_call: StateVariable lpVaultImplementation
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression lpVaultImplementation.delegatecall(msg.data)
Checking public function _setPendingImplementation
Checking public function _acceptImplementation
Checking public function _setPendingAdmin
Checking public function _acceptAdmin
Checking public function _setPendingImplementation
Checking public function _acceptImplementation
Checking public function _setPendingAdmin
Checking public function _acceptAdmin
Checking external function fallback
functions_writing_to_variable: lpVaultImplementation
functions_writing_to_variable: checking function LPVaultProxy.fail (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy._acceptImplementation (proxy_features line:898)
functions_writing_to_variable: exp = msg.sender != pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: exp = fail(Error.UNAUTHORIZED,FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK) (proxy_features line:909)
functions_writing_to_variable: exp = oldImplementation = lpVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldImplementation = lpVaultImplementation (proxy_features line:912)
functions_writing_to_variable: exp = oldPendingImplementation = pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldPendingImplementation = pendingLPVaultImplementation (proxy_features line:912)
functions_writing_to_variable: exp = lpVaultImplementation = pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: lpVaultImplementation = pendingLPVaultImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: lpVaultImplementation (proxy_features line:924)
get_value_assigned: lpVaultImplementation = pendingLPVaultImplementation
functions_writing_to_variable: exp = pendingLPVaultImplementation = address(0) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: pendingLPVaultImplementation = address(0) (proxy_features line:912)
functions_writing_to_variable: exp = NewImplementation(oldImplementation,lpVaultImplementation) (proxy_features line:909)
functions_writing_to_variable: exp = NewPendingImplementation(oldPendingImplementation,pendingLPVaultImplementation) (proxy_features line:909)
functions_writing_to_variable: exp = uint256(Error.NO_ERROR) (proxy_features line:909)
functions_writing_to_variable: exp = Failure(uint256(err),uint256(info),0) (proxy_features line:909)
functions_writing_to_variable: exp = uint256(err) (proxy_features line:909)
functions_writing_to_variable: _acceptImplementation writes pendingLPVaultImplementation to lpVaultImplementation (proxy_features line:929)
functions_writing_to_variable: checking function LPVaultProxy._acceptAdmin (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy.failOpaque (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy._setPendingImplementation (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy._setPendingAdmin (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy.fallback (proxy_features line:898)
has_compatibility_checks: dependencies: ['newPendingImplementation', 'pendingLPVaultImplementation', 'TMP_50']
functions_writing_to_variable: pendingLPVaultImplementation
functions_writing_to_variable: checking function LPVaultProxy.fail (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy._acceptImplementation (proxy_features line:898)
functions_writing_to_variable: exp = msg.sender != pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: exp = fail(Error.UNAUTHORIZED,FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK) (proxy_features line:909)
functions_writing_to_variable: exp = oldImplementation = lpVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldImplementation = lpVaultImplementation (proxy_features line:912)
functions_writing_to_variable: exp = oldPendingImplementation = pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldPendingImplementation = pendingLPVaultImplementation (proxy_features line:912)
functions_writing_to_variable: exp = lpVaultImplementation = pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: lpVaultImplementation = pendingLPVaultImplementation (proxy_features line:912)
functions_writing_to_variable: exp = pendingLPVaultImplementation = address(0) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: pendingLPVaultImplementation = address(0) (proxy_features line:912)
functions_writing_to_variable: Identifier: pendingLPVaultImplementation (proxy_features line:924)
get_value_assigned: pendingLPVaultImplementation = address(0)
functions_writing_to_variable: exp = NewImplementation(oldImplementation,lpVaultImplementation) (proxy_features line:909)
functions_writing_to_variable: exp = NewPendingImplementation(oldPendingImplementation,pendingLPVaultImplementation) (proxy_features line:909)
functions_writing_to_variable: exp = uint256(Error.NO_ERROR) (proxy_features line:909)
functions_writing_to_variable: exp = Failure(uint256(err),uint256(info),0) (proxy_features line:909)
functions_writing_to_variable: exp = uint256(err) (proxy_features line:909)
functions_writing_to_variable: checking function LPVaultProxy._acceptAdmin (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy.failOpaque (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy._setPendingImplementation (proxy_features line:898)
functions_writing_to_variable: exp = msg.sender != admin (proxy_features line:909)
functions_writing_to_variable: exp = fail(Error.UNAUTHORIZED,FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK) (proxy_features line:909)
functions_writing_to_variable: exp = oldPendingImplementation = pendingLPVaultImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldPendingImplementation = pendingLPVaultImplementation (proxy_features line:912)
functions_writing_to_variable: exp = pendingLPVaultImplementation = newPendingImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: pendingLPVaultImplementation = newPendingImplementation (proxy_features line:912)
functions_writing_to_variable: Identifier: pendingLPVaultImplementation (proxy_features line:924)
get_value_assigned: pendingLPVaultImplementation = newPendingImplementation
functions_writing_to_variable: exp = NewPendingImplementation(oldPendingImplementation,pendingLPVaultImplementation) (proxy_features line:909)
functions_writing_to_variable: exp = uint256(Error.NO_ERROR) (proxy_features line:909)
functions_writing_to_variable: exp = Failure(uint256(err),uint256(info),0) (proxy_features line:909)
functions_writing_to_variable: exp = uint256(err) (proxy_features line:909)
functions_writing_to_variable: _setPendingImplementation writes newPendingImplementation to pendingLPVaultImplementation (proxy_features line:929)
functions_writing_to_variable: checking function LPVaultProxy._setPendingAdmin (proxy_features line:898)
functions_writing_to_variable: checking function LPVaultProxy.fallback (proxy_features line:898)
has_compatibility_checks: checking public function _acceptImplementation
has_compatibility_checks: IF node exp = msg.sender != pendingLPVaultImplementation
has_compatibility_checks: checking public function _setPendingImplementation
has_compatibility_checks: IF node exp = msg.sender != admin
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: (success) = lpVaultImplementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
Found public function: constructor
Found public function: _setPendingImplementation
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = lpVaultImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) pendingLPVaultImplementation = address(0)
has_time_delay: (node.type) IF
(Expression) msg.sender != pendingLPVaultImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(oldImplementation,lpVaultImplementation)
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldPendingImplementation = pendingLPVaultImplementation
has_time_delay: (node.type) RETURN
(Expression) fail(Error.UNAUTHORIZED,FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK)
has_time_delay: (node.type) EXPRESSION
(Expression) NewPendingImplementation(oldPendingImplementation,pendingLPVaultImplementation)
has_time_delay: (node.type) RETURN
(Expression) uint256(err)
has_time_delay: (node.type) EXPRESSION
(Expression) lpVaultImplementation = pendingLPVaultImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) Failure(uint256(err),uint256(info),0)
has_time_delay: (node.type) RETURN
(Expression) uint256(Error.NO_ERROR)

Begin LPVaultStorage.is_proxy (Slither line:1425)


End LPVaultStorage.is_proxy (Slither line:1428)


Begin LPVaultStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: LPVaultStorage 

End LPVaultStorage.is_upgradeable_proxy (Slither line:1407)

