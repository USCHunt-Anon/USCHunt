
Begin OrderBookProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin OrderBookProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(facet != address(0),Diamond: Function does not exist) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
facet != address(0)
Diamond: Function does not exist

End OrderBookProxy.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin OrderBookProxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2802)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
0
returndatasize()()

End OrderBookProxy.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin OrderBookProxy.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2817)
Args:
gas()()
facet
0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2824)

Destination is facet (Slither line:2828)
dest.value: facet (Slither line:2831)
Expression: address(bytes20(ds.facets[msg.sig])) (Slither line:2836)

End OrderBookProxy.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin OrderBookProxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End OrderBookProxy.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin OrderBookProxy.find_delegatecall_in_exp_node

Found Expression Node: ds = position (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)

End OrderBookProxy.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin OrderBookProxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End OrderBookProxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin OrderBookProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'facet'
Looking for corresponding Variable
Current function: fallback

Begin OrderBookProxy.find_delegate_variable_from_name
Searching for facet (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking weth (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking position (Slither line:1703)
Checking ds (Slither line:1703)
Checking facet (Slither line:1703)
facet is a Local Variable in OrderBookProxy.fallback (Slither line:1707)
facet appears to be a Diamond facet address (Slither line:1713)

End OrderBookProxy.find_delegate_variable_by_name


End OrderBookProxy.find_delegatecall_in_asm (Slither line:1637)


End OrderBookProxy.is_proxy (Slither line:1476)


Begin OrderBookProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: OrderBookProxy 
Local Variable: facet (Slither line:1164)
OrderBookProxy is delegating to facet
Looking for setter (Slither line:1200)


Begin OrderBookProxy.find_setter_in_contract (Slither line:3119)

Expression: address(bytes20(ds.facets[msg.sig])) (Slither line:3122)
Checking function: constructor(address,IDiamondCut.FacetCut[]) returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)
Checking function: transferOwnership(address) returns() (Slither line:3127)
Visibility: external
ds.contractOwner = _newOwner
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
LibDiamond.setContractOwner(_newOwner)
ds = position
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
require(bool,string)(msg.sender == diamondStorage().contractOwner,LibDiamond: Must be contract owner)
OwnershipTransferred(previousOwner,_newOwner)
LibDiamond.enforceIsContractOwner()
Checking function: owner() returns(address) (Slither line:3127)
Visibility: external
ds = position
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
owner_ = LibDiamond.contractOwner()
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
contractOwner_ = diamondStorage().contractOwner
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
Checking function: addToTokenBalance(address,address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: minusFromTokenBalance(address,address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: depositERC20(uint256,address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(userBal + amount >= userBal,Amount must be positive. )
ds.userBalances[user][tokenAddress] += amount
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
ds = storagePosition
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
require(bool,string)(IERC20(tokenAddress).transferFrom(msg.sender,address(this),amount),Deposit failed. )
addToTokenBalance(msg.sender,tokenAddress,amount)
Checking function: withdrawERC20(uint256,address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(userBal - amount >= 0,Insufficient balance. )
ds.userBalances[user][tokenAddress] -= amount
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
ds = storagePosition
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
require(bool,string)(IERC20(tokenAddress).transfer(msg.sender,amount),Withdraw failed. )
require(bool,string)(userBal - amount <= userBal,Amount must be positive. )
minusFromTokenBalance(msg.sender,tokenAddress,amount)
Checking function: depositETH() returns() (Slither line:3127)
Visibility: external
addToTokenBalance(msg.sender,weth,msg.value)
require(bool,string)(userBal + amount >= userBal,Amount must be positive. )
ds.userBalances[user][tokenAddress] += amount
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
ds = storagePosition
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
IWETH(weth).deposit{value: msg.value}()
Checking function: withdrawETH(uint256) returns() (Slither line:3127)
Visibility: external
require(bool,string)(userBal - amount >= 0,Insufficient balance. )
minusFromTokenBalance(msg.sender,weth,amount)
require(bool,string)(success,TransferHelper: ETH_TRANSFER_FAILED)
ds.userBalances[user][tokenAddress] -= amount
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
ds = storagePosition
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
(success) = to.call{value: value}(new bytes(0))
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
IWETH(weth).withdraw(amount)
require(bool,string)(userBal - amount <= userBal,Amount must be positive. )
TransferHelper.safeTransferETH(msg.sender,amount)
Checking function: getTokenBalance(address,address) returns(uint256) (Slither line:3127)
Visibility: external
ds = storagePosition
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
userBal
Checking function: getETHBalance(address) returns(uint256) (Slither line:3127)
Visibility: external
userBal
ds = storagePosition
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
Checking function: updateWETH(address) returns() (Slither line:3127)
Visibility: external
ds = position
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
require(bool,string)(_weth != address(this),Invalid wallet address)
require(bool,string)(msg.sender == diamondStorage().contractOwner,LibDiamond: Must be contract owner)
weth = _weth
is an Assignment Operation (Slither line:3216)
address(bytes20(ds.facets[msg.sig]))
LibDiamond.enforceIsContractOwner()
require(bool,string)(_weth != address(0x0),Invalid wallet address)
Checking function: fallback() returns() (Slither line:3127)

Begin DiamondCut corner case handling (Slither line:3287)

require(bool,string)
require(bool,string)
enforceHasContractCode
require(bool,string)
require(bool,string)
require(bool,string)
LibDiamond.diamondCut

End DiamondCut corner case handling (Slither line:3343)


End OrderBookProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: diamondCut in contract: LibDiamond (Slither line:1264)
Looking for getter (Slither line:1273)


Begin OrderBookProxy.find_getter_in_contract (Slither line:2974)

facet is a Variable object
address(bytes20(ds.facets[msg.sig]))
Checking function: constructor (Slither line:2988)
Checking function: receive (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable called owner_ (Slither line:3008)
Checking function: addToTokenBalance (Slither line:2988)
Checking function: minusFromTokenBalance (Slither line:2988)
Checking function: depositERC20 (Slither line:2988)
Checking function: withdrawERC20 (Slither line:2988)
Checking function: depositETH (Slither line:2988)
Checking function: withdrawETH (Slither line:2988)
Checking function: getTokenBalance (Slither line:2988)
getTokenBalance returns uint256 variable  (Slither line:3008)
RETURN node expression: userBal (Slither line:3028)
Checking function: getETHBalance (Slither line:2988)
getETHBalance returns uint256 variable  (Slither line:3008)
RETURN node expression: userBal (Slither line:3028)
Checking function: updateWETH (Slither line:2988)
Checking function: fallback (Slither line:2988)

End OrderBookProxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in OrderBookProxy (Slither line:1305)

Begin OrderBookStorage.find_getter_in_contract (Slither line:2974)

facet is a Variable object
address(bytes20(ds.facets[msg.sig]))
Checking function: orderBookStruct (Slither line:2988)
orderBookStruct returns OrderBookStorage.OrderBook variable called ds (Slither line:3008)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End OrderBookStorage.find_getter_in_contract (Slither line:3083)

Looking for Loupe functions in OrderBookStorage
orderBookStruct() returns(OrderBookStorage.OrderBook)
slitherConstructorConstantVariables() returns()
Looking for Loupe functions in LibDiamond
diamondStorage() returns(LibDiamond.DiamondStorage)
setContractOwner(address) returns()
contractOwner() returns(address)
enforceIsContractOwner() returns()
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
addReplaceRemoveFacetSelectors(uint256,bytes32,address,IDiamondCut.FacetCutAction,bytes4[]) returns(uint256,bytes32)
initializeDiamondCut(address,bytes) returns()
enforceHasContractCode(address,string) returns()
slitherConstructorConstantVariables() returns()
Looking for Loupe functions in TransferHelper
safeApprove(address,address,uint256) returns()
safeTransfer(address,address,uint256) returns()
safeTransferFrom(address,address,address,uint256) returns()
safeTransferETH(address,uint256) returns()
impl_address_from_contract_call: address(bytes20(ds.facets[msg.sig]))
Checking external function transferOwnership
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == diamondStorage().contractOwner,LibDiamond: Must be contract owner)
Checking external function owner
Checking external function depositERC20
Checking external function withdrawERC20
Checking external function depositETH
Checking external function withdrawETH
Checking external function getTokenBalance
Checking external function getETHBalance
Checking external function updateWETH
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == diamondStorage().contractOwner,LibDiamond: Must be contract owner)
Checking external function receive
Checking external function fallback
functions_writing_to_variable: facet
functions_writing_to_variable: checking function OrderBookProxy.receive (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.depositETH (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.enforceIsContractOwner (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.withdrawETH (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.diamondCut (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.owner (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.addReplaceRemoveFacetSelectors (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.withdrawERC20 (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.getTokenBalance (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.diamondStorage (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.addToTokenBalance (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.initializeDiamondCut (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.getETHBalance (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.minusFromTokenBalance (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.enforceHasContractCode (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.updateWETH (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.setContractOwner (proxy_features line:898)
functions_writing_to_variable: checking function OrderBookProxy.depositERC20 (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.contractOwner (proxy_features line:898)
has_compatibility_checks: dependencies: ['TMP_52', 'REF_50', 'REF_51', 'ds', 'TMP_51']
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(facet != address(0),Diamond: Function does not exist)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ds = position
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: position = LibDiamond.DIAMOND_STORAGE_POSITION
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: facet = address(bytes20(ds.facets[msg.sig]))
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
Found public function: constructor
Found external function: receive
Found external function: transferOwnership
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorSlot = ds.selectorSlots[selectorSlotCount]
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector_scope_1 = _selectors[selectorIndex_scope_0]
has_time_delay: (node.type) EXPRESSION
(Expression) oldSelectorSlot = (oldSelectorSlot & ~ (CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) | (bytes32(lastSelector) >> oldSelectorInSlotPosition)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) selectorInSlotIndex = 7
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(contractSize > 0,_errorMessage)
has_time_delay: (node.type) IF
(Expression) _init != address(this)
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacet_scope_2 = ds.facets[selector_scope_1]
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex
has_time_delay: (node.type) EXPRESSION
(Expression) contractSize = extcodesize(uint256)(_contract)
has_time_delay: (node.type) IF
(Expression) ! success
has_time_delay: (node.type) IF_LOOP
(Expression) facetIndex < _diamondCut.length
has_time_delay: (node.type) EXPRESSION
(Expression) selectorInSlotIndex --
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = address(bytes20(oldFacet_scope_2))
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorSlot = (_selectorSlot & ~ (CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) | (bytes32(lastSelector) >> oldSelectorInSlotPosition)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_init,LibDiamondCut: _init address has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != address(this),LibDiamondCut: Can't replace immutable function)
has_time_delay: (node.type) EXPRESSION
(Expression) facetIndex ++
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != _newFacetAddress,LibDiamondCut: Can't replace function with same function)
has_time_delay: (node.type) EXPRESSION
(Expression) (selectorCount,selectorSlot) = addReplaceRemoveFacetSelectors(selectorCount,selectorSlot,_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].action,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,error) = _init.delegatecall(_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != address(0),LibDiamondCut: Can't replace function that doesn't exist)
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.selectorSlots[selectorSlotCount]
has_time_delay: (node.type) IF
(Expression) selectorCount != originalSelectorCount
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facets[selector_scope_1] = (oldFacet_scope_2 & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress)
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorSlot = 0
has_time_delay: (node.type) IF
(Expression) selectorCount & 7 > 0
has_time_delay: (node.type) IF
(Expression) oldSelectorsSlotCount != selectorSlotCount
has_time_delay: (node.type) IF
(Expression) _action == IDiamondCut.FacetCutAction.Remove
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorCount = uint16(selectorCount)
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector_scope_4 = _selectors[selectorIndex_scope_3]
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: Incorrect FacetCutAction)
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacet_scope_5 = ds.facets[selector_scope_4]
has_time_delay: (node.type) EXPRESSION
(Expression) DiamondCut(_diamondCut,_init,_calldata)
has_time_delay: (node.type) IF
(Expression) error.length > 0
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_newFacetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(address(bytes20(oldFacet_scope_5)) != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorSlots[selectorCount >> 3] = selectorSlot
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorSlotCount = _selectorCount >> 3
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(address(bytes20(oldFacet_scope_5)) != address(this),LibDiamondCut: Can't remove immutable function)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(string(error))
has_time_delay: (node.type) EXPRESSION
(Expression) lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5))
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorInSlotIndex = _selectorCount & 7
has_time_delay: (node.type) EXPRESSION
(Expression) initializeDiamondCut(_init,_calldata)
has_time_delay: (node.type) IF
(Expression) lastSelector != selector_scope_4
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.facets[selector_scope_4]
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: _init function reverted)
has_time_delay: (node.type) NEW VARIABLE
(Expression) originalSelectorCount = ds.selectorCount
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facets[lastSelector] = (oldFacet_scope_5 & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector])
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorCount = originalSelectorCount
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldSelectorCount = uint16(uint256(oldFacet_scope_5))
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex_scope_3 < _selectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) oldSelectorsSlotCount = oldSelectorCount >> 3
has_time_delay: (node.type) IF
(Expression) selectorCount & 7 > 0
has_time_delay: (node.type) EXPRESSION
(Expression) oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex_scope_3 ++
has_time_delay: (node.type) IF
(Expression) _selectorSlot == 0
has_time_delay: (node.type) EXPRESSION
(Expression) selectorSlot = ds.selectorSlots[selectorCount >> 3]
has_time_delay: (node.type) IF
(Expression) selectorInSlotIndex == 0
has_time_delay: (node.type) EXPRESSION
(Expression) selectorSlotCount --
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount]
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _selectors[selectorIndex]
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = DIAMOND_STORAGE_POSITION
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacet = ds.facets[selector]
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(address(bytes20(oldFacet)) == address(0),LibDiamondCut: Can't add function that already exists)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount)
has_time_delay: (node.type) EXPRESSION
(Expression) ds = position
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorInSlotPosition = (_selectorCount & 7) << 5
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorSlot = (_selectorSlot & ~ (CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition)
has_time_delay: (node.type) IF
(Expression) selectorInSlotPosition == 224
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorCount ++
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorSlots[_selectorCount >> 3] = _selectorSlot
has_time_delay: (node.type) EXPRESSION
(Expression) _selectorSlot = 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) IF
(Expression) _action == IDiamondCut.FacetCutAction.Replace
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_selectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) IF
(Expression) _action == IDiamondCut.FacetCutAction.Add
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_newFacetAddress,LibDiamondCut: Replace facet has no code)
has_time_delay: (node.type) RETURN
(Expression) (_selectorCount,_selectorSlot)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_newFacetAddress,LibDiamondCut: Add facet has no code)
has_time_delay: (node.type) IF
(Expression) _init == address(0)
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex_scope_0 < _selectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _selectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex_scope_0 ++

Begin OrderBookStorage.is_proxy (Slither line:1425)


End OrderBookStorage.is_proxy (Slither line:1428)


Begin OrderBookStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: OrderBookStorage 

End OrderBookStorage.is_upgradeable_proxy (Slither line:1407)


Begin LibDiamond.is_proxy (Slither line:1425)


End LibDiamond.is_proxy (Slither line:1428)


Begin LibDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibDiamond 

End LibDiamond.is_upgradeable_proxy (Slither line:1407)


Begin IWETH.is_proxy (Slither line:1425)


End IWETH.is_proxy (Slither line:1428)


Begin IWETH.is_upgradeable_proxy (Slither line:1136)

Checking contract: IWETH 

End IWETH.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondLoupe.is_proxy (Slither line:1425)


End IDiamondLoupe.is_proxy (Slither line:1428)


Begin IDiamondLoupe.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondLoupe 

End IDiamondLoupe.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondCut.is_proxy (Slither line:1425)


End IDiamondCut.is_proxy (Slither line:1428)


Begin IDiamondCut.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondCut 

End IDiamondCut.is_upgradeable_proxy (Slither line:1407)


Begin TransferHelper.is_proxy (Slither line:1425)


End TransferHelper.is_proxy (Slither line:1428)


Begin TransferHelper.is_upgradeable_proxy (Slither line:1136)

Checking contract: TransferHelper 

End TransferHelper.is_upgradeable_proxy (Slither line:1407)

