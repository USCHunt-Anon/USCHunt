
Begin IProxy.is_proxy (Slither line:1425)


End IProxy.is_proxy (Slither line:1428)


Begin IProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: IProxy 

End IProxy.is_upgradeable_proxy (Slither line:1407)


Begin GnosisSafeProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin GnosisSafeProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff) (Slither line:1576)
    if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) (Slither line:1576)
    { (Slither line:1576)
        mstore(0, masterCopy) (Slither line:1576)
        return(0, 0x20) (Slither line:1576)
    } (Slither line:1576)
    calldatacopy(0, 0, calldatasize()) (Slither line:1576)
    let success := delegatecall(gas(), masterCopy, 0, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'masterCopy'
Looking for corresponding Variable
Current function: fallback

Begin GnosisSafeProxy.find_delegate_variable_from_name
Searching for masterCopy (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking masterCopy (Slither line:1689)
masterCopy is a State Variable in contract GnosisSafeProxy (Slither line:1693)

End GnosisSafeProxy.find_delegate_variable_by_name


End GnosisSafeProxy.find_delegatecall_in_asm (Slither line:1637)


End GnosisSafeProxy.is_proxy (Slither line:1476)


Begin GnosisSafeProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: GnosisSafeProxy 
GnosisSafeProxy is delegating to masterCopy
Looking for setter (Slither line:1200)


Begin GnosisSafeProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)

End GnosisSafeProxy.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in GnosisSafeProxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin GnosisSafeProxy.find_getter_in_contract (Slither line:2974)

masterCopy is a Variable object
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)

End GnosisSafeProxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in GnosisSafeProxy (Slither line:1305)
Checking node of type ENTRY_POINT (Slither line:1395)
Checking node of type INLINE ASM (Slither line:1395)

End GnosisSafeProxy.is_upgradeable_proxy (Slither line:1407)

Checking external function fallback
functions_writing_to_variable: masterCopy
functions_writing_to_variable: checking function GnosisSafeProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function GnosisSafeProxy.constructor (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(_masterCopy != address(0),Invalid master copy address provided) (proxy_features line:909)
functions_writing_to_variable: exp = masterCopy = _masterCopy (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: masterCopy = _masterCopy (proxy_features line:912)
functions_writing_to_variable: Identifier: masterCopy (proxy_features line:924)
get_value_assigned: masterCopy = _masterCopy
functions_writing_to_variable: constructor writes _masterCopy to masterCopy (proxy_features line:929)
has_compatibility_checks: dependencies: ['_masterCopy']
has_compatibility_checks: skipping constructor
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)
    if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000)
    {
        mstore(0, masterCopy)
        return(0, 0x20)
    }
    calldatacopy(0, 0, calldatasize())
    let success := delegatecall(gas(), masterCopy, 0, calldatasize(), 0, 0)
    returndatacopy(0, 0, returndatasize())
    if eq(success, 0)
    {
        revert(0, returndatasize())
    }
    return(0, returndatasize())
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found fallback
