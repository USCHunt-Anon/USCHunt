
Begin EnumerableSet.is_proxy (Slither line:1425)


End EnumerableSet.is_proxy (Slither line:1428)


Begin EnumerableSet.is_upgradeable_proxy (Slither line:1136)

Checking contract: EnumerableSet 

End EnumerableSet.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin AccessControl.is_proxy (Slither line:1425)


End AccessControl.is_proxy (Slither line:1428)


Begin AccessControl.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessControl 

End AccessControl.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin SafeERC20.is_proxy (Slither line:1425)


End SafeERC20.is_proxy (Slither line:1428)


Begin SafeERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeERC20 

End SafeERC20.is_upgradeable_proxy (Slither line:1407)


Begin IRouter.is_proxy (Slither line:1425)


End IRouter.is_proxy (Slither line:1428)


Begin IRouter.is_upgradeable_proxy (Slither line:1136)

Checking contract: IRouter 

End IRouter.is_upgradeable_proxy (Slither line:1407)


Begin ITokenTransferProxy.is_proxy (Slither line:1425)


End ITokenTransferProxy.is_proxy (Slither line:1428)


Begin ITokenTransferProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ITokenTransferProxy 

End ITokenTransferProxy.is_upgradeable_proxy (Slither line:1407)


Begin IERC20Permit.is_proxy (Slither line:1425)


End IERC20Permit.is_proxy (Slither line:1428)


Begin IERC20Permit.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20Permit 

End IERC20Permit.is_upgradeable_proxy (Slither line:1407)


Begin Utils.is_proxy (Slither line:1425)


End Utils.is_proxy (Slither line:1428)


Begin Utils.is_upgradeable_proxy (Slither line:1136)

Checking contract: Utils 

End Utils.is_upgradeable_proxy (Slither line:1407)


Begin IAdapter.is_proxy (Slither line:1425)


End IAdapter.is_proxy (Slither line:1428)


Begin IAdapter.is_upgradeable_proxy (Slither line:1136)

Checking contract: IAdapter 

End IAdapter.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin TokenTransferProxy.is_proxy (Slither line:1425)


End TokenTransferProxy.is_proxy (Slither line:1428)


Begin TokenTransferProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: TokenTransferProxy 

End TokenTransferProxy.is_upgradeable_proxy (Slither line:1407)


Begin AugustusStorage.is_proxy (Slither line:1425)


End AugustusStorage.is_proxy (Slither line:1428)


Begin AugustusStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: AugustusStorage 

End AugustusStorage.is_upgradeable_proxy (Slither line:1407)


Begin AugustusSwapper.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin AugustusSwapper.find_delegatecall_in_exp_node

Found Expression Node: _revertWithData(abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector)) (Slither line:2802)
Expression called: _revertWithData
Type of call: tuple() (Slither line:2817)
Args:
abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector)

End AugustusSwapper.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

getImplementation(selector) (Slither line:2749)

Begin AugustusSwapper.find_delegate_from_call_exp

getImplementation(selector) (Slither line:2003)
called = getImplementation (Slither line:2010)
Return node of function AugustusSwapper.getImplementation(bytes4): RETURN selectorVsRouter[selector] (Slither line:2041)
getImplementation returns a variable of type address   (Slither line:2193)
Return value is LocalVariable:  (Slither line:2266)
has no expression (Slither line:2326)

End AugustusSwapper.find_delegate_from_call_exp (Slither line:2328)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End AugustusSwapper.is_proxy (Slither line:1476)


Begin AugustusSwapper.is_upgradeable_proxy (Slither line:1136)

Checking contract: AugustusSwapper 
AugustusSwapper is delegating to selectorVsRouter
Looking for setter (Slither line:1200)

Looking for setter in AugustusStorage (Slither line:1204)


Begin AugustusStorage.find_setter_in_contract (Slither line:3119)

Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal

End AugustusStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in AugustusStorage 
Looking in AugustusSwapper (Slither line:1213)

Begin AugustusSwapper.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: initializeAdapter(address,bytes) returns() (Slither line:3127)
Checking function: initializeRouter(address,bytes) returns() (Slither line:3127)
Checking function: getImplementation(bytes4) returns(address) (Slither line:3127)
Visibility: public
selectorVsRouter[selector]
Checking function: getVersion() returns(string) (Slither line:3127)
Visibility: external
5.0.0
Checking function: getPartnerFeeStructure(address) returns(AugustusStorage.FeeStructure) (Slither line:3127)
Visibility: public
registeredPartners[partner]
Checking function: getFeeWallet() returns(address) (Slither line:3127)
Visibility: external
feeWallet
Checking function: setFeeWallet(address) returns() (Slither line:3127)
Visibility: external
_contains(set._inner,bytes32(uint256(value)))
_roles[role].members.contains(account)
onlyAdmin()
set._indexes[value] != 0
require(bool,string)(_feeWallet != address(0),Invalid address)
require(bool,string)(hasRole(DEFAULT_ADMIN_ROLE,msg.sender),caller is not the admin)
feeWallet = _feeWallet
is an Assignment Operation (Slither line:3216)
Checking function: registerPartner(address,uint256,bool,bool,string) returns() (Slither line:3127)
Visibility: external
_contains(set._inner,bytes32(uint256(value)))
onlyAdmin()
require(bool,string)(partner != address(0),Invalid partner)
_roles[role].members.contains(account)
set._indexes[value] != 0
require(bool,string)(feeStructure.partnerShare == 0,Already registered)
require(bool,string)(_partnerShare > 0 && _partnerShare < 10000,Invalid values)
feeStructure.partnerShare = _partnerShare
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
feeStructure.partnerId = partnerId
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
feeStructure.noPositiveSlippage = _noPositiveSlippage
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
feeStructure.positiveSlippageToUser = _positiveSlippageToUser
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
require(bool,string)(hasRole(DEFAULT_ADMIN_ROLE,msg.sender),caller is not the admin)
Checking function: setImplementation(bytes4,address) returns() (Slither line:3127)
Visibility: external
onlyAdmin()
_contains(set._inner,bytes32(uint256(value)))
_roles[role].members.contains(account)
set._indexes[value] != 0
require(bool,string)(hasRole(ROUTER_ROLE,implementation),Router is not whitelisted)
selectorVsRouter[selector] = implementation
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)

End AugustusSwapper.find_setter_in_contract (Slither line:3345)


Implementation set by function: setImplementation in contract: AugustusSwapper (Slither line:1264)
Looking for getter (Slither line:1273)


Begin AugustusStorage.find_getter_in_contract (Slither line:2974)

selectorVsRouter is a Variable object
implementation
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End AugustusStorage.find_getter_in_contract (Slither line:3083)


Begin AugustusSwapper.find_getter_in_contract (Slither line:2974)

selectorVsRouter is a Variable object
implementation
Checking function: hasRole (Slither line:2988)
hasRole returns bool variable  (Slither line:3008)
RETURN node expression: _roles[role].members.contains(account) (Slither line:3028)
Checking function: getRoleMemberCount (Slither line:2988)
getRoleMemberCount returns uint256 variable  (Slither line:3008)
RETURN node expression: _roles[role].members.length() (Slither line:3028)
Checking function: getRoleMember (Slither line:2988)
getRoleMember returns address variable  (Slither line:3008)
RETURN node expression: _roles[role].members.at(index) (Slither line:3028)
Checking function: getRoleAdmin (Slither line:2988)
getRoleAdmin returns bytes32 variable  (Slither line:3008)
RETURN node expression: _roles[role].adminRole (Slither line:3028)
Checking function: grantRole (Slither line:2988)
Checking function: revokeRole (Slither line:2988)
Checking function: renounceRole (Slither line:2988)
Checking function: _setupRole (Slither line:2988)
Checking function: _setRoleAdmin (Slither line:2988)
Checking function: _grantRole (Slither line:2988)
Checking function: _revokeRole (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: receive (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: initializeAdapter (Slither line:2988)
Checking function: initializeRouter (Slither line:2988)
Checking function: getImplementation (Slither line:2988)
getImplementation returns address variable  (Slither line:3008)
RETURN node expression: selectorVsRouter[selector] (Slither line:3028)

End AugustusSwapper.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: getImplementation in contract: AugustusSwapper (Slither line:1285)

End AugustusSwapper.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: implementation
impl_address_from_contract_call: StateVariable selectorVsRouter
impl_address_from_contract_call: getter is getImplementation
getter.full_name = getImplementation(bytes4)
library call: EnumerableSet.add
library call: Address.functionCall
library call: EnumerableSet.length
library call: EnumerableSet.remove
library call: EnumerableSet.at
library call: EnumerableSet.contains
library call: SafeERC20.safeTransfer
impl_address_from_contract_call: CallExpression getImplementation(selector)
impl_address_from_contract_call: arg is selector
impl_address_from_contract_call: CallExpression _revertWithData(abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector))
impl_address_from_contract_call: arg is abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector)
impl_address_from_contract_call: CallExpression abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector)
impl_address_from_contract_call: CallExpression implementation.delegatecall(msg.data)
impl_address_from_contract_call: CallExpression return(uint256,uint256)(data + 32,mload(uint256)(data))
impl_address_from_contract_call: arg is data + 32
impl_address_from_contract_call: arg is mload(uint256)(data)
impl_address_from_contract_call: CallExpression mload(uint256)(data)
impl_address_from_contract_call: CallExpression _returnWithData(resultData)
impl_address_from_contract_call: arg is resultData
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(data + 32,mload(uint256)(data))
impl_address_from_contract_call: arg is data + 32
impl_address_from_contract_call: arg is mload(uint256)(data)
impl_address_from_contract_call: CallExpression mload(uint256)(data)
impl_address_from_contract_call: CallExpression _revertWithData(resultData)
impl_address_from_contract_call: arg is resultData
Checking public function hasRole
Checking public function getRoleMemberCount
Checking public function getRoleMember
Checking public function getRoleAdmin
Checking public function grantRole
Checking public function revokeRole
Checking public function renounceRole
Checking external function initializeAdapter
Checking external function initializeRouter
Checking public function getImplementation
Checking external function getVersion
Checking public function getPartnerFeeStructure
Checking external function getFeeWallet
Checking external function setFeeWallet
Checking external function registerPartner
Checking external function setImplementation
Checking external function transferTokens
Checking public function isAdapterInitialized
Checking public function getAdapterData
Checking public function isRouterInitialized
Checking public function getRouterData
Checking public function getTokenTransferProxy
Checking external function receive
Checking external function fallback
functions_writing_to_variable: selectorVsRouter
functions_writing_to_variable: checking function AugustusSwapper.getRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.initializeRouter (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.setImplementation (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(hasRole(ROUTER_ROLE,implementation),Router is not whitelisted) (proxy_features line:909)
functions_writing_to_variable: exp = selectorVsRouter[selector] = implementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: selectorVsRouter[selector] = implementation (proxy_features line:912)
functions_writing_to_variable: IndexAccess: selectorVsRouter[selector] (proxy_features line:920)
functions_writing_to_variable: Identifier: selectorVsRouter (proxy_features line:924)
get_value_assigned: selectorVsRouter[selector] = implementation
functions_writing_to_variable: exp = onlyAdmin() (proxy_features line:909)
functions_writing_to_variable: exp = _roles[role].members.contains(account) (proxy_features line:909)
functions_writing_to_variable: exp = _contains(set._inner,bytes32(uint256(value))) (proxy_features line:909)
functions_writing_to_variable: exp = set._indexes[value] != 0 (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(hasRole(DEFAULT_ADMIN_ROLE,msg.sender),caller is not the admin) (proxy_features line:909)
functions_writing_to_variable: exp = _contains(set._inner,bytes32(uint256(value))) (proxy_features line:909)
functions_writing_to_variable: exp = set._indexes[value] != 0 (proxy_features line:909)
functions_writing_to_variable: setImplementation writes implementation to selectorVsRouter (proxy_features line:929)
functions_writing_to_variable: checking function AugustusSwapper._revertWithData (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.hasRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getImplementation (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._returnWithData (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.renounceRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._grantRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.transferTokens (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._msgData (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getRoleMemberCount (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getVersion (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.isAdapterInitialized (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.constructor (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.grantRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getPartnerFeeStructure (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getAdapterData (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getTokenTransferProxy (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._setupRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getFeeWallet (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.receive (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.isRouterInitialized (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getRoleMember (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.setFeeWallet (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.fallback (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.getRouterData (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._setRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.registerPartner (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper.initializeAdapter (proxy_features line:898)
functions_writing_to_variable: checking function AugustusSwapper._msgSender (proxy_features line:898)
has_compatibility_checks: dependencies: ['implementation']
has_compatibility_checks: checking external function setImplementation
require(bool,string)(hasRole(ROUTER_ROLE,implementation),Router is not whitelisted)
has_compatibility_checks: condition hasRole(ROUTER_ROLE,implementation)
check_condition_from_expression: modifier calls: ['onlyAdmin()']
require(bool,string)(hasRole(DEFAULT_ADMIN_ROLE,msg.sender),caller is not the admin)
has_compatibility_checks: condition hasRole(DEFAULT_ADMIN_ROLE,msg.sender)
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: implementation == address(0)
can_toggle_delegatecall_on_off: successors:
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: _returnWithData(resultData)
 NodeType: END_IF  expression: None
 NodeType: EXPRESSION  expression: _revertWithData(abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector))
 NodeType: END_IF  expression: None
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: _revertWithData(resultData)
 NodeType: IF  expression: ! success
 NodeType: EXPRESSION  expression: (success,resultData) = implementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off: delegatecall_condition = False
Found public function: hasRole
has_time_delay: (node.type) EXPRESSION
(Expression) onlyAdmin()
has_time_delay: (node.type) RETURN
(Expression) _contains(set._inner,bytes32(uint256(value)))
has_time_delay: (node.type) RETURN
(Expression) _roles[role].members.contains(account)
has_time_delay: (node.type) RETURN
(Expression) set._indexes[value] != 0
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(hasRole(ROUTER_ROLE,implementation),Router is not whitelisted)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorVsRouter[selector] = implementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(hasRole(DEFAULT_ADMIN_ROLE,msg.sender),caller is not the admin)
