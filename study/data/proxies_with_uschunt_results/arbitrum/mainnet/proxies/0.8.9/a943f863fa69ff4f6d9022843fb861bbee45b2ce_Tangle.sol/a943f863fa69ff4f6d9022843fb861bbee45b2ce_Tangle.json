{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "Tangle (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/a943f863fa69ff4f6d9022843fb861bbee45b2ce_Tangle.sol/a943f863fa69ff4f6d9022843fb861bbee45b2ce_Tangle.sol#14-270)",
        "elements": [],
        "description": "Tangle (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/a943f863fa69ff4f6d9022843fb861bbee45b2ce_Tangle.sol/a943f863fa69ff4f6d9022843fb861bbee45b2ce_Tangle.sol#14-270) is an upgradeable proxy.\nselectorToAddress is declared in the proxy.\nselectorToAddress is a mapping of type mapping(bytes4 => address)\nselectorToAddress maps function signatures to addresses, suggesting multiple implementations.\nNo setter functions found to search for compatibility checks.\n",
        "id": "a8d497c9edce92db38c351ca53b5c2711ba379c6506343236c9cd9139ac74bb8",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "Tangle.selectorToAddress",
          "impl_address_setter": "Tangle.diamondCut(Tangle.FacetCut[],address,bytes)",
          "impl_address_getter": "Tangle.facetAddress(bytes4)",
          "impl_address_location": "Tangle (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/a943f863fa69ff4f6d9022843fb861bbee45b2ce_Tangle.sol/a943f863fa69ff4f6d9022843fb861bbee45b2ce_Tangle.sol#14-270)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "mapping(bytes4 => address)",
          "impl_mapping_from_msg_sig": true,
          "eip_2535": false,
          "eip_1538": true,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": "no setters found"
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "diamondCut(Tangle.FacetCut[],address,bytes)",
              "facets()",
              "facetFunctionSelectors(address)",
              "facetAddresses()",
              "facetAddress(bytes4)"
            ]
          }
        }
      }
    ]
  }
}