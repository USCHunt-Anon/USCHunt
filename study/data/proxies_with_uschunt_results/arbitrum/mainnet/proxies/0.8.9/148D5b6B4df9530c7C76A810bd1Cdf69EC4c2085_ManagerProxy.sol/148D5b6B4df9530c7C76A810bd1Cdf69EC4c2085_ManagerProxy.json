{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "ManagerProxy (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol#150-232)",
        "elements": [],
        "description": "ManagerProxy (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol#150-232) may be an upgradeable proxy.\ntarget is declared in the proxy.\nManagerProxy._fallback().target (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol#184) gets value from a cross-contract call: controller.getContract(targetContractId)\nIController appears to be a Registry contract for the proxy\nThe address of IController is stored as a state variable: Manager.controller\ncontroller can be updated by the following function(s): ['Manager.setController(address)']\nMissing compatibility check in ManagerProxy.fallback()\nMissing compatibility check in ManagerProxy.receive()\n",
        "id": "825d97ed928d29575bae60e421559385a64c31ecf2430494f9483f4c56460a4d",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "ManagerProxy._fallback().target",
          "impl_address_setter": "not found",
          "impl_address_getter": "not found",
          "impl_address_location": "ManagerProxy (../../smart-contract-sanctuary/arbitrum/contracts/mainnet/proxies/0.8.9/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol/148D5b6B4df9530c7C76A810bd1Cdf69EC4c2085_ManagerProxy.sol#150-232)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "controller.getContract(targetContractId)",
          "registry": "IController",
          "registry_source_type": "IController",
          "registry_source_variable": "Manager.controller",
          "registry_source_constant": false,
          "registry_source_setters": "Manager.setController(address)",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "ManagerProxy.fallback()": "missing",
              "ManagerProxy.receive()": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "setController(address)",
              "setController(address)"
            ]
          }
        }
      }
    ]
  }
}