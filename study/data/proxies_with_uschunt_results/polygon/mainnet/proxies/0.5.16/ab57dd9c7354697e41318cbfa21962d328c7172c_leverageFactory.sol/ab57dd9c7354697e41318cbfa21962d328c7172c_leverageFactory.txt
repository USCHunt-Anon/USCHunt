
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin IMultiSignature.is_proxy (Slither line:1425)


End IMultiSignature.is_proxy (Slither line:1428)


Begin IMultiSignature.is_upgradeable_proxy (Slither line:1136)

Checking contract: IMultiSignature 

End IMultiSignature.is_upgradeable_proxy (Slither line:1407)


Begin multiSignatureClient.is_proxy (Slither line:1425)


End multiSignatureClient.is_proxy (Slither line:1428)


Begin multiSignatureClient.is_upgradeable_proxy (Slither line:1136)

Checking contract: multiSignatureClient 

End multiSignatureClient.is_upgradeable_proxy (Slither line:1407)


Begin proxyOwner.is_proxy (Slither line:1425)


End proxyOwner.is_proxy (Slither line:1428)


Begin proxyOwner.is_upgradeable_proxy (Slither line:1136)

Checking contract: proxyOwner 

End proxyOwner.is_upgradeable_proxy (Slither line:1407)


Begin initializable.is_proxy (Slither line:1425)


End initializable.is_proxy (Slither line:1428)


Begin initializable.is_upgradeable_proxy (Slither line:1136)

Checking contract: initializable 

End initializable.is_upgradeable_proxy (Slither line:1407)


Begin versionUpdater.is_proxy (Slither line:1425)


End versionUpdater.is_proxy (Slither line:1428)


Begin versionUpdater.is_upgradeable_proxy (Slither line:1136)

Checking contract: versionUpdater 

End versionUpdater.is_upgradeable_proxy (Slither line:1407)


Begin proxyOperator.is_proxy (Slither line:1425)


End proxyOperator.is_proxy (Slither line:1428)


Begin proxyOperator.is_upgradeable_proxy (Slither line:1136)

Checking contract: proxyOperator 

End proxyOperator.is_upgradeable_proxy (Slither line:1407)


Begin leverageFactoryData.is_proxy (Slither line:1425)


End leverageFactoryData.is_proxy (Slither line:1428)


Begin leverageFactoryData.is_upgradeable_proxy (Slither line:1136)

Checking contract: leverageFactoryData 

End leverageFactoryData.is_upgradeable_proxy (Slither line:1407)


Begin phxProxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin phxProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2802)
Expression called: require(bool)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0)

End phxProxy.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin phxProxy.find_delegatecall_in_asm (Slither line:1541)

{ impl := sload(position) } (Slither line:1576)

End phxProxy.find_delegatecall_in_asm (Slither line:1637)


Begin phxProxy.find_delegatecall_in_asm (Slither line:1541)

{ impl := sload(position) } (Slither line:1576)

End phxProxy.find_delegatecall_in_asm (Slither line:1637)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin phxProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin phxProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking multiSignaturePositon (Slither line:1689)
Checking ownerExpiredPosition (Slither line:1689)
Checking versionPositon (Slither line:1689)
Checking proxyOwnerPosition (Slither line:1689)
Checking proxyOriginPosition (Slither line:1689)
Checking oncePosition (Slither line:1689)
Checking ownerExpired (Slither line:1689)
Checking implementPositon (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in phxProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin phxProxy.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
implementation returns a variable of type address   called impl (Slither line:2193)
implementation contains assembly - looking for sload (Slither line:2199)
Looking in ASSEMBLY node (Slither line:2206)
{ impl := sload(position) }  (Slither line:2210)
Return value set by sload in asm (Slither line:2212)
Found storage slot: implementPositon (Slither line:2232)

End phxProxy.find_delegate_from_call_exp (Slither line:2328)

Call Expression
End phxProxy.find_delegate_variable_by_name (Slither line:1739)


Begin phxProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2683)


End phxProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2710)


End phxProxy.find_delegatecall_in_asm (Slither line:1637)

Setting phxProxy._delegate_variable = phxProxy._proxy_impl_slot: implementPositon (Slither line:1473)


End phxProxy.is_proxy (Slither line:1476)


Begin phxProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: phxProxy 
Call destination implementPositon is constant (Slither line:1146)

implementPositon is the implementation storage slot (Slither line:1149)

phxProxy is delegating to implementPositon
Looking for setter (Slither line:1200)


Begin phxProxy.find_setter_in_contract (Slither line:3119)

Expression: keccak256(bytes)(org.Phoenix.implementation.storage) (Slither line:3122)
Checking function: constructor(address,address) returns() (Slither line:3127)
Checking function: proxyType() returns(uint256) (Slither line:3127)
Visibility: public
2
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
implementation contains assembly (Slither line:3153)
Checking function: _setImplementation(address) returns() (Slither line:3127)
Visibility: internal
Checking function: upgradeTo(address) returns() (Slither line:3127)
Visibility: public
{ sstore(position, version_) } (Slither line:3163)
upgradeTo reads and/or writes to variable position (Slither line:3170)
upgradeTo reads and/or writes to variable versionPositon (Slither line:3170)
size > 0
{ sstore(position, value) } (Slither line:3163)
require(bool)(success)
OwnerOrOrigin()
msg.sender == owner() && isContract(msg.sender)
checkMultiSignature()
require(bool,string)(version_ > version(),upgrade version number must be greater than current version)
require(bool,string)(false,proxyOwner: caller is not owner or origin)
address(getValue(multiSignaturePositon))
require(bool,string)(newIndex > index,multiSignatureClient : This tx is not aprroved)
    sstore(position, _newImplementation) (Slither line:3163)
upgradeTo reads and/or writes to variable position (Slither line:3170)
upgradeTo reads and/or writes to variable returnData (Slither line:3170)
upgradeTo reads and/or writes to variable success (Slither line:3170)
upgradeTo reads and/or writes to variable version_ (Slither line:3170)
upgradeTo reads and/or writes to variable _newImplementation (Slither line:3170)
upgradeTo reads and/or writes to variable implementPositon (Slither line:3170)
upgradeTo reads and/or writes to variable returnData (Slither line:3170)
upgradeTo reads and/or writes to variable uint256 (Slither line:3170)
upgradeTo reads and/or writes to variable version_ (Slither line:3170)

End phxProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: phxProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin phxProxy.find_getter_in_contract (Slither line:2974)

implementPositon is a Variable object
keccak256(bytes)(org.Phoenix.implementation.storage)
Checking function: constructor (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _setProxyOwner (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable called _owner (Slither line:3008)
owner contains assembly (Slither line:3051)
owner contains assembly (Slither line:3051)
owner contains assembly (Slither line:3051)
Checking function: transferOrigin (Slither line:2988)
Checking function: _setProxyOrigin (Slither line:2988)
Checking function: txOrigin (Slither line:2988)
txOrigin returns address variable called _origin (Slither line:3008)
txOrigin contains assembly (Slither line:3051)
txOrigin contains assembly (Slither line:3051)
txOrigin contains assembly (Slither line:3051)
Checking function: ownerExpiredTime (Slither line:2988)
ownerExpiredTime returns uint256 variable called _expired (Slither line:3008)
ownerExpiredTime contains assembly (Slither line:3051)
ownerExpiredTime contains assembly (Slither line:3051)
ownerExpiredTime contains assembly (Slither line:3051)
Checking function: isOwner (Slither line:2988)
isOwner returns bool variable  (Slither line:3008)
RETURN node expression: msg.sender == owner() && isContract(msg.sender) (Slither line:3028)
Checking function: _setVersion (Slither line:2988)
Checking function: version (Slither line:2988)
version returns uint256 variable called version_ (Slither line:3008)
version contains assembly (Slither line:3051)
version contains assembly (Slither line:3051)
version contains assembly (Slither line:3051)
Checking function: isContract (Slither line:2988)
isContract returns bool variable  (Slither line:3008)
RETURN node expression: size > 0 (Slither line:3028)
isContract contains assembly (Slither line:3051)
isContract contains assembly (Slither line:3051)
isContract contains assembly (Slither line:3051)
isContract contains assembly (Slither line:3051)
Checking function: constructor (Slither line:2988)
Checking function: getMultiSignatureAddress (Slither line:2988)
getMultiSignatureAddress returns address variable  (Slither line:3008)
RETURN node expression: address(getValue(multiSignaturePositon)) (Slither line:3028)
Checking function: checkMultiSignature (Slither line:2988)
Checking function: saveValue (Slither line:2988)
Checking function: getValue (Slither line:2988)
getValue returns uint256 variable called value (Slither line:3008)
getValue contains assembly (Slither line:3051)
getValue contains assembly (Slither line:3051)
Checking function: constructor (Slither line:2988)
Checking function: proxyType (Slither line:2988)
proxyType returns uint256 variable  (Slither line:3008)
RETURN node expression: 2 (Slither line:3028)
Checking function: implementation (Slither line:2988)
implementation returns address variable called impl (Slither line:3008)
implementation contains assembly (Slither line:3051)

End phxProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: implementation in contract: phxProxy (Slither line:1285)

End phxProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: phxProxy
Setter found in contract phxProxy
Checking public function transferOwnership
Found 'msg.sender ==' in expression: msg.sender == owner() && isContract(msg.sender)
Checking public function transferOwnership
Found 'msg.sender ==' in expression: msg.sender == owner() && isContract(msg.sender)
Checking public function owner
Checking public function transferOrigin
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == txOrigin(),proxyOwner: caller is not the tx origin!)
Checking public function txOrigin
Checking public function ownerExpiredTime
Checking public function isOwner
Found 'msg.sender ==' in expression: msg.sender == owner() && isContract(msg.sender)
Checking public function version
Checking public function getMultiSignatureAddress
Checking public function proxyType
Checking public function implementation
Checking public function upgradeTo
Found 'msg.sender ==' in expression: msg.sender == owner() && isContract(msg.sender)
Found 'msg.sender ==' in expression: msg.sender == txOrigin()
Checking external function fallback
functions_writing_to_variable: implementPositon
functions_writing_to_variable: checking function phxProxy._setImplementation (proxy_features line:898)
functions_writing_to_variable: found sstore:
    sstore(position, _newImplementation)
(proxy_features line:953)
_newImplementation
functions_writing_to_variable: _setImplementation writes _newImplementation to implementPositon w/ sstore (proxy_features line:959)
functions_writing_to_variable: checking function phxProxy.ownerExpiredTime (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.owner (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.isContract (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.saveValue (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.upgradeTo (proxy_features line:898)
functions_writing_to_variable: found sstore:
    sstore(position, _newImplementation)
(proxy_features line:953)
_newImplementation
functions_writing_to_variable: upgradeTo writes _newImplementation to implementPositon w/ sstore (proxy_features line:959)
functions_writing_to_variable: checking function phxProxy.getValue (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.isOwner (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.transferOrigin (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: found sstore:
    sstore(position, _newImplementation)
(proxy_features line:953)
_newImplementation
functions_writing_to_variable: constructor writes _newImplementation to implementPositon w/ sstore (proxy_features line:959)
functions_writing_to_variable: checking function phxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy._setVersion (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy._setProxyOrigin (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.getMultiSignatureAddress (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: exp = multiSignaturePositon = uint256(keccak256(bytes)(org.Phoenix.multiSignature.storage)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: multiSignaturePositon = uint256(keccak256(bytes)(org.Phoenix.multiSignature.storage)) (proxy_features line:912)
functions_writing_to_variable: exp = ownerExpiredPosition = keccak256(bytes)(org.Phoenix.ownerExpired.storage) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: ownerExpiredPosition = keccak256(bytes)(org.Phoenix.ownerExpired.storage) (proxy_features line:912)
functions_writing_to_variable: exp = versionPositon = keccak256(bytes)(org.Phoenix.version.storage) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: versionPositon = keccak256(bytes)(org.Phoenix.version.storage) (proxy_features line:912)
functions_writing_to_variable: exp = proxyOwnerPosition = keccak256(bytes)(org.Phoenix.Owner.storage) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: proxyOwnerPosition = keccak256(bytes)(org.Phoenix.Owner.storage) (proxy_features line:912)
functions_writing_to_variable: exp = proxyOriginPosition = keccak256(bytes)(org.Phoenix.Origin.storage) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: proxyOriginPosition = keccak256(bytes)(org.Phoenix.Origin.storage) (proxy_features line:912)
functions_writing_to_variable: exp = oncePosition = uint256(keccak256(bytes)(org.Phoenix.Once.storage)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oncePosition = uint256(keccak256(bytes)(org.Phoenix.Once.storage)) (proxy_features line:912)
functions_writing_to_variable: exp = ownerExpired = 7776000 (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: ownerExpired = 7776000 (proxy_features line:912)
functions_writing_to_variable: exp = implementPositon = keccak256(bytes)(org.Phoenix.implementation.storage) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: implementPositon = keccak256(bytes)(org.Phoenix.implementation.storage) (proxy_features line:912)
functions_writing_to_variable: Identifier: implementPositon (proxy_features line:924)
get_value_assigned: implementPositon = keccak256(bytes)(org.Phoenix.implementation.storage)
functions_writing_to_variable: checking function phxProxy.proxyType (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.version (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.txOrigin (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy._setProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.checkMultiSignature (proxy_features line:898)
functions_writing_to_variable: checking function phxProxy.implementation (proxy_features line:898)
has_compatibility_checks: dependencies: []
has_compatibility_checks: skipping internal function _setImplementation
has_compatibility_checks: checking public function upgradeTo
has_compatibility_checks: IF node exp = msg.sender == txOrigin()
require(bool)(success)
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(version_ > version(),upgrade version number must be greater than current version)
has_compatibility_checks: condition version_ > version()
require(bool,string)(false,proxyOwner: caller is not owner or origin)
has_compatibility_checks: condition false
require(bool,string)(newIndex > index,multiSignatureClient : This tx is not aprroved)
has_compatibility_checks: condition newIndex > index
require(bool,string)(currentImplementation != _newImplementation,upgrade implementation is not changed!)
has_compatibility_checks: condition currentImplementation != _newImplementation
check_condition_from_expression: modifier calls: ['OwnerOrOrigin()']
check_condition_from_expression: condition implementation() != _newImplementation
has_compatibility_checks: skipping constructor
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found public function: transferOwnership
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) IF
(Expression) msg.sender == txOrigin()
has_time_delay: (node.type) NEW VARIABLE
(Expression) msgHash = keccak256(bytes)(abi.encodePacked(msg.sender,address(this),value,msg.data))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(success)
has_time_delay: (node.type) NEW VARIABLE
(Expression) multiSign = getMultiSignatureAddress()
has_time_delay: (node.type) EXPRESSION
(Expression) OwnerOrOrigin()
has_time_delay: (node.type) RETURN
(Expression) msg.sender == owner() && isContract(msg.sender)
has_time_delay: (node.type) NEW VARIABLE
(Expression) version_ = abi.decode(returnData,(uint256))
has_time_delay: (node.type) EXPRESSION
(Expression) checkMultiSignature()
has_time_delay: (node.type) NEW VARIABLE
(Expression) index = getValue(uint256(msgHash))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(version_ > version(),upgrade version number must be greater than current version)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = proxyOriginPosition
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = implementPositon
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(false,proxyOwner: caller is not owner or origin)
has_time_delay: (node.type) NEW VARIABLE
(Expression) newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = implementPositon
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = versionPositon
has_time_delay: (node.type) RETURN
(Expression) address(getValue(multiSignaturePositon))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(newIndex > index,multiSignatureClient : This tx is not aprroved)
has_time_delay: (node.type) EXPRESSION
(Expression) saveValue(uint256(msgHash),newIndex)
has_time_delay: (node.type) EXPRESSION
(Expression) _setVersion(version_)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = proxyOwnerPosition
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(_newImplementation,version_)
has_time_delay: (node.type) NEW VARIABLE
(Expression) currentImplementation = implementation()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(currentImplementation != _newImplementation,upgrade implementation is not changed!)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returnData) = _newImplementation.delegatecall(abi.encodeWithSignature(implementationVersion()))
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(_newImplementation)
has_time_delay: (node.type) IF
(Expression) isOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) (success) = _newImplementation.delegatecall(abi.encodeWithSignature(update()))
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = versionPositon

Begin ILeveragedPool.is_proxy (Slither line:1425)


End ILeveragedPool.is_proxy (Slither line:1428)


Begin ILeveragedPool.is_upgradeable_proxy (Slither line:1136)

Checking contract: ILeveragedPool 

End ILeveragedPool.is_upgradeable_proxy (Slither line:1407)


Begin IStakePool.is_proxy (Slither line:1425)


End IStakePool.is_proxy (Slither line:1428)


Begin IStakePool.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakePool 

End IStakePool.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin IRebaseToken.is_proxy (Slither line:1425)


End IRebaseToken.is_proxy (Slither line:1428)


Begin IRebaseToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: IRebaseToken 

End IRebaseToken.is_upgradeable_proxy (Slither line:1407)


Begin IAcceleratedMinePool.is_proxy (Slither line:1425)


End IAcceleratedMinePool.is_proxy (Slither line:1428)


Begin IAcceleratedMinePool.is_upgradeable_proxy (Slither line:1136)

Checking contract: IAcceleratedMinePool 

End IAcceleratedMinePool.is_upgradeable_proxy (Slither line:1407)


Begin IPPTCoin.is_proxy (Slither line:1425)


End IPPTCoin.is_proxy (Slither line:1428)


Begin IPPTCoin.is_upgradeable_proxy (Slither line:1136)

Checking contract: IPPTCoin 

End IPPTCoin.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin leverageFactory.is_proxy (Slither line:1425)


End leverageFactory.is_proxy (Slither line:1428)


Begin leverageFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: leverageFactory 

End leverageFactory.is_upgradeable_proxy (Slither line:1407)

