
Begin KMCDStorage.is_proxy (Slither line:1425)


End KMCDStorage.is_proxy (Slither line:1428)


Begin KMCDStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: KMCDStorage 

End KMCDStorage.is_upgradeable_proxy (Slither line:1407)


Begin KTokenStorage.is_proxy (Slither line:1425)


End KTokenStorage.is_proxy (Slither line:1428)


Begin KTokenStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: KTokenStorage 

End KTokenStorage.is_upgradeable_proxy (Slither line:1407)


Begin KErc20Storage.is_proxy (Slither line:1425)


End KErc20Storage.is_proxy (Slither line:1428)


Begin KErc20Storage.is_upgradeable_proxy (Slither line:1136)

Checking contract: KErc20Storage 

End KErc20Storage.is_upgradeable_proxy (Slither line:1407)


Begin KDelegationStorage.is_proxy (Slither line:1425)


End KDelegationStorage.is_proxy (Slither line:1428)


Begin KDelegationStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: KDelegationStorage 

End KDelegationStorage.is_upgradeable_proxy (Slither line:1407)


Begin KDelegateInterface.is_proxy (Slither line:1425)


End KDelegateInterface.is_proxy (Slither line:1428)


Begin KDelegateInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: KDelegateInterface 

End KDelegateInterface.is_upgradeable_proxy (Slither line:1407)


Begin KMCDInterface.is_proxy (Slither line:1425)


End KMCDInterface.is_proxy (Slither line:1428)


Begin KMCDInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: KMCDInterface 

End KMCDInterface.is_upgradeable_proxy (Slither line:1407)


Begin KErc20Interface.is_proxy (Slither line:1425)


End KErc20Interface.is_proxy (Slither line:1428)


Begin KErc20Interface.is_upgradeable_proxy (Slither line:1136)

Checking contract: KErc20Interface 

End KErc20Interface.is_upgradeable_proxy (Slither line:1407)


Begin KineControllerInterface.is_proxy (Slither line:1425)


End KineControllerInterface.is_proxy (Slither line:1428)


Begin KineControllerInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: KineControllerInterface 

End KineControllerInterface.is_upgradeable_proxy (Slither line:1407)


Begin KTokenInterface.is_proxy (Slither line:1425)


End KTokenInterface.is_proxy (Slither line:1428)


Begin KTokenInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: KTokenInterface 

End KTokenInterface.is_upgradeable_proxy (Slither line:1407)


Begin KDelegatorInterface.is_proxy (Slither line:1425)


End KDelegatorInterface.is_proxy (Slither line:1428)


Begin KDelegatorInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: KDelegatorInterface 

End KDelegatorInterface.is_upgradeable_proxy (Slither line:1407)


Begin KMCDDelegator.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin KMCDDelegator.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_mem_ptr := mload(0x40) (Slither line:1576)
    returndatacopy(free_mem_ptr, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End KMCDDelegator.find_delegatecall_in_asm (Slither line:1637)


Begin KMCDDelegator.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_mem_ptr := mload(0x40) (Slither line:1576)
    returndatacopy(free_mem_ptr, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End KMCDDelegator.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End KMCDDelegator.is_proxy (Slither line:1476)


Begin KMCDDelegator.is_upgradeable_proxy (Slither line:1136)

Checking contract: KMCDDelegator 
KMCDDelegator is delegating to implementation
Looking for setter (Slither line:1200)

Looking for setter in KDelegationStorage (Slither line:1204)


Begin KDelegationStorage.find_setter_in_contract (Slither line:3119)


End KDelegationStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in KDelegationStorage 
Looking in KMCDDelegator (Slither line:1213)

Begin KMCDDelegator.find_setter_in_contract (Slither line:3119)

Checking function: constructor(KineControllerInterface,string,string,uint8,address,address,address,bytes) returns() (Slither line:3127)
Checking function: delegateTo(address,bytes) returns(bytes) (Slither line:3127)
Visibility: internal
Checking function: delegateToImplementation(bytes) returns(bytes) (Slither line:3127)
Visibility: public
(success,returnData) = callee.delegatecall(data)
is an Assignment Operation (Slither line:3216)
delegateTo(implementation,data)
returnData
Checking function: _setImplementation(address,bool,bytes) returns() (Slither line:3127)
Visibility: public
implementation = implementation_
is an Assignment Operation (Slither line:3216)

End KMCDDelegator.find_setter_in_contract (Slither line:3345)


Implementation set by function: _setImplementation in contract: KMCDDelegator (Slither line:1264)
Looking for getter (Slither line:1273)


Begin KDelegationStorage.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
implementation_

End KDelegationStorage.find_getter_in_contract (Slither line:3083)


Begin KMCDDelegator.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
implementation_
Checking function: constructor (Slither line:2988)
Checking function: delegateTo (Slither line:2988)
delegateTo returns bytes variable  (Slither line:3008)
RETURN node expression: returnData (Slither line:3028)
Checking function: delegateToImplementation (Slither line:2988)
delegateToImplementation returns bytes variable  (Slither line:3008)
RETURN node expression: delegateTo(implementation,data) (Slither line:3028)
Checking function: _setImplementation (Slither line:2988)
Checking function: fallback (Slither line:2988)

End KMCDDelegator.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in KMCDDelegator (Slither line:1305)
or in KDelegationStorage (Slither line:1319)

Begin KDelegateInterface.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
implementation_

End KDelegateInterface.find_getter_in_contract (Slither line:3083)


End KMCDDelegator.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: implementation_
impl_address_from_contract_call: StateVariable implementation
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression implementation.delegatecall(msg.data)
impl_address_from_contract_call: CallExpression require(bool,string)(msg.value == 0,KMCDDelegator:fallback: cannot send value to fallback)
impl_address_from_contract_call: arg is msg.value == 0
impl_address_from_contract_call: arg is KMCDDelegator:fallback: cannot send value to fallback
Checking public function _setImplementation
Checking public function delegateToImplementation
Checking public function _setImplementation
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == admin,KMCDDelegator::_setImplementation: Caller must be admin)
Checking external function fallback
functions_writing_to_variable: implementation
functions_writing_to_variable: checking function KMCDDelegator.delegateTo (proxy_features line:898)
functions_writing_to_variable: checking function KMCDDelegator._setImplementation (proxy_features line:898)
functions_writing_to_variable: checking function KMCDDelegator._setImplementation (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == admin,KMCDDelegator::_setImplementation: Caller must be admin) (proxy_features line:909)
functions_writing_to_variable: exp = allowResign (proxy_features line:909)
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (proxy_features line:909)
functions_writing_to_variable: exp = oldImplementation = implementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldImplementation = implementation (proxy_features line:912)
functions_writing_to_variable: exp = implementation = implementation_ (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: implementation = implementation_ (proxy_features line:912)
functions_writing_to_variable: Identifier: implementation (proxy_features line:924)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData)) (proxy_features line:909)
functions_writing_to_variable: exp = NewImplementation(oldImplementation,implementation) (proxy_features line:909)
functions_writing_to_variable: exp = delegateTo(implementation,data) (proxy_features line:909)
functions_writing_to_variable: exp = (success,returnData) = callee.delegatecall(data) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: (success,returnData) = callee.delegatecall(data) (proxy_features line:912)
functions_writing_to_variable: exp = returnData (proxy_features line:909)
functions_writing_to_variable: exp = (success,returnData) = callee.delegatecall(data) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: (success,returnData) = callee.delegatecall(data) (proxy_features line:912)
functions_writing_to_variable: exp = returnData (proxy_features line:909)
functions_writing_to_variable: _setImplementation writes implementation_ to implementation (proxy_features line:929)
functions_writing_to_variable: checking function KMCDDelegator.constructor (proxy_features line:898)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: constructor writes implementation_ to implementation (proxy_features line:1013)
functions_writing_to_variable: checking function KMCDDelegator.delegateToImplementation (proxy_features line:898)
functions_writing_to_variable: checking function KMCDDelegator.fallback (proxy_features line:898)
has_compatibility_checks: dependencies: ['implementation_', 'implementation_']
has_compatibility_checks: checking public function _setImplementation
has_compatibility_checks: IF node exp = allowResign
require(bool,string)(msg.sender == admin,KMCDDelegator::_setImplementation: Caller must be admin)
has_compatibility_checks: condition msg.sender == admin
has_compatibility_checks: skipping constructor
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: (success) = implementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(msg.value == 0,KMCDDelegator:fallback: cannot send value to fallback)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: _setImplementation
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = implementation
has_time_delay: (node.type) IF
(Expression) allowResign
has_time_delay: (node.type) EXPRESSION
(Expression) implementation = implementation_
has_time_delay: (node.type) RETURN
(Expression) returnData
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returnData) = callee.delegatecall(data)
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_resignImplementation()))
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData))
has_time_delay: (node.type) RETURN
(Expression) delegateTo(implementation,data)
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(oldImplementation,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == admin,KMCDDelegator::_setImplementation: Caller must be admin)
