{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "Exchange (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#84-166)",
        "elements": [],
        "description": "Exchange (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#84-166) may be an upgradeable proxy.\nimpl is declared in the proxy.\nExchange.fallback().impl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#151) gets value from a cross-contract call: IFactoryImpl(factory).getExchangeImplementation()\nIFactoryImpl appears to be a Beacon contract for the proxy\nThe address of IFactoryImpl is stored as a state variable: Exchange.factory\nCould not find setter for factory\nNo setter functions found to search for compatibility checks.\n",
        "id": "001a7ccedefbdd94222b419aa86cdcb21f69b5659b0ae9a1419367b596572d5f",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "Exchange.fallback().impl",
          "impl_address_setter": "not found",
          "impl_address_getter": "not found",
          "impl_address_location": "Exchange (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#84-166)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "IFactoryImpl(factory).getExchangeImplementation()",
          "beacon": "IFactoryImpl",
          "beacon_source_type": "address",
          "beacon_source_variable": "Exchange.factory",
          "beacon_source_constant": false,
          "beacon_source_setters": "none found",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": "no setters found"
          },
          "can_remove_upgradeability": false
        }
      },
      {
        "contract": "ExchangeImpl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#233-821)",
        "elements": [],
        "description": "ExchangeImpl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#233-821) may be an upgradeable proxy.\nimpl is declared in the proxy.\nExchange.fallback().impl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#151) gets value from a cross-contract call: IFactoryImpl(factory).getExchangeImplementation()\nIFactoryImpl appears to be a Beacon contract for the proxy\nThe address of IFactoryImpl is stored as a state variable: Exchange.factory\nCould not find setter for factory\nNo setter functions found to search for compatibility checks.\n",
        "id": "53256ac5c5cc342df22354046c04d42c894177b07e69648d707ad919ddc96237",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "Exchange.fallback().impl",
          "impl_address_setter": "not found",
          "impl_address_getter": "not found",
          "impl_address_location": "ExchangeImpl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol/e13F021Df700B35bB3DdE0fA050c72Ee71e26479_ExchangeImpl.sol#233-821)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "IFactoryImpl(factory).getExchangeImplementation()",
          "beacon": "IFactoryImpl",
          "beacon_source_type": "address",
          "beacon_source_variable": "Exchange.factory",
          "beacon_source_constant": false,
          "beacon_source_setters": "none found",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": "no setters found"
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "erc20": [
              "transfer(address,uint256)",
              "transferFrom(address,address,uint256)",
              "approve(address,uint256)"
            ],
            "other": [
              "version()",
              "getReserves()",
              "getTreasury()",
              "initPool()",
              "changeFee(uint256)",
              "updateMiningIndex()",
              "claimReward()",
              "claimReward(address)",
              "getCurrentPool()",
              "estimatePos(address,uint256)",
              "estimateNeg(address,uint256)",
              "exchangePos(address,uint256)",
              "exchangeNeg(address,uint256)",
              "addTokenLiquidityWithLimit(uint256,uint256,uint256,uint256,address)",
              "removeLiquidityWithLimit(uint256,uint256,uint256,address)",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
              "skim(address)",
              "sync()"
            ]
          }
        }
      }
    ]
  }
}