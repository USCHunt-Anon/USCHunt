{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "Router (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol#8-45)",
        "elements": [],
        "description": "Router (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol#8-45) is an upgradeable proxy.\nimplementation is declared in the proxy.\nimplementation is an address state variable\nFound compatibility checks in all upgrade functions.\n",
        "id": "2853174df2f4c160f0422a617cc8338c989ab112f52415c3858d3688e774e2de",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "Router.implementation",
          "impl_address_setter": "Router._setImplementation(address)",
          "impl_address_getter": "not found",
          "impl_address_location": "Router (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol#8-45)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "master_copy_coupling": "missing implementation source",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": {
              "Router._setImplementation(address)": {
                "check": "require(bool)(implementation != _newImp)",
                "is_correct": true
              }
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "_setImplementation(address)"
            ]
          }
        }
      },
      {
        "contract": "RouterImpl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol#294-644)",
        "elements": [],
        "description": "RouterImpl (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol#294-644) is an upgradeable proxy.\nimplementation was found in a different contract.\nimplementation is an address state variable.\nFound compatibility checks in all upgrade functions.\n",
        "id": "9f3e6e798c15b029bb0bc855529c0e521085f4c94c69f7d856f3596b956778af",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "Router.implementation",
          "impl_address_setter": "Router._setImplementation(address)",
          "impl_address_getter": "not found",
          "impl_address_location": "Router (../../smart-contract-sanctuary/polygon/contracts/mainnet/proxies/0.5.6/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol/d9276178f79631c3804f96B634c0250293CE8172_RouterImpl.sol#8-45)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": {
              "Router._setImplementation(address)": {
                "check": "require(bool)(implementation != _newImp)",
                "is_correct": true
              }
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "_setImplementation(address)",
              "version()",
              "changeNextOwner(address)",
              "changeOwner()",
              "approvePair(address,address,address)",
              "sendTokenToExchange(address,uint256)",
              "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
              "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
              "swapExactETHForTokens(uint256,address[],address,uint256)",
              "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
              "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
              "swapETHForExactTokens(uint256,address[],address,uint256)",
              "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
              "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
              "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
              "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
              "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
              "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
              "claimReward(address,uint256)",
              "claimReward(address,address,uint256)",
              "claimRewardList(address[],uint256)",
              "quote(uint256,uint256,uint256)",
              "getAmountsOut(uint256,address[])",
              "getAmountsIn(uint256,address[])",
              "getAmountOut(uint256,uint256,uint256)",
              "getAmountIn(uint256,uint256,uint256)"
            ]
          }
        }
      }
    ]
  }
}