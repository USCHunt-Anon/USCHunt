
Begin IERCProxy.is_proxy (Slither line:1425)


End IERCProxy.is_proxy (Slither line:1428)


Begin IERCProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERCProxy 

End IERCProxy.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)


End Proxy.is_proxy (Slither line:1428)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradableProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin UpgradableProxy.find_delegatecall_in_exp_node

Found Expression Node: _impl = sload(uint256)(position) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: sload(uint256)
Type of call: uint256 (Slither line:2817)
Args:
position

End UpgradableProxy.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin UpgradableProxy.find_delegatecall_in_exp_node

Found Expression Node: result_delegatedFwd_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2817)
Args:
gas()() - 10000
_dst
_calldata + 0x20
mload(uint256)(_calldata)
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2824)

Destination is _dst (Slither line:2828)
dest.value: _dst (Slither line:2831)
Expression: None (Slither line:2836)

Begin UpgradableProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking OWNER_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in UpgradableProxy.delegatedFwd (Slither line:1805)
AssignmentOperation: sload(uint256)(position) (Slither line:1811)
CallExpression: sload(uint256)(position) (Slither line:1819)
AssignmentOperation: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0) (Slither line:1811)
CallExpression: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0) (Slither line:1819)
CallExpression: delegatedFwd(loadImplementation(),msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(loadImplementation(),msg.data) (Slither line:1832)
The value passed to parameter #0 is loadImplementation() (Slither line:1835)

Begin UpgradableProxy.find_delegate_from_call_exp

loadImplementation() (Slither line:2003)
called = loadImplementation (Slither line:2010)
Return node of function UpgradableProxy.loadImplementation(): RETURN _impl (Slither line:2041)
_impl (Slither line:2048)
loadImplementation returns a variable of type address   called _impl (Slither line:2193)
loadImplementation contains assembly - looking for sload (Slither line:2199)
Looking in EXPRESSION node (Slither line:2238)
Assignment operation: _impl = sload(uint256)(position) (Slither line:2242)
Found _impl on left side of assignment (Slither line:2247)
Found storage slot: IMPLEMENTATION_SLOT (Slither line:2262)

End UpgradableProxy.find_delegate_from_call_exp (Slither line:2328)

AssignmentOperation: returndatasize()() (Slither line:1811)
CallExpression: returndatasize()() (Slither line:1819)
CallExpression: revert(uint256,uint256)(ptr_delegatedFwd_asm_0,size_delegatedFwd_asm_0) (Slither line:1819)
CallExpression: return(uint256,uint256)(ptr_delegatedFwd_asm_0,size_delegatedFwd_asm_0) (Slither line:1819)
AssignmentOperation: mload(uint256)(0x40) (Slither line:1811)
CallExpression: mload(uint256)(0x40) (Slither line:1819)
CallExpression: returndatacopy(uint256,uint256,uint256)(ptr_delegatedFwd_asm_0,0,size_delegatedFwd_asm_0) (Slither line:1819)
AssignmentOperation: IMPLEMENTATION_SLOT (Slither line:1811)
AssignmentOperation: result_delegatedFwd_asm_0 (Slither line:1811)
delegatedFwd contains assembly, searching for sload (Slither line:1875)

End UpgradableProxy.find_delegate_variable_from_name (Slither line:1949)


End UpgradableProxy.find_delegatecall_in_exp_node (Slither line:2858)

Setting UpgradableProxy._delegate_variable = UpgradableProxy._proxy_impl_slot: IMPLEMENTATION_SLOT (Slither line:1473)


End UpgradableProxy.is_proxy (Slither line:1476)


Begin UpgradableProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradableProxy 
Call destination IMPLEMENTATION_SLOT is constant (Slither line:1146)

IMPLEMENTATION_SLOT is the implementation storage slot (Slither line:1149)

UpgradableProxy is delegating to IMPLEMENTATION_SLOT
Looking for setter (Slither line:1200)


Begin UpgradableProxy.find_setter_in_contract (Slither line:3119)

Expression: keccak256(bytes)(matic.network.proxy.implementation) (Slither line:3122)
Checking function: constructor(address) returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)
Checking function: proxyOwner() returns(address) (Slither line:3127)
Visibility: external
_owner
loadProxyOwner()
_owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
Checking function: loadProxyOwner() returns(address) (Slither line:3127)
Visibility: internal
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: external
_impl = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
loadImplementation()
_impl
Checking function: loadImplementation() returns(address) (Slither line:3127)
Visibility: internal
Checking function: transferProxyOwnership(address) returns() (Slither line:3127)
Visibility: public
setProxyOwner(newOwner)
_owner
onlyProxyOwner()
require(bool,string)(newOwner != address(0),ZERO_ADDRESS)
_owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
ProxyOwnerUpdate(newOwner,loadProxyOwner())
sstore(uint256,uint256)(position,newOwner)
sstore(uint256,uint256)
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
Checking function: setProxyOwner(address) returns() (Slither line:3127)
Visibility: private
Checking function: updateImplementation(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
_impl = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
ProxyUpdated(_newProxyTo,loadImplementation())
setImplementation(_newProxyTo)
onlyProxyOwner()
false
_owner
_owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
size > 0
sstore(uint256,uint256)(position,_newProxyTo)
sstore(uint256,uint256)

End UpgradableProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: updateImplementation in contract: UpgradableProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradableProxy.find_getter_in_contract (Slither line:2974)

IMPLEMENTATION_SLOT is a Variable object
keccak256(bytes)(matic.network.proxy.implementation)
Checking function: delegatedFwd (Slither line:2988)
Checking function: proxyType (Slither line:2988)
proxyType returns uint256 variable called proxyTypeId (Slither line:3008)
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: receive (Slither line:2988)
Checking function: proxyOwner (Slither line:2988)
proxyOwner returns address variable  (Slither line:3008)
RETURN node expression: loadProxyOwner() (Slither line:3028)
Checking function: loadProxyOwner (Slither line:2988)
loadProxyOwner returns address variable  (Slither line:3008)
loadProxyOwner contains assembly (Slither line:3051)
loadProxyOwner contains assembly (Slither line:3051)
RETURN node expression: _owner (Slither line:3028)
loadProxyOwner contains assembly (Slither line:3051)
loadProxyOwner contains assembly (Slither line:3051)
loadProxyOwner contains assembly (Slither line:3051)
loadProxyOwner contains assembly (Slither line:3051)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: loadImplementation() (Slither line:3028)
Checking function: loadImplementation (Slither line:2988)
loadImplementation returns address variable  (Slither line:3008)
loadImplementation contains assembly (Slither line:3051)
loadImplementation contains assembly (Slither line:3051)
loadImplementation contains assembly (Slither line:3051)

End UpgradableProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: loadImplementation in contract: UpgradableProxy (Slither line:1285)

End UpgradableProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: UpgradableProxy
Setter found in contract UpgradableProxy
Checking external function proxyType
Checking external function implementation
Checking external function proxyType
Checking external function implementation
Checking external function proxyOwner
Checking external function implementation
Checking public function transferProxyOwnership
Checking public function updateImplementation
Checking public function updateAndCall
Checking external function fallback
Checking external function receive
functions_writing_to_variable: IMPLEMENTATION_SLOT
functions_writing_to_variable: checking function UpgradableProxy.loadProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.setImplementation (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.proxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.receive (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.loadImplementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.isContract (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.delegatedFwd (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.transferProxyOwnership (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.setProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.constructor (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.updateImplementation (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.updateAndCall (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:912)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:924)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:912)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:898)
has_compatibility_checks: dependencies: []
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: skipping constructor
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadProxyOwner() == msg.sender
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadProxyOwner() == msg.sender
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_delegatedFwd_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found external function: proxyType
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_time_delay: (node.type) EXPRESSION
(Expression) _impl = sload(uint256)(position)
has_time_delay: (node.type) IF
(Expression) _target == address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) ProxyUpdated(_newProxyTo,loadImplementation())
has_time_delay: (node.type) EXPRESSION
(Expression) setImplementation(_newProxyTo)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = OWNER_SLOT
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) _owner = sload(uint256)(position)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) EXPRESSION
(Expression) sstore(uint256,uint256)(position,_newProxyTo)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(_target)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_time_delay: (node.type) RETURN
(Expression) _impl

Begin ChildChainManagerProxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin ChildChainManagerProxy.find_delegatecall_in_exp_node

Found Expression Node: ptr_delegatedFwd_asm_0 = mload(uint256)(0x40) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: mload(uint256)
Type of call: uint256 (Slither line:2817)
Args:
0x40

End ChildChainManagerProxy.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin ChildChainManagerProxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(ptr_delegatedFwd_asm_0,0,size_delegatedFwd_asm_0) (Slither line:2802)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
ptr_delegatedFwd_asm_0
0
size_delegatedFwd_asm_0

End ChildChainManagerProxy.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin ChildChainManagerProxy.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_1104_158_0_delegatedFwd_asm_0 = result_delegatedFwd_asm_0 (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)

End ChildChainManagerProxy.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin ChildChainManagerProxy.find_delegatecall_in_asm (Slither line:1541)


End ChildChainManagerProxy.find_delegatecall_in_asm (Slither line:1637)


Begin ChildChainManagerProxy.find_delegatecall_in_asm (Slither line:1541)


End ChildChainManagerProxy.find_delegatecall_in_asm (Slither line:1637)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin ChildChainManagerProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin ChildChainManagerProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking OWNER_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in ChildChainManagerProxy.delegatedFwd (Slither line:1805)
AssignmentOperation: mload(uint256)(0x40) (Slither line:1811)
CallExpression: mload(uint256)(0x40) (Slither line:1819)
CallExpression: returndatacopy(uint256,uint256,uint256)(ptr_delegatedFwd_asm_0,0,size_delegatedFwd_asm_0) (Slither line:1819)
AssignmentOperation: IMPLEMENTATION_SLOT (Slither line:1811)
AssignmentOperation: result_delegatedFwd_asm_0 (Slither line:1811)
AssignmentOperation: sload(uint256)(position) (Slither line:1811)
CallExpression: sload(uint256)(position) (Slither line:1819)
AssignmentOperation: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0) (Slither line:1811)
CallExpression: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0) (Slither line:1819)
CallExpression: delegatedFwd(loadImplementation(),msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(loadImplementation(),msg.data) (Slither line:1832)
The value passed to parameter #0 is loadImplementation() (Slither line:1835)

Begin ChildChainManagerProxy.find_delegate_from_call_exp

loadImplementation() (Slither line:2003)
called = loadImplementation (Slither line:2010)
Return node of function UpgradableProxy.loadImplementation(): RETURN _impl (Slither line:2041)
_impl (Slither line:2048)
loadImplementation returns a variable of type address   called _impl (Slither line:2193)
loadImplementation contains assembly - looking for sload (Slither line:2199)
Looking in EXPRESSION node (Slither line:2238)
Assignment operation: _impl = sload(uint256)(position) (Slither line:2242)
Found _impl on left side of assignment (Slither line:2247)
Found storage slot: IMPLEMENTATION_SLOT (Slither line:2262)

End ChildChainManagerProxy.find_delegate_from_call_exp (Slither line:2328)

AssignmentOperation: returndatasize()() (Slither line:1811)
CallExpression: returndatasize()() (Slither line:1819)
CallExpression: revert(uint256,uint256)(ptr_delegatedFwd_asm_0,size_delegatedFwd_asm_0) (Slither line:1819)
CallExpression: return(uint256,uint256)(ptr_delegatedFwd_asm_0,size_delegatedFwd_asm_0) (Slither line:1819)
delegatedFwd contains assembly, searching for sload (Slither line:1875)

End ChildChainManagerProxy.find_delegate_variable_from_name (Slither line:1949)


End ChildChainManagerProxy.find_delegatecall_in_asm (Slither line:1637)

Setting ChildChainManagerProxy._delegate_variable = ChildChainManagerProxy._proxy_impl_slot: IMPLEMENTATION_SLOT (Slither line:1473)


End ChildChainManagerProxy.is_proxy (Slither line:1476)


Begin ChildChainManagerProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ChildChainManagerProxy 
Call destination IMPLEMENTATION_SLOT is constant (Slither line:1146)

IMPLEMENTATION_SLOT is the implementation storage slot (Slither line:1149)

ChildChainManagerProxy is delegating to IMPLEMENTATION_SLOT
Looking for setter (Slither line:1200)

Looking for setter in UpgradableProxy (Slither line:1204)


Begin UpgradableProxy.find_setter_in_contract (Slither line:3119)

Expression: keccak256(bytes)(matic.network.proxy.implementation) (Slither line:3122)
Checking function: constructor(address) returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)
Checking function: proxyOwner() returns(address) (Slither line:3127)
Visibility: external
_owner
loadProxyOwner()
_owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
Checking function: loadProxyOwner() returns(address) (Slither line:3127)
Visibility: internal
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: external
_impl = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
loadImplementation()
_impl
Checking function: loadImplementation() returns(address) (Slither line:3127)
Visibility: internal
Checking function: transferProxyOwnership(address) returns() (Slither line:3127)
Visibility: public
setProxyOwner(newOwner)
_owner
onlyProxyOwner()
require(bool,string)(newOwner != address(0),ZERO_ADDRESS)
_owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
ProxyOwnerUpdate(newOwner,loadProxyOwner())
sstore(uint256,uint256)(position,newOwner)
sstore(uint256,uint256)
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
Checking function: setProxyOwner(address) returns() (Slither line:3127)
Visibility: private
Checking function: updateImplementation(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
_impl = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
ProxyUpdated(_newProxyTo,loadImplementation())
setImplementation(_newProxyTo)
onlyProxyOwner()
false
_owner
_owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3216)
keccak256(bytes)(matic.network.proxy.implementation)
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
size > 0
sstore(uint256,uint256)(position,_newProxyTo)
sstore(uint256,uint256)

End UpgradableProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: updateImplementation in contract: UpgradableProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradableProxy.find_getter_in_contract (Slither line:2974)

IMPLEMENTATION_SLOT is a Variable object
keccak256(bytes)(matic.network.proxy.implementation)

End UpgradableProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: loadImplementation in contract: UpgradableProxy (Slither line:1285)

End ChildChainManagerProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: ChildChainManagerProxy
Setter found in contract UpgradableProxy
impl_address_from_contract_call: keccak256(bytes)(matic.network.proxy.implementation)
impl_address_from_contract_call: StateVariable IMPLEMENTATION_SLOT
impl_address_from_contract_call: getter is loadImplementation
getter.full_name = loadImplementation()
impl_address_from_contract_call: CallExpression mload(uint256)(0x40)
impl_address_from_contract_call: arg is 0x40
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(ptr_delegatedFwd_asm_0,0,size_delegatedFwd_asm_0)
impl_address_from_contract_call: arg is ptr_delegatedFwd_asm_0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is size_delegatedFwd_asm_0
impl_address_from_contract_call: CallExpression sload(uint256)(position)
impl_address_from_contract_call: arg is position
impl_address_from_contract_call: CallExpression delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0)
impl_address_from_contract_call: arg is gas()() - 10000
impl_address_from_contract_call: arg is _dst
impl_address_from_contract_call: arg is _calldata + 0x20
impl_address_from_contract_call: arg is mload(uint256)(_calldata)
impl_address_from_contract_call: CallExpression mload(uint256)(_calldata)
impl_address_from_contract_call: CallExpression delegatedFwd(loadImplementation(),msg.data)
impl_address_from_contract_call: arg is loadImplementation()
impl_address_from_contract_call: CallExpression loadImplementation()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(ptr_delegatedFwd_asm_0,size_delegatedFwd_asm_0)
impl_address_from_contract_call: arg is ptr_delegatedFwd_asm_0
impl_address_from_contract_call: arg is size_delegatedFwd_asm_0
impl_address_from_contract_call: CallExpression return(uint256,uint256)(ptr_delegatedFwd_asm_0,size_delegatedFwd_asm_0)
impl_address_from_contract_call: arg is ptr_delegatedFwd_asm_0
impl_address_from_contract_call: arg is size_delegatedFwd_asm_0
called: keccak256(bytes)
Checking external function proxyOwner
Checking external function implementation
Checking public function transferProxyOwnership
Checking public function updateImplementation
Checking public function updateAndCall
Checking external function proxyType
Checking external function implementation
Checking external function proxyType
Checking external function implementation
Checking external function fallback
Checking external function receive
functions_writing_to_variable: IMPLEMENTATION_SLOT
functions_writing_to_variable: checking function ChildChainManagerProxy.proxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.loadProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.setImplementation (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.proxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.setProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.loadProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.isContract (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.receive (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.loadImplementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.isContract (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.delegatedFwd (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.updateImplementation (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function ChildChainManagerProxy.proxyType (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.constructor (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.transferProxyOwnership (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.constructor (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function ChildChainManagerProxy.delegatedFwd (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.setProxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.constructor (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function ChildChainManagerProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.updateAndCall (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function ChildChainManagerProxy.loadImplementation (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradableProxy.updateImplementation (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.proxyType (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.receive (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.transferProxyOwnership (proxy_features line:898)
functions_writing_to_variable: checking function ChildChainManagerProxy.setImplementation (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function ChildChainManagerProxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:912)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:924)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:912)
functions_writing_to_variable: checking function UpgradableProxy.updateAndCall (proxy_features line:898)
get_value_assigned: sstore(uint256,uint256)(position,_newProxyTo)
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT using sstore (proxy_features line:998)
functions_writing_to_variable: checking function UpgradableProxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:912)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:924)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:912)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:898)
has_compatibility_checks: dependencies: []
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadProxyOwner() == msg.sender
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
has_compatibility_checks: skipping constructor
has_compatibility_checks: skipping constructor
has_compatibility_checks: skipping constructor
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadProxyOwner() == msg.sender
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadProxyOwner() == msg.sender
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadProxyOwner() == msg.sender
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_delegatedFwd_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()() - 10000,_dst,_calldata + 0x20,mload(uint256)(_calldata),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found fallback
Found external function: receive
Found external function: proxyOwner
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_time_delay: (node.type) EXPRESSION
(Expression) _impl = sload(uint256)(position)
has_time_delay: (node.type) IF
(Expression) _target == address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) ProxyUpdated(_newProxyTo,loadImplementation())
has_time_delay: (node.type) EXPRESSION
(Expression) setImplementation(_newProxyTo)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = OWNER_SLOT
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) _owner = sload(uint256)(position)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) EXPRESSION
(Expression) sstore(uint256,uint256)(position,_newProxyTo)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(_target)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(loadProxyOwner() == msg.sender,NOT_OWNER)
has_time_delay: (node.type) RETURN
(Expression) _impl
