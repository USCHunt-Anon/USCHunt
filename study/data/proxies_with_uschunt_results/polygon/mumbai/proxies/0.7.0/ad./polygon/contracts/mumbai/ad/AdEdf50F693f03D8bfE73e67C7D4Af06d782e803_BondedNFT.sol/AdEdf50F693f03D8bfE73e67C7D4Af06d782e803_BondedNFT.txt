
Begin iERC20.is_proxy (Slither line:1425)


End iERC20.is_proxy (Slither line:1428)


Begin iERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: iERC20 

End iERC20.is_upgradeable_proxy (Slither line:1407)


Begin iGAME_ERC20.is_proxy (Slither line:1425)


End iGAME_ERC20.is_proxy (Slither line:1428)


Begin iGAME_ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: iGAME_ERC20 

End iGAME_ERC20.is_upgradeable_proxy (Slither line:1407)


Begin iGAME_Game.is_proxy (Slither line:1425)


End iGAME_Game.is_proxy (Slither line:1428)


Begin iGAME_Game.is_upgradeable_proxy (Slither line:1136)

Checking contract: iGAME_Game 

End iGAME_Game.is_upgradeable_proxy (Slither line:1407)


Begin iGAME_Master.is_proxy (Slither line:1425)


End iGAME_Master.is_proxy (Slither line:1428)


Begin iGAME_Master.is_upgradeable_proxy (Slither line:1136)

Checking contract: iGAME_Master 

End iGAME_Master.is_upgradeable_proxy (Slither line:1407)


Begin IUniswapV2Router01.is_proxy (Slither line:1425)


End IUniswapV2Router01.is_proxy (Slither line:1428)


Begin IUniswapV2Router01.is_upgradeable_proxy (Slither line:1136)

Checking contract: IUniswapV2Router01 

End IUniswapV2Router01.is_upgradeable_proxy (Slither line:1407)


Begin IUniswapV2Router02.is_proxy (Slither line:1425)


End IUniswapV2Router02.is_proxy (Slither line:1428)


Begin IUniswapV2Router02.is_upgradeable_proxy (Slither line:1136)

Checking contract: IUniswapV2Router02 

End IUniswapV2Router02.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondCut.is_proxy (Slither line:1425)


End IDiamondCut.is_proxy (Slither line:1428)


Begin IDiamondCut.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondCut 

End IDiamondCut.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondLoupe.is_proxy (Slither line:1425)


End IDiamondLoupe.is_proxy (Slither line:1428)


Begin IDiamondLoupe.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondLoupe 

End IDiamondLoupe.is_upgradeable_proxy (Slither line:1407)


Begin IERC173.is_proxy (Slither line:1425)


End IERC173.is_proxy (Slither line:1428)


Begin IERC173.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC173 

End IERC173.is_upgradeable_proxy (Slither line:1407)


Begin LibDiamond.is_proxy (Slither line:1425)


End LibDiamond.is_proxy (Slither line:1428)


Begin LibDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibDiamond 

End LibDiamond.is_upgradeable_proxy (Slither line:1407)


Begin Strings.is_proxy (Slither line:1425)


End Strings.is_proxy (Slither line:1428)


Begin Strings.is_upgradeable_proxy (Slither line:1136)

Checking contract: Strings 

End Strings.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin IERC1155.is_proxy (Slither line:1425)


End IERC1155.is_proxy (Slither line:1428)


Begin IERC1155.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC1155 

End IERC1155.is_upgradeable_proxy (Slither line:1407)


Begin IERC1155MetadataURI.is_proxy (Slither line:1425)


End IERC1155MetadataURI.is_proxy (Slither line:1428)


Begin IERC1155MetadataURI.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC1155MetadataURI 

End IERC1155MetadataURI.is_upgradeable_proxy (Slither line:1407)


Begin IERC1155Receiver.is_proxy (Slither line:1425)


End IERC1155Receiver.is_proxy (Slither line:1428)


Begin IERC1155Receiver.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC1155Receiver 

End IERC1155Receiver.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin ERC165.is_proxy (Slither line:1425)


End ERC165.is_proxy (Slither line:1428)


Begin ERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165 

End ERC165.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin ERC1155.is_proxy (Slither line:1425)


End ERC1155.is_proxy (Slither line:1428)


Begin ERC1155.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC1155 

End ERC1155.is_upgradeable_proxy (Slither line:1407)


Begin EnumerableSet.is_proxy (Slither line:1425)


End EnumerableSet.is_proxy (Slither line:1428)


Begin EnumerableSet.is_upgradeable_proxy (Slither line:1136)

Checking contract: EnumerableSet 

End EnumerableSet.is_upgradeable_proxy (Slither line:1407)


Begin AccessControl.is_proxy (Slither line:1425)


End AccessControl.is_proxy (Slither line:1428)


Begin AccessControl.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessControl 

End AccessControl.is_upgradeable_proxy (Slither line:1407)


Begin Admin.is_proxy (Slither line:1425)


End Admin.is_proxy (Slither line:1428)


Begin Admin.is_upgradeable_proxy (Slither line:1136)

Checking contract: Admin 

End Admin.is_upgradeable_proxy (Slither line:1407)


Begin NFTbase.is_proxy (Slither line:1425)


End NFTbase.is_proxy (Slither line:1428)


Begin NFTbase.is_upgradeable_proxy (Slither line:1136)

Checking contract: NFTbase 

End NFTbase.is_upgradeable_proxy (Slither line:1407)


Begin ReentrancyGuard.is_proxy (Slither line:1425)


End ReentrancyGuard.is_proxy (Slither line:1428)


Begin ReentrancyGuard.is_upgradeable_proxy (Slither line:1136)

Checking contract: ReentrancyGuard 

End ReentrancyGuard.is_upgradeable_proxy (Slither line:1407)


Begin BondedNFT.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BondedNFT.find_delegatecall_in_exp_node

Found Expression Node: ds = position (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End BondedNFT.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BondedNFT.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End BondedNFT.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin BondedNFT.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'facet'
Looking for corresponding Variable
Current function: fallback

Begin BondedNFT.find_delegate_variable_from_name
Searching for facet (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _INTERFACE_ID_ERC165 (Slither line:1689)
Checking _supportedInterfaces (Slither line:1689)
Checking _balances (Slither line:1689)
Checking _minted (Slither line:1689)
Checking _operatorApprovals (Slither line:1689)
Checking _uri (Slither line:1689)
Checking _INTERFACE_ID_ERC1155 (Slither line:1689)
Checking _INTERFACE_ID_ERC1155_METADATA_URI (Slither line:1689)
Checking _roles (Slither line:1689)
Checking DEFAULT_ADMIN_ROLE (Slither line:1689)
Checking METADATA_ADMIN (Slither line:1689)
Checking _baseURI (Slither line:1689)
Checking _tokenURIs (Slither line:1689)
Checking _NOT_ENTERED (Slither line:1689)
Checking _ENTERED (Slither line:1689)
Checking _status (Slither line:1689)
Checking baseTokenDecimals (Slither line:1689)
Checking SIG_DIGITS (Slither line:1689)
Checking burningActive (Slither line:1689)
Checking mintingActive (Slither line:1689)
Checking MAX_PRICE (Slither line:1689)
Checking feeReceiver (Slither line:1689)
Checking gameToken (Slither line:1689)
Checking gameAdmin (Slither line:1689)
Checking uniswapRouter (Slither line:1689)
Checking curves (Slither line:1689)
Checking saleStarts (Slither line:1689)
Checking tokenSupply (Slither line:1689)
Checking multipliers (Slither line:1689)
Checking nextTokenIDs (Slither line:1689)
Checking userLatestBlock (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking ds (Slither line:1703)
Checking facet (Slither line:1703)
facet is a Local Variable in BondedNFT.fallback (Slither line:1707)
facet appears to be a Diamond facet address (Slither line:1713)

End BondedNFT.find_delegate_variable_by_name


End BondedNFT.find_delegatecall_in_asm (Slither line:1637)


End BondedNFT.is_proxy (Slither line:1476)


Begin BondedNFT.is_upgradeable_proxy (Slither line:1136)

Checking contract: BondedNFT 
Local Variable: facet (Slither line:1164)
BondedNFT is delegating to facet
Looking for setter (Slither line:1200)


Begin BondedNFT.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor(address,address,address,address) returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: setFacet(address,IDiamondCut.FacetCutAction,bytes4[]) returns() (Slither line:3117)
Visibility: public
LibDiamond.diamondCut(cuts,address(0),new bytes(0))
_roles[role].members.contains(account)
isGlobalAdmin()
delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function)
enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code)
ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
ds.facetAddresses.push(_facetAddress)
facetIndex ++
ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop()
initializeDiamondCut(_init,_calldata)
ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
DiamondCut(_diamondCut,_init,_calldata)
ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
addFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
delete ds.selectorToFacetAndPosition[_selector]
selectorIndex ++
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
replaceFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
require(bool)(hasRole(DEFAULT_ADMIN_ROLE,_msgSender()))
set._indexes[value] != 0
removeFunction(oldFacetAddress,selector)
removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code)
ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector)
ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
revert(string)(LibDiamondCut: Incorrect FacetCutAction)
ds.facetAddresses.pop()
ds.facetAddresses.push(_facetAddress)
selectorPosition ++
_contains(set._inner,bytes32(uint256(value)))
ds.facetAddresses[facetAddressPosition] = lastFacetAddress
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
cuts[0] = cut1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
selectorIndex ++
require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
require(bool,string)(contractSize > 0,_errorMessage)
require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
contractSize = extcodesize(uint256)(_contract)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector)
ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
enforceHasContractCode(_init,LibDiamondCut: _init address has no code)
ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
(success,error) = _init.delegatecall(_calldata)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
selectorPosition ++
selectorIndex ++
revert(string)(string(error))
sender
ds = position
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(LibDiamondCut: _init function reverted)
removeFunction(oldFacetAddress,selector)
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
Checking function: setUniswapRouter(address) returns() (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
isGlobalAdmin()
require(bool)(hasRole(DEFAULT_ADMIN_ROLE,_msgSender()))
set._indexes[value] != 0
sender
_contains(set._inner,bytes32(uint256(value)))
uniswapRouter = IUniswapV2Router02(uniswapRouter_)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: setFEERECEIVER(address) returns() (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
feeReceiver = a
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool)(hasRole(DEFAULT_ADMIN_ROLE,_msgSender()))
set._indexes[value] != 0
sender
isGlobalAdmin()
_contains(set._inner,bytes32(uint256(value)))
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: toggleTokenMinting() returns() (Slither line:3117)
Visibility: public
isGlobalAdmin()
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool)(hasRole(DEFAULT_ADMIN_ROLE,_msgSender()))
set._indexes[value] != 0
sender
_contains(set._inner,bytes32(uint256(value)))
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
mintingActive = ! mintingActive
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: toggleTokenBurning() returns() (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool)(hasRole(DEFAULT_ADMIN_ROLE,_msgSender()))
set._indexes[value] != 0
burningActive = ! burningActive
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
isGlobalAdmin()
_contains(set._inner,bytes32(uint256(value)))
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: getTokenID(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: public
baseTokenDecimals * _creatorID + token
Checking function: getBuyPrice(uint256) returns(uint256) (Slither line:3117)
Visibility: public
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply + 1)
require(bool,string)(b > 0,errorMessage)
0
c
Checking function: getSellPrice(uint256) returns(uint256) (Slither line:3117)
Visibility: public
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply).mul(90).div(100)
require(bool,string)(b > 0,errorMessage)
0
c
Checking function: getPrintPrice(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: public
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(b > 0,errorMessage)
0
c
Checking function: createToken(uint256,string,uint256,uint256) returns() (Slither line:3117)
Visibility: public
require(bool,string)(gameAdmin.isOperatorOrMinion(creatorId,_msgSender()) == true,sender must be operator or minion)
baseTokenDecimals * _creatorID + token
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
curves[tokenId] = curve
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
multipliers[tokenId] = multiplier
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
TokenData(tokenId,json,curve,multiplier)
sender
nextTokenIDs[creatorId] = nextTokenId
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(nextTokenId < 1000000,max token of 1000000)
require(bool,string)(curve > 0 && curve <= 20 && multiplier > 0 && multiplier <= 1000000,invalid curve and multipliers)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(bytes(json).length > 1,json must non null)
Checking function: updateTokenData(uint256,string,uint256,uint256) returns() (Slither line:3117)
Visibility: public
multipliers[tokenId] = multiplier
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
TokenData(tokenId,json,curve,multiplier)
sender
require(bool,string)(hasMinted(tokenId) == false,token has not been minted)
require(bool,string)(gameAdmin.isOperatorOrMinion(creator,_msgSender()) == true,sender must be operator or minion)
_minted[id]
require(bool,string)(curve > 0 && curve <= 20 && multiplier > 0 && multiplier <= 1000000,invalid curve or multipliers)
require(bool,string)(bytes(json).length > 1,json must non null)
require(bool,string)(curves[tokenId] > 0,curve must be set)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
curves[tokenId] = curve
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: setTokenOnSaleDate(uint256,uint256) returns() (Slither line:3117)
Visibility: public
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(hasMinted(tokenId) == false,token has not been minted)
require(bool,string)(curves[tokenId] > 0,curve must be set)
require(bool,string)(gameAdmin.isOperatorOrMinion(creator,_msgSender()) == true,sender must be operator or minion)
sender
saleStarts[tokenId] = onSaleDate
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
onSaleDate = block.timestamp
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_minted[id]
TokenOnSale(tokenId,onSaleDate)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: buyNFTwithGAME(uint256,uint256) returns() (Slither line:3117)
Visibility: public
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply + 1)
array
require(bool,string)(b > 0,errorMessage)
0
c
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price
getPrintPrice(tokenId,supply).mul(90).div(100)
_buyNFT(tokenId,price,sender)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
beforeBuy(tokenId)
require(bool,string)(account != address(0),ERC1155: mint to the zero address)
_minted[id] = true
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
tokenSupply[tokenId] += 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(reason)
_mint(sender,tokenId,1,)
TokenBought(sender,tokenId,price,getBuyPrice(tokenId),getSellPrice(tokenId),tokenSupply[tokenId],creatorfee,gameToken.balanceOf(address(this)),address(creatorID))
_beforeTokenTransfer(operator,address(0),account,_asSingletonArray(id),_asSingletonArray(amount),data)
gameToken.transferByContract(address(this),feeReceiver,gamefee)
_balances[id][account] = _balances[id][account].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
gameToken.transferByContract(address(this),address(creatorID),creatorfee)
TransferSingle(operator,address(0),account,id,amount)
require(bool,string)(mintingActive,minting is not active)
_doSafeTransferAcceptanceCheck(operator,address(0),account,id,amount,data)
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
require(bool,string)(block.timestamp > saleStarts[tokenId] && saleStarts[tokenId] > 0,sale has not started yet)
require(bool)(userLatestBlock[_msgSender()] < block.number)
userLatestBlock[_msgSender()] = block.number
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(price > 0 && price <= maxPrice,invalid price)
gameToken.transferByContract(sender,address(this),price)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: buyNFTwithMatic(uint256,uint256,address[]) returns() (Slither line:3117)
Visibility: public
size > 0
_status = _NOT_ENTERED
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply + 1)
array
require(bool,string)(b > 0,errorMessage)
0
c
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sub(a,b,SafeMath: subtraction overflow)
price
getPrintPrice(tokenId,supply).mul(90).div(100)
require(bool,string)(b <= a,errorMessage)
c
require(bool,string)(path.length > 1 && path[path.length - 1] == address(gameToken),invalid path)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(amountsIn[0] > 0 && amountsIn[0] <= maxPrice,invalid price)
require(bool,string)(msg.value >= amountsIn[0],buyNFTwithMatic: value is not enough)
_buyNFT(tokenId,price,sender)
require(bool)(success)
(success) = sender.call{value: msg.value.sub(amounts[0])}()
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(account != address(0),ERC1155: mint to the zero address)
_minted[id] = true
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
nonReentrant()
tokenSupply[tokenId] += 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_mint(sender,tokenId,1,)
beforeBuy(tokenId)
TokenBought(sender,tokenId,price,getBuyPrice(tokenId),getSellPrice(tokenId),tokenSupply[tokenId],creatorfee,gameToken.balanceOf(address(this)),address(creatorID))
_beforeTokenTransfer(operator,address(0),account,_asSingletonArray(id),_asSingletonArray(amount),data)
gameToken.transferByContract(address(this),feeReceiver,gamefee)
_balances[id][account] = _balances[id][account].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
gameToken.transferByContract(address(this),address(creatorID),creatorfee)
TransferSingle(operator,address(0),account,id,amount)
require(bool,string)(mintingActive,minting is not active)
_doSafeTransferAcceptanceCheck(operator,address(0),account,id,amount,data)
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
require(bool,string)(block.timestamp > saleStarts[tokenId] && saleStarts[tokenId] > 0,sale has not started yet)
require(bool)(userLatestBlock[_msgSender()] < block.number)
userLatestBlock[_msgSender()] = block.number
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)
_status = _ENTERED
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(reason)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: buyNFTwithERC20(uint256,uint256,address[]) returns() (Slither line:3117)
Visibility: public
size > 0
require(bool)(iERC20(path[0]).transferFrom(address(this),sender,amountsIn[0].sub(amounts[0])))
_status = _NOT_ENTERED
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
nonReentrant()
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
beforeBuy(tokenId)
c
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply + 1)
array
require(bool,string)(b > 0,errorMessage)
0
c
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sub(a,b,SafeMath: subtraction overflow)
price
getPrintPrice(tokenId,supply).mul(90).div(100)
require(bool,string)(b <= a,errorMessage)
c
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(account != address(0),ERC1155: mint to the zero address)
require(bool,string)(path.length > 1 && path[path.length - 1] == address(gameToken),invalid path)
_minted[id] = true
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
tokenSupply[tokenId] += 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_mint(sender,tokenId,1,)
TokenBought(sender,tokenId,price,getBuyPrice(tokenId),getSellPrice(tokenId),tokenSupply[tokenId],creatorfee,gameToken.balanceOf(address(this)),address(creatorID))
_beforeTokenTransfer(operator,address(0),account,_asSingletonArray(id),_asSingletonArray(amount),data)
gameToken.transferByContract(address(this),feeReceiver,gamefee)
require(bool,string)(amountsIn[0] > 0 && amountsIn[0] <= maxPrice,invalid price)
_balances[id][account] = _balances[id][account].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
gameToken.transferByContract(address(this),address(creatorID),creatorfee)
require(bool)(iERC20(path[0]).transferFrom(sender,address(this),amountsIn[0]))
TransferSingle(operator,address(0),account,id,amount)
require(bool,string)(mintingActive,minting is not active)
require(bool)(iERC20(path[0]).approve(address(uniswapRouter),amountsIn[0]))
_doSafeTransferAcceptanceCheck(operator,address(0),account,id,amount,data)
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
require(bool,string)(block.timestamp > saleStarts[tokenId] && saleStarts[tokenId] > 0,sale has not started yet)
require(bool)(userLatestBlock[_msgSender()] < block.number)
userLatestBlock[_msgSender()] = block.number
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)
_buyNFT(tokenId,price,sender)
_status = _ENTERED
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(reason)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: burn(uint256) returns() (Slither line:3117)
Visibility: public
price = price.add(n.mul(decimals))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c / a == b,SafeMath: multiplication overflow)
price = price.div(C).mul(multiplier).div(1000)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
price = (price.mul(1000000000000000000)).div(decimals)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(account != address(0),ERC1155: burn from the zero address)
price
div(a,b,SafeMath: division by zero)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
_beforeTokenTransfer(operator,account,address(0),_asSingletonArray(id),_asSingletonArray(amount),)
require(bool,string)(burningActive,burning is not active)
_balances[id][account] = _balances[id][account].sub(amount,ERC1155: burn amount exceeds balance)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply).mul(90).div(100)
require(bool,string)(balanceOf(_msgSender(),tokenId) >= 1,sender must have at least one token)
TransferSingle(operator,account,address(0),id,amount)
sender
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
getPrintPrice(tokenId,supply + 1)
array
require(bool,string)(b <= a,errorMessage)
require(bool,string)(b > 0,errorMessage)
tokenSupply[tokenId] -= 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_burn(_msgSender(),tokenId,1)
require(bool,string)(account != address(0),ERC1155: balance query for the zero address)
c
0
TokenBurned(_msgSender(),tokenId,price,getBuyPrice(tokenId),getSellPrice(tokenId),tokenSupply[tokenId],gameToken.balanceOf(address(this)))
_balances[id][account]
c
gameToken.transferByContract(address(this),_msgSender(),price)
price = price.add(printNumber.mul(decimals).div(C))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: _buyNFT(uint256,uint256,address) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor() returns() (Slither line:3117)
Checking function: constructor(string) returns() (Slither line:3117)
Checking function: setURI(string,uint256) returns() (Slither line:3117)
Visibility: public
isMetadataAdmin()
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[value] != 0
sender
require(bool)(hasRole(METADATA_ADMIN,_msgSender()))
_contains(set._inner,bytes32(uint256(value)))
_tokenURIs[id] = newuri
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: setBaseURI(string) returns() (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[value] != 0
_baseURI = newuri
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
isMetadataAdmin()
require(bool)(hasRole(METADATA_ADMIN,_msgSender()))
_contains(set._inner,bytes32(uint256(value)))
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: uri(uint256) returns(string) (Slither line:3117)
Visibility: public
string(buffer)
buffer[index --] = bytes1(uint8(48 + temp % 10))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
temp /= 10
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_tokenURI
string(abi.encodePacked(_baseURI,tokenid.toString()))
digits ++
temp /= 10
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
string(abi.encodePacked(_baseURI,_tokenURI))
temp = value
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
0
Checking function: constructor() returns() (Slither line:3117)
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3117)
Visibility: public
_contains(set._inner,bytes32(uint256(value)))
_roles[role].members.contains(account)
set._indexes[value] != 0
Checking function: getRoleMemberCount(bytes32) returns(uint256) (Slither line:3117)
Visibility: public
_roles[role].members.length()
_length(set._inner)
set._values.length
Checking function: getRoleMember(bytes32,uint256) returns(address) (Slither line:3117)
Visibility: public
set._values[index]
address(uint256(_at(set._inner,index)))
require(bool,string)(set._values.length > index,EnumerableSet: index out of bounds)
_roles[role].members.at(index)
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3117)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
false
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[value] != 0
sender
set._values.push(value)
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to grant)
set._indexes[value] = set._values.length
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_grantRole(role,account)
_contains(set._inner,bytes32(uint256(value)))
_add(set._inner,bytes32(uint256(value)))
true
RoleGranted(role,account,_msgSender())
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_remove(set._inner,bytes32(uint256(value)))
set._indexes[value] != 0
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to revoke)
RoleRevoked(role,account,_msgSender())
delete set._indexes[value]
_revokeRole(role,account)
true
_contains(set._inner,bytes32(uint256(value)))
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
false
Checking function: renounceRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_remove(set._inner,bytes32(uint256(value)))
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_revokeRole(role,account)
RoleRevoked(role,account,_msgSender())
delete set._indexes[value]
true
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
false
Checking function: _setupRole(bytes32,address) returns() (Slither line:3117)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3117)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _msgSender() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: constructor() returns() (Slither line:3117)
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: public
require(bool,string)(account != address(0),ERC1155: balance query for the zero address)
_balances[id][account]
Checking function: hasMinted(uint256) returns(bool) (Slither line:3117)
Visibility: public
_minted[id]
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: public
batchBalances
++ i
require(bool,string)(accounts[i] != address(0),ERC1155: batch balance query for the zero address)
require(bool,string)(accounts.length == ids.length,ERC1155: accounts and ids length mismatch)
batchBalances[i] = _balances[ids[i]][accounts[i]]
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: public
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
require(bool,string)(_msgSender() != operator,ERC1155: setting approval status for self)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_operatorApprovals[_msgSender()][operator] = approved
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
ApprovalForAll(_msgSender(),operator,approved)
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: public
_operatorApprovals[account][operator]
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: public
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
require(bool,string)(c >= a,SafeMath: addition overflow)
require(bool,string)(to != address(0),ERC1155: transfer to the zero address)
c
require(bool,string)(from == _msgSender() || isApprovedForAll(from,_msgSender()),ERC1155: caller is not owner nor approved)
sender
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_beforeTokenTransfer(operator,from,to,_asSingletonArray(id),_asSingletonArray(amount),data)
array
require(bool,string)(b <= a,errorMessage)
_balances[id][from] = _balances[id][from].sub(amount,ERC1155: insufficient balance for transfer)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
_balances[id][to] = _balances[id][to].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
TransferSingle(operator,from,to,id,amount)
c
_doSafeTransferAcceptanceCheck(operator,from,to,id,amount,data)
_operatorApprovals[account][operator]
revert(string)(reason)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: public
size > 0
_balances[id][from] = _balances[id][from].sub(amount,ERC1155: insufficient balance for transfer)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_balances[id][to] = _balances[id][to].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_beforeTokenTransfer(operator,from,to,ids,amounts,data)
TransferBatch(operator,from,to,ids,amounts)
require(bool,string)(c >= a,SafeMath: addition overflow)
_doSafeBatchTransferAcceptanceCheck(operator,from,to,ids,amounts,data)
c
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
sender
require(bool,string)(b <= a,errorMessage)
revert(string)(reason)
++ i
c
require(bool,string)(ids.length == amounts.length,ERC1155: ids and amounts length mismatch)
_operatorApprovals[account][operator]
require(bool,string)(to != address(0),ERC1155: transfer to the zero address)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(from == _msgSender() || isApprovedForAll(from,_msgSender()),ERC1155: transfer caller is not owner nor approved)
Checking function: _setURI(string) returns() (Slither line:3117)
Visibility: internal
Checking function: getURI() returns(string) (Slither line:3117)
Visibility: internal
Checking function: _mint(address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _mintBatch(address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _burn(address,uint256,uint256) returns() (Slither line:3117)
Visibility: internal
Checking function: _burnBatch(address,uint256[],uint256[]) returns() (Slither line:3117)
Visibility: internal
Checking function: _beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: private
Checking function: _doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: private
Checking function: _asSingletonArray(uint256) returns(uint256[]) (Slither line:3117)
Visibility: private
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: external
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: external
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: external
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external
Checking function: constructor() returns() (Slither line:3117)
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: public
_supportedInterfaces[interfaceId]
Checking function: _registerInterface(bytes4) returns() (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)

Expression: gameToken = iGAME_ERC20(_gameToken) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: gameAdmin = iGAME_Game(_gameAdmin) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ERC1155() (Slither line:3284)
ERC1155
Expression: ds.masterContract = iGAME_Master(_gameMaster) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: feeReceiver = _feeReceiver (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.CONTRACT_ERC712_VERSION = 1 (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.CONTRACT_ERC712_NAME = GAME Bonded NFTs (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: require(bool,string)(interfaceId != 0xffffffff,ERC165: invalid interface id) (Slither line:3284)
require(bool,string)
Expression: ds.supportedInterfaces[type()(IERC165).interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _supportedInterfaces[interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.supportedInterfaces[type()(IDiamondCut).interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _registerInterface(_INTERFACE_ID_ERC1155) (Slither line:3284)
_registerInterface
Expression: ds.supportedInterfaces[type()(IDiamondLoupe).interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds = position (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI) (Slither line:3284)
_registerInterface
Expression: _baseURI = uri (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.supportedInterfaces[type()(IERC173).interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: NFTbase(no_url_set) (Slither line:3284)
NFTbase

End DiamondCut corner case handling (Slither line:3313)


End BondedNFT.find_setter_in_contract (Slither line:3315)


Could not find implementation setter in BondedNFT (Slither line:1269)
Looking for getter (Slither line:1273)


Begin BondedNFT.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: setURI (Slither line:2978)
Checking function: setBaseURI (Slither line:2978)
Checking function: uri (Slither line:2978)
uri returns string variable  (Slither line:2998)
RETURN node expression: _tokenURI (Slither line:3018)
RETURN node expression: string(abi.encodePacked(_baseURI,tokenid.toString())) (Slither line:3018)
RETURN node expression: string(abi.encodePacked(_baseURI,_tokenURI)) (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: hasRole (Slither line:2978)
hasRole returns bool variable  (Slither line:2998)
RETURN node expression: _roles[role].members.contains(account) (Slither line:3018)
Checking function: getRoleMemberCount (Slither line:2978)
getRoleMemberCount returns uint256 variable  (Slither line:2998)
RETURN node expression: _roles[role].members.length() (Slither line:3018)
Checking function: getRoleMember (Slither line:2978)
getRoleMember returns address variable  (Slither line:2998)
RETURN node expression: _roles[role].members.at(index) (Slither line:3018)
Checking function: getRoleAdmin (Slither line:2978)
getRoleAdmin returns bytes32 variable  (Slither line:2998)
RETURN node expression: _roles[role].adminRole (Slither line:3018)
Checking function: grantRole (Slither line:2978)
Checking function: revokeRole (Slither line:2978)
Checking function: renounceRole (Slither line:2978)
Checking function: _setupRole (Slither line:2978)
Checking function: _setRoleAdmin (Slither line:2978)
Checking function: _grantRole (Slither line:2978)
Checking function: _revokeRole (Slither line:2978)
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable called sender (Slither line:2998)
RETURN node expression: sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: balanceOf (Slither line:2978)
balanceOf returns uint256 variable  (Slither line:2998)
RETURN node expression: _balances[id][account] (Slither line:3018)
Checking function: hasMinted (Slither line:2978)
hasMinted returns bool variable  (Slither line:2998)
RETURN node expression: _minted[id] (Slither line:3018)
Checking function: balanceOfBatch (Slither line:2978)
balanceOfBatch returns uint256[] variable  (Slither line:2998)
RETURN node expression: batchBalances (Slither line:3018)
Checking function: setApprovalForAll (Slither line:2978)
Checking function: isApprovedForAll (Slither line:2978)
isApprovedForAll returns bool variable  (Slither line:2998)
RETURN node expression: _operatorApprovals[account][operator] (Slither line:3018)
Checking function: safeTransferFrom (Slither line:2978)
Checking function: safeBatchTransferFrom (Slither line:2978)
Checking function: _setURI (Slither line:2978)
Checking function: getURI (Slither line:2978)
getURI returns string variable  (Slither line:2998)
RETURN node expression: _uri (Slither line:3018)
Checking function: _mint (Slither line:2978)
Checking function: _mintBatch (Slither line:2978)
Checking function: _burn (Slither line:2978)
Checking function: _burnBatch (Slither line:2978)
Checking function: _beforeTokenTransfer (Slither line:2978)
Checking function: _doSafeTransferAcceptanceCheck (Slither line:2978)
Checking function: _doSafeBatchTransferAcceptanceCheck (Slither line:2978)
Checking function: _asSingletonArray (Slither line:2978)
_asSingletonArray returns uint256[] variable  (Slither line:2998)
RETURN node expression: array (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: supportsInterface (Slither line:2978)
supportsInterface returns bool variable  (Slither line:2998)
RETURN node expression: _supportedInterfaces[interfaceId] (Slither line:3018)
Checking function: _registerInterface (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: fallback (Slither line:2978)
Checking function: setFacet (Slither line:2978)
Checking function: setUniswapRouter (Slither line:2978)
Checking function: setFEERECEIVER (Slither line:2978)
Checking function: toggleTokenMinting (Slither line:2978)
Checking function: toggleTokenBurning (Slither line:2978)
Checking function: getTokenID (Slither line:2978)
getTokenID returns uint256 variable  (Slither line:2998)
RETURN node expression: baseTokenDecimals * _creatorID + token (Slither line:3018)
Checking function: getBuyPrice (Slither line:2978)
getBuyPrice returns uint256 variable  (Slither line:2998)
RETURN node expression: getPrintPrice(tokenId,supply + 1) (Slither line:3018)
Checking function: getSellPrice (Slither line:2978)
getSellPrice returns uint256 variable  (Slither line:2998)
RETURN node expression: getPrintPrice(tokenId,supply).mul(90).div(100) (Slither line:3018)
Checking function: getPrintPrice (Slither line:2978)
getPrintPrice returns uint256 variable  (Slither line:2998)
RETURN node expression: price (Slither line:3018)
Checking function: createToken (Slither line:2978)
Checking function: updateTokenData (Slither line:2978)
Checking function: setTokenOnSaleDate (Slither line:2978)
Checking function: buyNFTwithGAME (Slither line:2978)
Checking function: buyNFTwithMatic (Slither line:2978)
Checking function: buyNFTwithERC20 (Slither line:2978)
Checking function: burn (Slither line:2978)
Checking function: _buyNFT (Slither line:2978)
Checking function: slitherConstructorVariables (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End BondedNFT.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in BondedNFT (Slither line:1305)

Begin iERC20.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End iERC20.find_getter_in_contract (Slither line:3073)


Begin iERC20.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: totalSupply() returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOf(address) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: transfer(address,uint256) returns(bool) (Slither line:3117)
Visibility: external
Checking function: allowance(address,address) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: approve(address,uint256) returns(bool) (Slither line:3117)
Visibility: external
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End iERC20.find_setter_in_contract (Slither line:3315)


Begin iGAME_ERC20.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End iGAME_ERC20.find_getter_in_contract (Slither line:3073)


Begin iGAME_ERC20.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: cancelAuctionByManager(uint256) returns() (Slither line:3117)
Visibility: external
Checking function: transferByContract(address,address,uint256) returns() (Slither line:3117)
Visibility: external
Checking function: linkContracts(address,address) returns() (Slither line:3117)
Visibility: external
Checking function: getGameBalance(uint256) returns(uint256) (Slither line:3117)
Visibility: public
Checking function: getLoyaltyPointsGranted(uint256,address) returns(uint256) (Slither line:3117)
Visibility: public
Checking function: getLoyaltyPointSpends(uint256,address) returns(uint256) (Slither line:3117)
Visibility: public
Checking function: getLoyaltyPointsTotal(uint256,address) returns(uint256) (Slither line:3117)
Visibility: public
Checking function: thirdPartySpendLoyaltyPoints(uint256,address,uint256) returns() (Slither line:3117)
Visibility: external
Checking function: totalSupply() returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOf(address) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: transfer(address,uint256) returns(bool) (Slither line:3117)
Visibility: external
Checking function: allowance(address,address) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: approve(address,uint256) returns(bool) (Slither line:3117)
Visibility: external
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End iGAME_ERC20.find_setter_in_contract (Slither line:3315)


Begin iGAME_Game.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End iGAME_Game.find_getter_in_contract (Slither line:3073)


Begin iGAME_Game.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: getCardPrice(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getCardLoyaltyPrice(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: isGameAdmin(uint256,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: linkContracts(address,address) returns() (Slither line:3117)
Visibility: external
Checking function: isOperatorOrMinion(uint256,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: isValidCaller(address,bool,uint256) returns(bool) (Slither line:3117)
Visibility: external
Checking function: burnToken(uint256) returns() (Slither line:3117)
Visibility: external
Checking function: createTokenFromCard(uint256,uint256,uint256) returns(uint256,uint256,uint256) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End iGAME_Game.find_setter_in_contract (Slither line:3315)


Begin iGAME_Master.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: isMaster (Slither line:2978)
isMaster returns bool variable  (Slither line:2998)
RETURN node expression: true (Slither line:3018)

End iGAME_Master.find_getter_in_contract (Slither line:3073)


Begin iGAME_Master.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: isOwner(address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: isCFO(address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: isCOO(address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: isWorker(address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: isWorkerOrMinion(address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: makeFundedCall(address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: updateCollectibleSaleStatus(uint256,uint256,bool) returns() (Slither line:3117)
Visibility: external
Checking function: isMaster() returns(bool) (Slither line:3117)
Visibility: external
true

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End iGAME_Master.find_setter_in_contract (Slither line:3315)


Begin IUniswapV2Router01.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IUniswapV2Router01.find_getter_in_contract (Slither line:3073)


Begin IUniswapV2Router01.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: factory() returns(address) (Slither line:3117)
Visibility: external
Checking function: WETH() returns(address) (Slither line:3117)
Visibility: external
Checking function: addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256) returns(uint256,uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: addLiquidityETH(address,uint256,uint256,uint256,address,uint256) returns(uint256,uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityETH(address,uint256,uint256,uint256,address,uint256) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: swapExactTokensForTokens(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapTokensForExactTokens(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapExactETHForTokens(uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapTokensForExactETH(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapExactTokensForETH(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapETHForExactTokens(uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: quote(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getAmountOut(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getAmountIn(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getAmountsOut(uint256,address[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: getAmountsIn(uint256,address[]) returns(uint256[]) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IUniswapV2Router01.find_setter_in_contract (Slither line:3315)


Begin IUniswapV2Router02.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IUniswapV2Router02.find_getter_in_contract (Slither line:3073)


Begin IUniswapV2Router02.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256) returns() (Slither line:3117)
Visibility: external
Checking function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256) returns() (Slither line:3117)
Visibility: external
Checking function: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256) returns() (Slither line:3117)
Visibility: external
Checking function: factory() returns(address) (Slither line:3117)
Visibility: external
Checking function: WETH() returns(address) (Slither line:3117)
Visibility: external
Checking function: addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256) returns(uint256,uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: addLiquidityETH(address,uint256,uint256,uint256,address,uint256) returns(uint256,uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityETH(address,uint256,uint256,uint256,address,uint256) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32) returns(uint256,uint256) (Slither line:3117)
Visibility: external
Checking function: swapExactTokensForTokens(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapTokensForExactTokens(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapExactETHForTokens(uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapTokensForExactETH(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapExactTokensForETH(uint256,uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: swapETHForExactTokens(uint256,address[],address,uint256) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: quote(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getAmountOut(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getAmountIn(uint256,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: getAmountsOut(uint256,address[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: getAmountsIn(uint256,address[]) returns(uint256[]) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IUniswapV2Router02.find_setter_in_contract (Slither line:3315)


Begin IDiamondCut.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IDiamondCut.find_getter_in_contract (Slither line:3073)


Begin IDiamondCut.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: diamondCut(IDiamondCut.FacetCut[],address,bytes) returns() (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IDiamondCut.find_setter_in_contract (Slither line:3315)


Begin IDiamondLoupe.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IDiamondLoupe.find_getter_in_contract (Slither line:3073)


Begin IDiamondLoupe.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: facets() returns(IDiamondLoupe.Facet[]) (Slither line:3117)
Visibility: external
Checking function: facetFunctionSelectors(address) returns(bytes4[]) (Slither line:3117)
Visibility: external
Checking function: facetAddresses() returns(address[]) (Slither line:3117)
Visibility: external
Checking function: facetAddress(bytes4) returns(address) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IDiamondLoupe.find_setter_in_contract (Slither line:3315)


Begin IERC173.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IERC173.find_getter_in_contract (Slither line:3073)


Begin IERC173.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: owner() returns(address) (Slither line:3117)
Visibility: external
Checking function: transferOwnership(address) returns() (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IERC173.find_setter_in_contract (Slither line:3315)


Begin LibDiamond.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: diamondStorage (Slither line:2978)
diamondStorage returns LibDiamond.DiamondStorage variable called ds (Slither line:2998)
Checking function: diamondCut (Slither line:2978)
Checking function: addFunctions (Slither line:2978)
Checking function: replaceFunctions (Slither line:2978)
Checking function: removeFunctions (Slither line:2978)
Checking function: removeFunction (Slither line:2978)
Checking function: initializeDiamondCut (Slither line:2978)
Checking function: enforceHasContractCode (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End LibDiamond.find_getter_in_contract (Slither line:3073)


Begin LibDiamond.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: diamondStorage() returns(LibDiamond.DiamondStorage) (Slither line:3117)
Visibility: internal
Checking function: diamondCut(IDiamondCut.FacetCut[],address,bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: addFunctions(address,bytes4[]) returns() (Slither line:3117)
Visibility: internal
Checking function: replaceFunctions(address,bytes4[]) returns() (Slither line:3117)
Visibility: internal
Checking function: removeFunctions(address,bytes4[]) returns() (Slither line:3117)
Visibility: internal
Checking function: removeFunction(address,bytes4) returns() (Slither line:3117)
Visibility: internal
Checking function: initializeDiamondCut(address,bytes) returns() (Slither line:3117)
Checking function: enforceHasContractCode(address,string) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End LibDiamond.find_setter_in_contract (Slither line:3315)


Begin Strings.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: toString (Slither line:2978)
toString returns string variable  (Slither line:2998)
RETURN node expression: string(buffer) (Slither line:3018)
RETURN node expression: 0 (Slither line:3018)

End Strings.find_getter_in_contract (Slither line:3073)


Begin Strings.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: toString(uint256) returns(string) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End Strings.find_setter_in_contract (Slither line:3315)


Begin IERC165.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IERC165.find_getter_in_contract (Slither line:3073)


Begin IERC165.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IERC165.find_setter_in_contract (Slither line:3315)


Begin IERC1155.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IERC1155.find_getter_in_contract (Slither line:3073)


Begin IERC1155.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: external
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: external
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: external
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IERC1155.find_setter_in_contract (Slither line:3315)


Begin IERC1155MetadataURI.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IERC1155MetadataURI.find_getter_in_contract (Slither line:3073)


Begin IERC1155MetadataURI.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: uri(uint256) returns(string) (Slither line:3117)
Visibility: external
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: external
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: external
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: external
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IERC1155MetadataURI.find_setter_in_contract (Slither line:3315)


Begin IERC1155Receiver.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IERC1155Receiver.find_getter_in_contract (Slither line:3073)


Begin IERC1155Receiver.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: onERC1155Received(address,address,uint256,uint256,bytes) returns(bytes4) (Slither line:3117)
Visibility: external
Checking function: onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) returns(bytes4) (Slither line:3117)
Visibility: external
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End IERC1155Receiver.find_setter_in_contract (Slither line:3315)


Begin Context.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable called sender (Slither line:2998)
RETURN node expression: sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)

End Context.find_getter_in_contract (Slither line:3073)


Begin Context.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: _msgSender() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End Context.find_setter_in_contract (Slither line:3315)


Begin ERC165.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: supportsInterface (Slither line:2978)
supportsInterface returns bool variable  (Slither line:2998)
RETURN node expression: _supportedInterfaces[interfaceId] (Slither line:3018)
Checking function: _registerInterface (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End ERC165.find_getter_in_contract (Slither line:3073)


Begin ERC165.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: public
_supportedInterfaces[interfaceId]
Checking function: _registerInterface(bytes4) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external

Begin DiamondCut corner case handling (Slither line:3277)

Expression: _supportedInterfaces[interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _registerInterface(_INTERFACE_ID_ERC165) (Slither line:3284)
_registerInterface
Expression: require(bool,string)(interfaceId != 0xffffffff,ERC165: invalid interface id) (Slither line:3284)
require(bool,string)

End DiamondCut corner case handling (Slither line:3313)


End ERC165.find_setter_in_contract (Slither line:3315)


Begin SafeMath.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: add (Slither line:2978)
add returns uint256 variable  (Slither line:2998)
RETURN node expression: c (Slither line:3018)
Checking function: sub (Slither line:2978)
sub returns uint256 variable  (Slither line:2998)
RETURN node expression: sub(a,b,SafeMath: subtraction overflow) (Slither line:3018)
Checking function: sub (Slither line:2978)
sub returns uint256 variable  (Slither line:2998)
RETURN node expression: c (Slither line:3018)
Checking function: mul (Slither line:2978)
mul returns uint256 variable  (Slither line:2998)
RETURN node expression: 0 (Slither line:3018)
RETURN node expression: c (Slither line:3018)
Checking function: div (Slither line:2978)
div returns uint256 variable  (Slither line:2998)
RETURN node expression: div(a,b,SafeMath: division by zero) (Slither line:3018)
Checking function: div (Slither line:2978)
div returns uint256 variable  (Slither line:2998)
RETURN node expression: c (Slither line:3018)
Checking function: mod (Slither line:2978)
mod returns uint256 variable  (Slither line:2998)
RETURN node expression: mod(a,b,SafeMath: modulo by zero) (Slither line:3018)
Checking function: mod (Slither line:2978)
mod returns uint256 variable  (Slither line:2998)
RETURN node expression: a % b (Slither line:3018)

End SafeMath.find_getter_in_contract (Slither line:3073)


Begin SafeMath.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: add(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: sub(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: sub(uint256,uint256,string) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: mul(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: div(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: div(uint256,uint256,string) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: mod(uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: mod(uint256,uint256,string) returns(uint256) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End SafeMath.find_setter_in_contract (Slither line:3315)


Begin Address.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: isContract (Slither line:2978)
isContract returns bool variable  (Slither line:2998)
RETURN node expression: size > 0 (Slither line:3018)
Checking function: sendValue (Slither line:2978)
Checking function: functionCall (Slither line:2978)
functionCall returns bytes variable  (Slither line:2998)
RETURN node expression: functionCall(target,data,Address: low-level call failed) (Slither line:3018)
Checking function: functionCall (Slither line:2978)
functionCall returns bytes variable  (Slither line:2998)
RETURN node expression: functionCallWithValue(target,data,0,errorMessage) (Slither line:3018)
Checking function: functionCallWithValue (Slither line:2978)
functionCallWithValue returns bytes variable  (Slither line:2998)
RETURN node expression: functionCallWithValue(target,data,value,Address: low-level call with value failed) (Slither line:3018)
Checking function: functionCallWithValue (Slither line:2978)
functionCallWithValue returns bytes variable  (Slither line:2998)
RETURN node expression: _verifyCallResult(success,returndata,errorMessage) (Slither line:3018)
Checking function: functionStaticCall (Slither line:2978)
functionStaticCall returns bytes variable  (Slither line:2998)
RETURN node expression: functionStaticCall(target,data,Address: low-level static call failed) (Slither line:3018)
Checking function: functionStaticCall (Slither line:2978)
functionStaticCall returns bytes variable  (Slither line:2998)
RETURN node expression: _verifyCallResult(success,returndata,errorMessage) (Slither line:3018)
Checking function: _verifyCallResult (Slither line:2978)
_verifyCallResult returns bytes variable  (Slither line:2998)
RETURN node expression: returndata (Slither line:3018)

End Address.find_getter_in_contract (Slither line:3073)


Begin Address.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: isContract(address) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: sendValue(address,uint256) returns() (Slither line:3117)
Visibility: internal
Checking function: functionCall(address,bytes) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: functionCall(address,bytes,string) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: functionCallWithValue(address,bytes,uint256) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: functionCallWithValue(address,bytes,uint256,string) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: functionStaticCall(address,bytes) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: functionStaticCall(address,bytes,string) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: _verifyCallResult(bool,bytes,string) returns(bytes) (Slither line:3117)
Visibility: private

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End Address.find_setter_in_contract (Slither line:3315)


Begin ERC1155.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: supportsInterface (Slither line:2978)
supportsInterface returns bool variable  (Slither line:2998)
RETURN node expression: _supportedInterfaces[interfaceId] (Slither line:3018)
Checking function: _registerInterface (Slither line:2978)
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable called sender (Slither line:2998)
RETURN node expression: sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: balanceOf (Slither line:2978)
balanceOf returns uint256 variable  (Slither line:2998)
RETURN node expression: _balances[id][account] (Slither line:3018)
Checking function: hasMinted (Slither line:2978)
hasMinted returns bool variable  (Slither line:2998)
RETURN node expression: _minted[id] (Slither line:3018)
Checking function: balanceOfBatch (Slither line:2978)
balanceOfBatch returns uint256[] variable  (Slither line:2998)
RETURN node expression: batchBalances (Slither line:3018)
Checking function: setApprovalForAll (Slither line:2978)
Checking function: isApprovedForAll (Slither line:2978)
isApprovedForAll returns bool variable  (Slither line:2998)
RETURN node expression: _operatorApprovals[account][operator] (Slither line:3018)
Checking function: safeTransferFrom (Slither line:2978)
Checking function: safeBatchTransferFrom (Slither line:2978)
Checking function: _setURI (Slither line:2978)
Checking function: getURI (Slither line:2978)
getURI returns string variable  (Slither line:2998)
RETURN node expression: _uri (Slither line:3018)
Checking function: _mint (Slither line:2978)
Checking function: _mintBatch (Slither line:2978)
Checking function: _burn (Slither line:2978)
Checking function: _burnBatch (Slither line:2978)
Checking function: _beforeTokenTransfer (Slither line:2978)
Checking function: _doSafeTransferAcceptanceCheck (Slither line:2978)
Checking function: _doSafeBatchTransferAcceptanceCheck (Slither line:2978)
Checking function: _asSingletonArray (Slither line:2978)
_asSingletonArray returns uint256[] variable  (Slither line:2998)
RETURN node expression: array (Slither line:3018)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End ERC1155.find_getter_in_contract (Slither line:3073)


Begin ERC1155.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: public
require(bool,string)(account != address(0),ERC1155: balance query for the zero address)
_balances[id][account]
Checking function: hasMinted(uint256) returns(bool) (Slither line:3117)
Visibility: public
_minted[id]
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: public
batchBalances
++ i
require(bool,string)(accounts.length == ids.length,ERC1155: accounts and ids length mismatch)
require(bool,string)(accounts[i] != address(0),ERC1155: batch balance query for the zero address)
batchBalances[i] = _balances[ids[i]][accounts[i]]
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: public
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
ApprovalForAll(_msgSender(),operator,approved)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_msgSender() != operator,ERC1155: setting approval status for self)
sender
_operatorApprovals[_msgSender()][operator] = approved
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: public
_operatorApprovals[account][operator]
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: public
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
size > 0
_balances[id][to] = _balances[id][to].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
TransferSingle(operator,from,to,id,amount)
_doSafeTransferAcceptanceCheck(operator,from,to,id,amount,data)
_operatorApprovals[account][operator]
revert(string)(reason)
require(bool,string)(c >= a,SafeMath: addition overflow)
c
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
sender
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
require(bool,string)(b <= a,errorMessage)
require(bool,string)(to != address(0),ERC1155: transfer to the zero address)
require(bool,string)(from == _msgSender() || isApprovedForAll(from,_msgSender()),ERC1155: caller is not owner nor approved)
c
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_beforeTokenTransfer(operator,from,to,_asSingletonArray(id),_asSingletonArray(amount),data)
array
_balances[id][from] = _balances[id][from].sub(amount,ERC1155: insufficient balance for transfer)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: public
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
size > 0
revert(string)(reason)
++ i
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(ids.length == amounts.length,ERC1155: ids and amounts length mismatch)
_operatorApprovals[account][operator]
require(bool,string)(to != address(0),ERC1155: transfer to the zero address)
require(bool,string)(from == _msgSender() || isApprovedForAll(from,_msgSender()),ERC1155: transfer caller is not owner nor approved)
require(bool,string)(c >= a,SafeMath: addition overflow)
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
_balances[id][from] = _balances[id][from].sub(amount,ERC1155: insufficient balance for transfer)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
_balances[id][to] = _balances[id][to].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
_beforeTokenTransfer(operator,from,to,ids,amounts,data)
TransferBatch(operator,from,to,ids,amounts)
_doSafeBatchTransferAcceptanceCheck(operator,from,to,ids,amounts,data)
require(bool,string)(b <= a,errorMessage)
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
c
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: _setURI(string) returns() (Slither line:3117)
Visibility: internal
Checking function: getURI() returns(string) (Slither line:3117)
Visibility: internal
Checking function: _mint(address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _mintBatch(address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _burn(address,uint256,uint256) returns() (Slither line:3117)
Visibility: internal
Checking function: _burnBatch(address,uint256[],uint256[]) returns() (Slither line:3117)
Visibility: internal
Checking function: _beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: private
Checking function: _doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: private
Checking function: _asSingletonArray(uint256) returns(uint256[]) (Slither line:3117)
Visibility: private
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: external
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: external
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: external
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external
Checking function: constructor() returns() (Slither line:3117)
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: public
_supportedInterfaces[interfaceId]
Checking function: _registerInterface(bytes4) returns() (Slither line:3117)
Visibility: internal
Checking function: _msgSender() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)

Expression: _supportedInterfaces[interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _registerInterface(_INTERFACE_ID_ERC1155) (Slither line:3284)
_registerInterface
Expression: _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI) (Slither line:3284)
_registerInterface
Expression: require(bool,string)(interfaceId != 0xffffffff,ERC165: invalid interface id) (Slither line:3284)
require(bool,string)

End DiamondCut corner case handling (Slither line:3313)


End ERC1155.find_setter_in_contract (Slither line:3315)


Begin EnumerableSet.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: _add (Slither line:2978)
_add returns bool variable  (Slither line:2998)
RETURN node expression: false (Slither line:3018)
RETURN node expression: true (Slither line:3018)
Checking function: _remove (Slither line:2978)
_remove returns bool variable  (Slither line:2998)
RETURN node expression: true (Slither line:3018)
RETURN node expression: false (Slither line:3018)
Checking function: _contains (Slither line:2978)
_contains returns bool variable  (Slither line:2998)
RETURN node expression: set._indexes[value] != 0 (Slither line:3018)
Checking function: _length (Slither line:2978)
_length returns uint256 variable  (Slither line:2998)
RETURN node expression: set._values.length (Slither line:3018)
Checking function: _at (Slither line:2978)
_at returns bytes32 variable  (Slither line:2998)
RETURN node expression: set._values[index] (Slither line:3018)
Checking function: add (Slither line:2978)
add returns bool variable  (Slither line:2998)
RETURN node expression: _add(set._inner,value) (Slither line:3018)
Checking function: remove (Slither line:2978)
remove returns bool variable  (Slither line:2998)
RETURN node expression: _remove(set._inner,value) (Slither line:3018)
Checking function: contains (Slither line:2978)
contains returns bool variable  (Slither line:2998)
RETURN node expression: _contains(set._inner,value) (Slither line:3018)
Checking function: length (Slither line:2978)
length returns uint256 variable  (Slither line:2998)
RETURN node expression: _length(set._inner) (Slither line:3018)
Checking function: at (Slither line:2978)
at returns bytes32 variable  (Slither line:2998)
RETURN node expression: _at(set._inner,index) (Slither line:3018)
Checking function: add (Slither line:2978)
add returns bool variable  (Slither line:2998)
RETURN node expression: _add(set._inner,bytes32(uint256(value))) (Slither line:3018)
Checking function: remove (Slither line:2978)
remove returns bool variable  (Slither line:2998)
RETURN node expression: _remove(set._inner,bytes32(uint256(value))) (Slither line:3018)
Checking function: contains (Slither line:2978)
contains returns bool variable  (Slither line:2998)
RETURN node expression: _contains(set._inner,bytes32(uint256(value))) (Slither line:3018)
Checking function: length (Slither line:2978)
length returns uint256 variable  (Slither line:2998)
RETURN node expression: _length(set._inner) (Slither line:3018)
Checking function: at (Slither line:2978)
at returns address variable  (Slither line:2998)
RETURN node expression: address(uint256(_at(set._inner,index))) (Slither line:3018)
Checking function: add (Slither line:2978)
add returns bool variable  (Slither line:2998)
RETURN node expression: _add(set._inner,bytes32(value)) (Slither line:3018)
Checking function: remove (Slither line:2978)
remove returns bool variable  (Slither line:2998)
RETURN node expression: _remove(set._inner,bytes32(value)) (Slither line:3018)
Checking function: contains (Slither line:2978)
contains returns bool variable  (Slither line:2998)
RETURN node expression: _contains(set._inner,bytes32(value)) (Slither line:3018)
Checking function: length (Slither line:2978)
length returns uint256 variable  (Slither line:2998)
RETURN node expression: _length(set._inner) (Slither line:3018)
Checking function: at (Slither line:2978)
at returns uint256 variable  (Slither line:2998)
RETURN node expression: uint256(_at(set._inner,index)) (Slither line:3018)

End EnumerableSet.find_getter_in_contract (Slither line:3073)


Begin EnumerableSet.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: _add(EnumerableSet.Set,bytes32) returns(bool) (Slither line:3117)
Visibility: private
Checking function: _remove(EnumerableSet.Set,bytes32) returns(bool) (Slither line:3117)
Visibility: private
Checking function: _contains(EnumerableSet.Set,bytes32) returns(bool) (Slither line:3117)
Visibility: private
Checking function: _length(EnumerableSet.Set) returns(uint256) (Slither line:3117)
Visibility: private
Checking function: _at(EnumerableSet.Set,uint256) returns(bytes32) (Slither line:3117)
Visibility: private
Checking function: add(EnumerableSet.Bytes32Set,bytes32) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: remove(EnumerableSet.Bytes32Set,bytes32) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: contains(EnumerableSet.Bytes32Set,bytes32) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: length(EnumerableSet.Bytes32Set) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: at(EnumerableSet.Bytes32Set,uint256) returns(bytes32) (Slither line:3117)
Visibility: internal
Checking function: add(EnumerableSet.AddressSet,address) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: remove(EnumerableSet.AddressSet,address) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: contains(EnumerableSet.AddressSet,address) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: length(EnumerableSet.AddressSet) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: at(EnumerableSet.AddressSet,uint256) returns(address) (Slither line:3117)
Visibility: internal
Checking function: add(EnumerableSet.UintSet,uint256) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: remove(EnumerableSet.UintSet,uint256) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: contains(EnumerableSet.UintSet,uint256) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: length(EnumerableSet.UintSet) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: at(EnumerableSet.UintSet,uint256) returns(uint256) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End EnumerableSet.find_setter_in_contract (Slither line:3315)


Begin AccessControl.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable called sender (Slither line:2998)
RETURN node expression: sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)
Checking function: hasRole (Slither line:2978)
hasRole returns bool variable  (Slither line:2998)
RETURN node expression: _roles[role].members.contains(account) (Slither line:3018)
Checking function: getRoleMemberCount (Slither line:2978)
getRoleMemberCount returns uint256 variable  (Slither line:2998)
RETURN node expression: _roles[role].members.length() (Slither line:3018)
Checking function: getRoleMember (Slither line:2978)
getRoleMember returns address variable  (Slither line:2998)
RETURN node expression: _roles[role].members.at(index) (Slither line:3018)
Checking function: getRoleAdmin (Slither line:2978)
getRoleAdmin returns bytes32 variable  (Slither line:2998)
RETURN node expression: _roles[role].adminRole (Slither line:3018)
Checking function: grantRole (Slither line:2978)
Checking function: revokeRole (Slither line:2978)
Checking function: renounceRole (Slither line:2978)
Checking function: _setupRole (Slither line:2978)
Checking function: _setRoleAdmin (Slither line:2978)
Checking function: _grantRole (Slither line:2978)
Checking function: _revokeRole (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End AccessControl.find_getter_in_contract (Slither line:3073)


Begin AccessControl.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3117)
Visibility: public
_contains(set._inner,bytes32(uint256(value)))
_roles[role].members.contains(account)
set._indexes[value] != 0
Checking function: getRoleMemberCount(bytes32) returns(uint256) (Slither line:3117)
Visibility: public
_roles[role].members.length()
_length(set._inner)
set._values.length
Checking function: getRoleMember(bytes32,uint256) returns(address) (Slither line:3117)
Visibility: public
set._values[index]
address(uint256(_at(set._inner,index)))
require(bool,string)(set._values.length > index,EnumerableSet: index out of bounds)
_roles[role].members.at(index)
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3117)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
false
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to grant)
_grantRole(role,account)
_roles[role].members.contains(account)
RoleGranted(role,account,_msgSender())
set._indexes[value] != 0
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.push(value)
set._indexes[value] = set._values.length
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_contains(set._inner,bytes32(uint256(value)))
_add(set._inner,bytes32(uint256(value)))
true
sender
Checking function: revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
_remove(set._inner,bytes32(uint256(value)))
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to revoke)
RoleRevoked(role,account,_msgSender())
_revokeRole(role,account)
_roles[role].members.contains(account)
set._indexes[value] != 0
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
delete set._indexes[value]
true
_contains(set._inner,bytes32(uint256(value)))
false
sender
Checking function: renounceRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_remove(set._inner,bytes32(uint256(value)))
RoleRevoked(role,account,_msgSender())
_revokeRole(role,account)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
delete set._indexes[value]
true
false
sender
Checking function: _setupRole(bytes32,address) returns() (Slither line:3117)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3117)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: _msgSender() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)


End DiamondCut corner case handling (Slither line:3313)


End AccessControl.find_setter_in_contract (Slither line:3315)


Begin Admin.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: hasRole (Slither line:2978)
hasRole returns bool variable  (Slither line:2998)
RETURN node expression: _roles[role].members.contains(account) (Slither line:3018)
Checking function: getRoleMemberCount (Slither line:2978)
getRoleMemberCount returns uint256 variable  (Slither line:2998)
RETURN node expression: _roles[role].members.length() (Slither line:3018)
Checking function: getRoleMember (Slither line:2978)
getRoleMember returns address variable  (Slither line:2998)
RETURN node expression: _roles[role].members.at(index) (Slither line:3018)
Checking function: getRoleAdmin (Slither line:2978)
getRoleAdmin returns bytes32 variable  (Slither line:2998)
RETURN node expression: _roles[role].adminRole (Slither line:3018)
Checking function: grantRole (Slither line:2978)
Checking function: revokeRole (Slither line:2978)
Checking function: renounceRole (Slither line:2978)
Checking function: _setupRole (Slither line:2978)
Checking function: _setRoleAdmin (Slither line:2978)
Checking function: _grantRole (Slither line:2978)
Checking function: _revokeRole (Slither line:2978)
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable called sender (Slither line:2998)
RETURN node expression: sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End Admin.find_getter_in_contract (Slither line:3073)


Begin Admin.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
_contains(set._inner,bytes32(uint256(value)))
set._indexes[value] != 0
Checking function: getRoleMemberCount(bytes32) returns(uint256) (Slither line:3117)
Visibility: public
_length(set._inner)
set._values.length
_roles[role].members.length()
Checking function: getRoleMember(bytes32,uint256) returns(address) (Slither line:3117)
Visibility: public
set._values[index]
_roles[role].members.at(index)
address(uint256(_at(set._inner,index)))
require(bool,string)(set._values.length > index,EnumerableSet: index out of bounds)
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3117)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
false
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[value] != 0
sender
set._values.push(value)
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to grant)
set._indexes[value] = set._values.length
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_grantRole(role,account)
_contains(set._inner,bytes32(uint256(value)))
RoleGranted(role,account,_msgSender())
_add(set._inner,bytes32(uint256(value)))
true
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_remove(set._inner,bytes32(uint256(value)))
set._indexes[value] != 0
sender
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to revoke)
RoleRevoked(role,account,_msgSender())
delete set._indexes[value]
_revokeRole(role,account)
true
_contains(set._inner,bytes32(uint256(value)))
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
false
Checking function: renounceRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_remove(set._inner,bytes32(uint256(value)))
sender
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
set._values.pop()
RoleRevoked(role,account,_msgSender())
_revokeRole(role,account)
delete set._indexes[value]
true
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
false
Checking function: _setupRole(bytes32,address) returns() (Slither line:3117)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3117)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _msgSender() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)

Expression: sender = msg.sender (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _setupRole(DEFAULT_ADMIN_ROLE,_msgSender()) (Slither line:3284)
_setupRole
Expression: _grantRole(role,account) (Slither line:3284)
_grantRole
Expression: _setupRole(METADATA_ADMIN,_msgSender()) (Slither line:3284)
_setupRole
Expression: set._values.push(value) (Slither line:3284)
set._values.push
Expression: set._indexes[value] = set._values.length (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: RoleGranted(role,account,_msgSender()) (Slither line:3284)
RoleGranted
Expression: sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff (Slither line:3284)
Expression type: = (Slither line:3286)

End DiamondCut corner case handling (Slither line:3313)


End Admin.find_setter_in_contract (Slither line:3315)


Begin NFTbase.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: hasRole (Slither line:2978)
hasRole returns bool variable  (Slither line:2998)
RETURN node expression: _roles[role].members.contains(account) (Slither line:3018)
Checking function: getRoleMemberCount (Slither line:2978)
getRoleMemberCount returns uint256 variable  (Slither line:2998)
RETURN node expression: _roles[role].members.length() (Slither line:3018)
Checking function: getRoleMember (Slither line:2978)
getRoleMember returns address variable  (Slither line:2998)
RETURN node expression: _roles[role].members.at(index) (Slither line:3018)
Checking function: getRoleAdmin (Slither line:2978)
getRoleAdmin returns bytes32 variable  (Slither line:2998)
RETURN node expression: _roles[role].adminRole (Slither line:3018)
Checking function: grantRole (Slither line:2978)
Checking function: revokeRole (Slither line:2978)
Checking function: renounceRole (Slither line:2978)
Checking function: _setupRole (Slither line:2978)
Checking function: _setRoleAdmin (Slither line:2978)
Checking function: _grantRole (Slither line:2978)
Checking function: _revokeRole (Slither line:2978)
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable called sender (Slither line:2998)
RETURN node expression: sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: balanceOf (Slither line:2978)
balanceOf returns uint256 variable  (Slither line:2998)
RETURN node expression: _balances[id][account] (Slither line:3018)
Checking function: hasMinted (Slither line:2978)
hasMinted returns bool variable  (Slither line:2998)
RETURN node expression: _minted[id] (Slither line:3018)
Checking function: balanceOfBatch (Slither line:2978)
balanceOfBatch returns uint256[] variable  (Slither line:2998)
RETURN node expression: batchBalances (Slither line:3018)
Checking function: setApprovalForAll (Slither line:2978)
Checking function: isApprovedForAll (Slither line:2978)
isApprovedForAll returns bool variable  (Slither line:2998)
RETURN node expression: _operatorApprovals[account][operator] (Slither line:3018)
Checking function: safeTransferFrom (Slither line:2978)
Checking function: safeBatchTransferFrom (Slither line:2978)
Checking function: _setURI (Slither line:2978)
Checking function: getURI (Slither line:2978)
getURI returns string variable  (Slither line:2998)
RETURN node expression: _uri (Slither line:3018)
Checking function: _mint (Slither line:2978)
Checking function: _mintBatch (Slither line:2978)
Checking function: _burn (Slither line:2978)
Checking function: _burnBatch (Slither line:2978)
Checking function: _beforeTokenTransfer (Slither line:2978)
Checking function: _doSafeTransferAcceptanceCheck (Slither line:2978)
Checking function: _doSafeBatchTransferAcceptanceCheck (Slither line:2978)
Checking function: _asSingletonArray (Slither line:2978)
_asSingletonArray returns uint256[] variable  (Slither line:2998)
RETURN node expression: array (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: supportsInterface (Slither line:2978)
supportsInterface returns bool variable  (Slither line:2998)
RETURN node expression: _supportedInterfaces[interfaceId] (Slither line:3018)
Checking function: _registerInterface (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: setURI (Slither line:2978)
Checking function: setBaseURI (Slither line:2978)
Checking function: uri (Slither line:2978)
uri returns string variable  (Slither line:2998)
RETURN node expression: string(abi.encodePacked(_baseURI,tokenid.toString())) (Slither line:3018)
RETURN node expression: string(abi.encodePacked(_baseURI,_tokenURI)) (Slither line:3018)
RETURN node expression: _tokenURI (Slither line:3018)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End NFTbase.find_getter_in_contract (Slither line:3073)


Begin NFTbase.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor(string) returns() (Slither line:3117)
Checking function: setURI(string,uint256) returns() (Slither line:3117)
Visibility: public
sender
set._indexes[value] != 0
_tokenURIs[id] = newuri
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
isMetadataAdmin()
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_contains(set._inner,bytes32(uint256(value)))
require(bool)(hasRole(METADATA_ADMIN,_msgSender()))
Checking function: setBaseURI(string) returns() (Slither line:3117)
Visibility: public
_baseURI = newuri
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
isMetadataAdmin()
set._indexes[value] != 0
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_contains(set._inner,bytes32(uint256(value)))
require(bool)(hasRole(METADATA_ADMIN,_msgSender()))
Checking function: uri(uint256) returns(string) (Slither line:3117)
Visibility: public
string(buffer)
string(abi.encodePacked(_baseURI,tokenid.toString()))
buffer[index --] = bytes1(uint8(48 + temp % 10))
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
string(abi.encodePacked(_baseURI,_tokenURI))
temp /= 10
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
digits ++
temp /= 10
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
temp = value
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
0
_tokenURI
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor() returns() (Slither line:3117)
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3117)
Visibility: public
_contains(set._inner,bytes32(uint256(value)))
set._indexes[value] != 0
_roles[role].members.contains(account)
Checking function: getRoleMemberCount(bytes32) returns(uint256) (Slither line:3117)
Visibility: public
_length(set._inner)
set._values.length
_roles[role].members.length()
Checking function: getRoleMember(bytes32,uint256) returns(address) (Slither line:3117)
Visibility: public
set._values[index]
_roles[role].members.at(index)
address(uint256(_at(set._inner,index)))
require(bool,string)(set._values.length > index,EnumerableSet: index out of bounds)
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3117)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
false
sender
set._indexes[value] != 0
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to grant)
_grantRole(role,account)
RoleGranted(role,account,_msgSender())
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.push(value)
_roles[role].members.contains(account)
set._indexes[value] = set._values.length
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_contains(set._inner,bytes32(uint256(value)))
_add(set._inner,bytes32(uint256(value)))
true
Checking function: revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
_remove(set._inner,bytes32(uint256(value)))
sender
set._indexes[value] != 0
require(bool,string)(hasRole(_roles[role].adminRole,_msgSender()),AccessControl: sender must be an admin to revoke)
RoleRevoked(role,account,_msgSender())
_revokeRole(role,account)
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
delete set._indexes[value]
_roles[role].members.contains(account)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
true
_contains(set._inner,bytes32(uint256(value)))
false
Checking function: renounceRole(bytes32,address) returns() (Slither line:3117)
Visibility: public
_remove(set._inner,bytes32(uint256(value)))
sender
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_revokeRole(role,account)
RoleRevoked(role,account,_msgSender())
set._values[toDeleteIndex] = lastvalue
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._indexes[lastvalue] = toDeleteIndex + 1
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
set._values.pop()
delete set._indexes[value]
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
true
false
Checking function: _setupRole(bytes32,address) returns() (Slither line:3117)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3117)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3117)
Visibility: private
Checking function: _msgSender() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: constructor() returns() (Slither line:3117)
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: public
require(bool,string)(account != address(0),ERC1155: balance query for the zero address)
_balances[id][account]
Checking function: hasMinted(uint256) returns(bool) (Slither line:3117)
Visibility: public
_minted[id]
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: public
++ i
require(bool,string)(accounts.length == ids.length,ERC1155: accounts and ids length mismatch)
require(bool,string)(accounts[i] != address(0),ERC1155: batch balance query for the zero address)
batchBalances[i] = _balances[ids[i]][accounts[i]]
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
batchBalances
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: public
sender
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(_msgSender() != operator,ERC1155: setting approval status for self)
_operatorApprovals[_msgSender()][operator] = approved
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
ApprovalForAll(_msgSender(),operator,approved)
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: public
_operatorApprovals[account][operator]
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: public
require(bool,string)(to != address(0),ERC1155: transfer to the zero address)
size > 0
require(bool,string)(from == _msgSender() || isApprovedForAll(from,_msgSender()),ERC1155: caller is not owner nor approved)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender
_beforeTokenTransfer(operator,from,to,_asSingletonArray(id),_asSingletonArray(amount),data)
array[0] = element
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(c >= a,SafeMath: addition overflow)
_balances[id][from] = _balances[id][from].sub(amount,ERC1155: insufficient balance for transfer)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
array
c
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
_balances[id][to] = _balances[id][to].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
TransferSingle(operator,from,to,id,amount)
_doSafeTransferAcceptanceCheck(operator,from,to,id,amount,data)
_operatorApprovals[account][operator]
require(bool,string)(b <= a,errorMessage)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(reason)
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: public
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
revert(string)(ERC1155: ERC1155Receiver rejected tokens)
sender
require(bool,string)(c >= a,SafeMath: addition overflow)
c
++ i
revert(string)(reason)
require(bool,string)(ids.length == amounts.length,ERC1155: ids and amounts length mismatch)
_operatorApprovals[account][operator]
require(bool,string)(to != address(0),ERC1155: transfer to the zero address)
require(bool,string)(b <= a,errorMessage)
sender = mload(uint256)(array + index) & 0xffffffffffffffffffffffffffffffffffffffff
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
require(bool,string)(from == _msgSender() || isApprovedForAll(from,_msgSender()),ERC1155: transfer caller is not owner nor approved)
revert(string)(ERC1155: transfer to non ERC1155Receiver implementer)
_balances[id][from] = _balances[id][from].sub(amount,ERC1155: insufficient balance for transfer)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
sender = msg.sender
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
_balances[id][to] = _balances[id][to].add(amount)
is an Assignment Operation (Slither line:3206)
ds.selectorToFacetAndPosition[msg.sig].facetAddress
c
_beforeTokenTransfer(operator,from,to,ids,amounts,data)
TransferBatch(operator,from,to,ids,amounts)
_doSafeBatchTransferAcceptanceCheck(operator,from,to,ids,amounts,data)
Checking function: _setURI(string) returns() (Slither line:3117)
Visibility: internal
Checking function: getURI() returns(string) (Slither line:3117)
Visibility: internal
Checking function: _mint(address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _mintBatch(address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _burn(address,uint256,uint256) returns() (Slither line:3117)
Visibility: internal
Checking function: _burnBatch(address,uint256[],uint256[]) returns() (Slither line:3117)
Visibility: internal
Checking function: _beforeTokenTransfer(address,address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: internal
Checking function: _doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: private
Checking function: _doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: private
Checking function: _asSingletonArray(uint256) returns(uint256[]) (Slither line:3117)
Visibility: private
Checking function: balanceOf(address,uint256) returns(uint256) (Slither line:3117)
Visibility: external
Checking function: balanceOfBatch(address[],uint256[]) returns(uint256[]) (Slither line:3117)
Visibility: external
Checking function: setApprovalForAll(address,bool) returns() (Slither line:3117)
Visibility: external
Checking function: isApprovedForAll(address,address) returns(bool) (Slither line:3117)
Visibility: external
Checking function: safeTransferFrom(address,address,uint256,uint256,bytes) returns() (Slither line:3117)
Visibility: external
Checking function: safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) returns() (Slither line:3117)
Visibility: external
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: external
Checking function: constructor() returns() (Slither line:3117)
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3117)
Visibility: public
_supportedInterfaces[interfaceId]
Checking function: _registerInterface(bytes4) returns() (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)

Expression: _supportedInterfaces[interfaceId] = true (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: _registerInterface(_INTERFACE_ID_ERC1155) (Slither line:3284)
_registerInterface
Expression: _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI) (Slither line:3284)
_registerInterface
Expression: ERC1155() (Slither line:3284)
ERC1155
Expression: _baseURI = uri (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: require(bool,string)(interfaceId != 0xffffffff,ERC165: invalid interface id) (Slither line:3284)
require(bool,string)

End DiamondCut corner case handling (Slither line:3313)


End NFTbase.find_setter_in_contract (Slither line:3315)


Begin ReentrancyGuard.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End ReentrancyGuard.find_getter_in_contract (Slither line:3073)


Begin ReentrancyGuard.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal

Begin DiamondCut corner case handling (Slither line:3277)

Expression: _status = _NOT_ENTERED (Slither line:3284)
Expression type: = (Slither line:3286)

End DiamondCut corner case handling (Slither line:3313)


End ReentrancyGuard.find_setter_in_contract (Slither line:3315)


End BondedNFT.is_upgradeable_proxy (Slither line:1407)

