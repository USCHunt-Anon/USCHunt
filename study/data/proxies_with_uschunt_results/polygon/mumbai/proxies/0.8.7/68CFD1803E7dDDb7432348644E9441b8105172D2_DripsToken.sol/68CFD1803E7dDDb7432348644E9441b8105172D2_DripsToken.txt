
Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin IBeacon.is_proxy (Slither line:1425)


End IBeacon.is_proxy (Slither line:1428)


Begin IBeacon.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBeacon 

End IBeacon.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin StorageSlot.is_proxy (Slither line:1425)


End StorageSlot.is_proxy (Slither line:1428)


Begin StorageSlot.is_upgradeable_proxy (Slither line:1136)

Checking contract: StorageSlot 

End StorageSlot.is_upgradeable_proxy (Slither line:1407)


Begin ERC1967Upgrade.is_proxy (Slither line:1425)


End ERC1967Upgrade.is_proxy (Slither line:1428)


Begin ERC1967Upgrade.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC1967Upgrade 

End ERC1967Upgrade.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: _beforeFallback() (Slither line:2792)
Expression called: _beforeFallback
Type of call: tuple() (Slither line:2807)
Args:

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2792)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
returndatasize()()

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: result__delegate_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0) (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2807)
Args:
gas()()
implementation
0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2814)

Destination is implementation (Slither line:2818)
dest.value: implementation (Slither line:2821)
Expression: None (Slither line:2826)

Begin Proxy.find_delegate_variable_from_name
Searching for implementation (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking implementation (Slither line:1800)
implementation is a Parameter in Proxy._delegate (Slither line:1805)
CallExpression: _beforeFallback() (Slither line:1819)
CallExpression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:1819)
AssignmentOperation: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0) (Slither line:1811)
CallExpression: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0) (Slither line:1819)
CallExpression: revert(uint256,uint256)(0,returndatasize()()) (Slither line:1819)
CallExpression: _fallback() (Slither line:1819)
AssignmentOperation: result__delegate_asm_0 (Slither line:1811)
CallExpression: return(uint256,uint256)(0,returndatasize()()) (Slither line:1819)
CallExpression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()()) (Slither line:1819)
CallExpression: _delegate(_implementation()) (Slither line:1819)
Found where _delegate is called: _delegate(_implementation()) (Slither line:1832)
The value passed to parameter #0 is _implementation() (Slither line:1835)

Begin Proxy.find_delegate_from_call_exp

_implementation() (Slither line:1993)
called = _implementation (Slither line:2000)
Got abstract function, looking for overriding function (Slither line:2015)
Failure (Slither line:2023)
_implementation returns a variable of type address   (Slither line:2183)
Return value is LocalVariable:  (Slither line:2256)
has no expression (Slither line:2316)

End Proxy.find_delegate_from_call_exp (Slither line:2318)

_delegate contains assembly, searching for sload (Slither line:1875)

End Proxy.find_delegate_variable_from_name (Slither line:1939)


End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'implementation'
Looking for corresponding Variable
Current function: _delegate

Begin Proxy.find_delegate_variable_from_name
Searching for implementation (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking implementation (Slither line:1800)
implementation is a Parameter in Proxy._delegate (Slither line:1805)
CallExpression: _beforeFallback() (Slither line:1819)
CallExpression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:1819)
AssignmentOperation: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0) (Slither line:1811)
CallExpression: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0) (Slither line:1819)
CallExpression: revert(uint256,uint256)(0,returndatasize()()) (Slither line:1819)
CallExpression: _fallback() (Slither line:1819)
AssignmentOperation: result__delegate_asm_0 (Slither line:1811)
CallExpression: return(uint256,uint256)(0,returndatasize()()) (Slither line:1819)
CallExpression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()()) (Slither line:1819)
CallExpression: _delegate(_implementation()) (Slither line:1819)
Found where _delegate is called: _delegate(_implementation()) (Slither line:1832)
The value passed to parameter #0 is _implementation() (Slither line:1835)

Begin Proxy.find_delegate_from_call_exp

_implementation() (Slither line:1993)
called = _implementation (Slither line:2000)
Got abstract function, looking for overriding function (Slither line:2015)
Failure (Slither line:2023)
_implementation returns a variable of type address   (Slither line:2183)
Return value is LocalVariable:  (Slither line:2256)
has no expression (Slither line:2316)

End Proxy.find_delegate_from_call_exp (Slither line:2318)

_delegate contains assembly, searching for sload (Slither line:1875)

End Proxy.find_delegate_variable_from_name (Slither line:1939)


End Proxy.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: _fallback() (Slither line:2792)
Expression called: _fallback
Type of call: tuple() (Slither line:2807)
Args:

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_22676_220_0__delegate_asm_0 = result__delegate_asm_0 (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()()) (Slither line:2792)
Expression called: calldatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
calldatasize()()

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: _delegate(_implementation()) (Slither line:2792)
Expression called: _delegate
Type of call: tuple() (Slither line:2807)
Args:
_implementation()

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin ERC1967Proxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ERC1967Proxy.find_delegatecall_in_asm (Slither line:1541)


End ERC1967Proxy.find_delegatecall_in_asm (Slither line:1637)


Begin ERC1967Proxy.find_delegatecall_in_asm (Slither line:1541)


End ERC1967Proxy.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ERC1967Proxy.find_delegatecall_in_exp_node

Found Expression Node: _fallback() (Slither line:2792)
Expression called: _fallback
Type of call: tuple() (Slither line:2807)
Args:

End ERC1967Proxy.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ERC1967Proxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2792)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
returndatasize()()

End ERC1967Proxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ERC1967Proxy.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_22676_220_0__delegate_asm_0 = result__delegate_asm_0 (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End ERC1967Proxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ERC1967Proxy.find_delegatecall_in_exp_node

Found Expression Node: r = slot (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End ERC1967Proxy.find_delegatecall_in_exp_node (Slither line:2848)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ERC1967Proxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'implementation'
Looking for corresponding Variable
Current function: _delegate

Begin ERC1967Proxy.find_delegate_variable_from_name
Searching for implementation (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _ROLLBACK_SLOT (Slither line:1689)
Checking _IMPLEMENTATION_SLOT (Slither line:1689)
Checking _ADMIN_SLOT (Slither line:1689)
Checking _BEACON_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking implementation (Slither line:1800)
implementation is a Parameter in ERC1967Proxy._delegate (Slither line:1805)
CallExpression: _fallback() (Slither line:1819)
CallExpression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:1819)
AssignmentOperation: result__delegate_asm_0 (Slither line:1811)
AssignmentOperation: slot (Slither line:1811)
CallExpression: _delegate(_implementation()) (Slither line:1819)
Found where _delegate is called: _delegate(_implementation()) (Slither line:1832)
The value passed to parameter #0 is _implementation() (Slither line:1835)

Begin ERC1967Proxy.find_delegate_from_call_exp

_implementation() (Slither line:1993)
called = _implementation (Slither line:2000)
Return node of function ERC1967Proxy._implementation(): RETURN ERC1967Upgrade._getImplementation() (Slither line:2031)
Encountered call expression at RETURN node: ERC1967Upgrade._getImplementation() (Slither line:2043)
Encountered member access expression: ERC1967Upgrade._getImplementation (Slither line:2047)

Begin ERC1967Proxy.find_delegate_from_member_access

Expression: ERC1967Upgrade._getImplementation (Slither line:2348)
ERC1967Upgrade (Slither line:2361)
_getImplementation is a member of the contract type: ERC1967Upgrade (Slither line:2406)
Looking for _getImplementation in ERC1967Upgrade (Slither line:2513)
Found the function called _getImplementation (Slither line:2517)
Returns a variable of type address (Slither line:2522)
Found RETURN node: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:2534)
Found another MemberAccess (Slither line:2542)
Member name: value
Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT)
MemberAccess after CallExpression: StorageSlot.getAddressSlot (Slither line:2546)
Too many MemberAccesses: returning (Slither line:2550)
find_delegate_from_member_access returned None (Slither line:2555)
Found storage slot: _IMPLEMENTATION_SLOT (Slither line:2568)

End ERC1967Proxy.find_delegate_from_member_access (Slither line:2635)


End ERC1967Proxy.find_delegate_from_call_exp (Slither line:2094)


End ERC1967Proxy.find_delegate_variable_from_name (Slither line:1939)


End ERC1967Proxy.find_delegatecall_in_asm (Slither line:1637)


End ERC1967Proxy.is_proxy (Slither line:1476)


Begin ERC1967Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC1967Proxy 
Local Variable: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:1164)
ERC1967Proxy is delegating to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
Looking for setter (Slither line:1200)

Looking for setter in ERC1967Upgrade (Slither line:1238)


Begin ERC1967Upgrade.find_setter_in_contract (Slither line:3109)

Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:3112)
Checking function: _getImplementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setImplementation(address) returns() (Slither line:3117)
Visibility: private
Checking function: _upgradeTo(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _upgradeToAndCall(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _upgradeToAndCallSecure(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _getAdmin() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setAdmin(address) returns() (Slither line:3117)
Visibility: private
Checking function: _changeAdmin(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _getBeacon() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setBeacon(address) returns() (Slither line:3117)
Visibility: private
Checking function: _upgradeBeaconToAndCall(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal

End ERC1967Upgrade.find_setter_in_contract (Slither line:3315)


Could not find setter in ERC1967Upgrade (Slither line:1245)
Looking for setter in UUPSUpgradeable (Slither line:1252)


Begin UUPSUpgradeable.find_setter_in_contract (Slither line:3109)

Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:3112)
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
rollbackTesting.value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Address.functionDelegateCall(newImplementation,abi.encodeWithSignature(upgradeTo(address),oldImplementation))
rollbackTesting.value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
_upgradeTo(newImplementation)
functionDelegateCall(target,data,Address: low-level delegate call failed)
r = slot
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
_authorizeUpgrade(newImplementation)
_setImplementation(newImplementation)
revert(string)(errorMessage)
returndata
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
Address.functionDelegateCall(newImplementation,data)
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
_setImplementation(newImplementation)
Upgraded(newImplementation)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
_upgradeToAndCallSecure(newImplementation,new bytes(0),false)
r = slot
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
verifyCallResult(success,returndata,errorMessage)
onlyProxy()
(success,returndata) = target.delegatecall(data)
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End UUPSUpgradeable.find_setter_in_contract (Slither line:3315)

Looking for setter in ManagedDripsHub (Slither line:1252)


Begin ManagedDripsHub.find_setter_in_contract (Slither line:3109)

Expression: newImplementation (Slither line:3112)
Checking function: constructor(uint64) returns() (Slither line:3117)
Checking function: collect(address,SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
keccak256(bytes)(abi.encode(receivers))
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
i ++
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(user,int128(collected))
delete receiver.amtDeltas[cycle]
cycle ++
Collected(user,collected,split)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
require(bool,string)(! paused(),Contract paused)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
bytes32(0)
0
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
super.collect(user,currReceivers)
whenNotPaused()
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
Checking function: flushCycles(address,uint64) returns(uint64) (Slither line:3117)
Visibility: public
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
flushable -= cycles
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
0
_storage().receiverStates[user].collectable += collected
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
super.flushCycles(user,maxCycles)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
whenNotPaused()
cycles = maxCycles
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
cycles = flushable
is an Assignment Operation (Slither line:3206)
newImplementation
currFinishedCycle + 1 - nextCollectedCycle
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
flushable = flushableCycles(user)
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(! paused(),Contract paused)
0
i ++
Checking function: _authorizeUpgrade(address) returns() (Slither line:3117)
Visibility: internal
Checking function: admin() returns(address) (Slither line:3117)
Visibility: public
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: changeAdmin(address) returns() (Slither line:3117)
Visibility: public
AdminChanged(_getAdmin(),newAdmin)
require(bool,string)(admin() == msg.sender,Caller is not the admin)
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
_setAdmin(newAdmin)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_changeAdmin(newAdmin)
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: paused() returns(bool) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Checking function: pause() returns() (Slither line:3117)
Visibility: public
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Paused(msg.sender)
whenNotPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
require(bool,string)(! paused(),Contract paused)
Checking function: unpause() returns() (Slither line:3117)
Visibility: public
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_pausedSlot().value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Unpaused(msg.sender)
require(bool,string)(paused(),Contract not paused)
whenPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: _pausedSlot() returns(StorageSlot.BooleanSlot) (Slither line:3117)
Visibility: private
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
rollbackTesting.value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
Address.functionDelegateCall(newImplementation,abi.encodeWithSignature(upgradeTo(address),oldImplementation))
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
rollbackTesting.value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3206)
newImplementation
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
_upgradeTo(newImplementation)
functionDelegateCall(target,data,Address: low-level delegate call failed)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
revert(string)(errorMessage)
_setImplementation(newImplementation)
returndata
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
newImplementation
Address.functionDelegateCall(newImplementation,data)
_setImplementation(newImplementation)
_authorizeUpgrade(newImplementation)
Upgraded(newImplementation)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
_upgradeToAndCallSecure(newImplementation,new bytes(0),false)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
verifyCallResult(success,returndata,errorMessage)
onlyProxy()
(success,returndata) = target.delegatecall(data)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End ManagedDripsHub.find_setter_in_contract (Slither line:3315)

Looking for setter in ERC20DripsHub (Slither line:1252)


Begin ERC20DripsHub.find_setter_in_contract (Slither line:3109)

Expression: newImplementation (Slither line:3112)
Checking function: constructor(uint64,IERC20) returns() (Slither line:3117)
Checking function: setDrips(uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
bytes32(0)
MAX_TIMESTAMP
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
uint64(endTime)
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
_storeNewDrips(userOrAccount,newBalance,newReceivers)
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
UserOrAccount(false,user,0)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
_setDrips(_userOrAccount(msg.sender),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
whenNotPaused()
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
None
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,currEndTime,currAmtPerSec)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
Checking function: setDrips(uint256,uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
bytes32(0)
MAX_TIMESTAMP
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
uint64(endTime)
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
_storeNewDrips(userOrAccount,newBalance,newReceivers)
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
UserOrAccount(true,user,account)
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
None
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,currEndTime,currAmtPerSec)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
_setDrips(_userOrAccount(msg.sender,account),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
whenNotPaused()
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
Checking function: give(address,uint128) returns() (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
Given(userOrAccount.user,receiver,amt)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_give(_userOrAccount(msg.sender),receiver,amt)
UserOrAccount(false,user,0)
whenNotPaused()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: give(uint256,address,uint128) returns() (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
UserOrAccount(true,user,account)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
_give(_userOrAccount(msg.sender,account),receiver,amt)
Given(userOrAccount.user,receiver,amt)
whenNotPaused()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: setSplits(SplitsReceiver[],SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
bytes32(0)
_setSplits(msg.sender,currReceivers,newReceivers)
keccak256(bytes)(abi.encode(receivers))
whenNotPaused()
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(weight != 0,Splits receiver weight is zero)
totalWeight += weight
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate splits receivers)
require(bool,string)(prevReceiver < receiver,Splits receivers not sorted by address)
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(totalWeight <= TOTAL_SPLITS_WEIGHT,Splits weights sum too high)
_pausedSlot().value
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
Collected(user,collected,split)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
_assertSplitsValid(newReceivers)
_storage().splitsHash[user] = hashSplits(newReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
SplitsUpdated(user,newReceivers)
0
_transfer(user,int128(collected))
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
require(bool,string)(receivers.length <= MAX_SPLITS_RECEIVERS,Too many splits receivers)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: reserve() returns(IERC20Reserve) (Slither line:3117)
Visibility: public
IERC20Reserve(_reserveSlot().value)
StorageSlot.getAddressSlot(SLOT_RESERVE)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: setReserve(IERC20Reserve) returns() (Slither line:3117)
Visibility: public
require(bool,string)(admin() == msg.sender,Caller is not the admin)
StorageSlot.getAddressSlot(SLOT_RESERVE)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.approve(address(oldReserve),0)
_getAdmin()
_reserveSlot().value = address(newReserve)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
erc20.approve(address(newReserve),type()(uint256).max)
ReserveSet(oldReserve,newReserve)
IERC20Reserve(_reserveSlot().value)
onlyAdmin()
require(bool,string)(newReserve.erc20() == erc20,Invalid reserve ERC-20 address)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: _reserveSlot() returns(StorageSlot.AddressSlot) (Slither line:3117)
Visibility: private
Checking function: _transfer(address,int128) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(uint64) returns() (Slither line:3117)
Checking function: collect(address,SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
bytes32(0)
keccak256(bytes)(abi.encode(receivers))
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
super.collect(user,currReceivers)
whenNotPaused()
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_pausedSlot().value
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
Collected(user,collected,split)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
0
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(user,int128(collected))
delete receiver.amtDeltas[cycle]
cycle ++
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: flushCycles(address,uint64) returns(uint64) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
0
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
flushable -= cycles
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
0
_storage().receiverStates[user].collectable += collected
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
super.flushCycles(user,maxCycles)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
whenNotPaused()
cycles = maxCycles
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
cycles = flushable
is an Assignment Operation (Slither line:3206)
newImplementation
currFinishedCycle + 1 - nextCollectedCycle
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
flushable = flushableCycles(user)
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: _authorizeUpgrade(address) returns() (Slither line:3117)
Visibility: internal
Checking function: admin() returns(address) (Slither line:3117)
Visibility: public
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: changeAdmin(address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(admin() == msg.sender,Caller is not the admin)
AdminChanged(_getAdmin(),newAdmin)
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
_setAdmin(newAdmin)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_getAdmin()
_changeAdmin(newAdmin)
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: paused() returns(bool) (Slither line:3117)
Visibility: public
StorageSlot.getBooleanSlot(SLOT_PAUSED)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
Checking function: pause() returns() (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_getAdmin()
_pausedSlot().value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Paused(msg.sender)
whenNotPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: unpause() returns() (Slither line:3117)
Visibility: public
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_getAdmin()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_pausedSlot().value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Unpaused(msg.sender)
require(bool,string)(paused(),Contract not paused)
whenPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: _pausedSlot() returns(StorageSlot.BooleanSlot) (Slither line:3117)
Visibility: private
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
onlyProxy()
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End ERC20DripsHub.find_setter_in_contract (Slither line:3315)

Looking for setter in DaiDripsHub (Slither line:1252)


Begin DaiDripsHub.find_setter_in_contract (Slither line:3109)

Expression: newImplementation (Slither line:3112)
Checking function: constructor(uint64,IDai) returns() (Slither line:3117)
Checking function: setDripsAndPermit(uint64,uint128,DripsReceiver[],int128,DripsReceiver[],PermitArgs) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
require(bool,string)(! paused(),Contract paused)
None
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_permit(permitArgs)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
setDrips(lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
whenNotPaused()
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_setDrips(_userOrAccount(msg.sender),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: setDripsAndPermit(uint256,uint64,uint128,DripsReceiver[],int128,DripsReceiver[],PermitArgs) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
IERC20Reserve(_reserveSlot().value)
_permit(permitArgs)
setDrips(account,lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
whenNotPaused()
require(bool,string)(! paused(),Contract paused)
UserOrAccount(true,user,account)
None
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_setDrips(_userOrAccount(msg.sender,account),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
whenNotPaused()
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: giveAndPermit(address,uint128,PermitArgs) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
_give(_userOrAccount(msg.sender),receiver,amt)
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
_permit(permitArgs)
give(receiver,amt)
whenNotPaused()
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(userOrAccount.user,- int128(amt))
_pausedSlot().value
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
StorageSlot.getAddressSlot(SLOT_RESERVE)
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
Checking function: giveAndPermit(uint256,address,uint128,PermitArgs) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
whenNotPaused()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_permit(permitArgs)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
give(account,receiver,amt)
erc20Reserve.deposit(deposit)
whenNotPaused()
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
IERC20Reserve(_reserveSlot().value)
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
UserOrAccount(true,user,account)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
StorageSlot.getAddressSlot(SLOT_RESERVE)
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
_give(_userOrAccount(msg.sender,account),receiver,amt)
Checking function: _permit(PermitArgs) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(uint64,IERC20) returns() (Slither line:3117)
Checking function: setDrips(uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
require(bool,string)(! paused(),Contract paused)
None
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_setDrips(_userOrAccount(msg.sender),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: setDrips(uint256,uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
IERC20Reserve(_reserveSlot().value)
require(bool,string)(! paused(),Contract paused)
UserOrAccount(true,user,account)
None
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_setDrips(_userOrAccount(msg.sender,account),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
whenNotPaused()
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: give(address,uint128) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
_give(_userOrAccount(msg.sender),receiver,amt)
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
StorageSlot.getAddressSlot(SLOT_RESERVE)
Checking function: give(uint256,address,uint128) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
whenNotPaused()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
IERC20Reserve(_reserveSlot().value)
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
UserOrAccount(true,user,account)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
StorageSlot.getAddressSlot(SLOT_RESERVE)
_give(_userOrAccount(msg.sender,account),receiver,amt)
Checking function: setSplits(SplitsReceiver[],SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
IERC20Reserve(_reserveSlot().value)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(! paused(),Contract paused)
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(receivers.length <= MAX_SPLITS_RECEIVERS,Too many splits receivers)
Collected(user,collected,split)
uint64(block.timestamp)
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
_assertSplitsValid(newReceivers)
_storage().splitsHash[user] = hashSplits(newReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
SplitsUpdated(user,newReceivers)
0
_transfer(user,int128(collected))
_setSplits(msg.sender,currReceivers,newReceivers)
whenNotPaused()
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
require(bool,string)(weight != 0,Splits receiver weight is zero)
totalWeight += weight
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate splits receivers)
require(bool,string)(prevReceiver < receiver,Splits receivers not sorted by address)
erc20Reserve.withdraw(withdraw)
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
require(bool,string)(totalWeight <= TOTAL_SPLITS_WEIGHT,Splits weights sum too high)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.transferFrom(user,address(this),deposit)
erc20Reserve.deposit(deposit)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
bytes32(0)
keccak256(bytes)(abi.encode(receivers))
StorageSlot.getAddressSlot(SLOT_RESERVE)
Checking function: reserve() returns(IERC20Reserve) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(SLOT_RESERVE)
IERC20Reserve(_reserveSlot().value)
Checking function: setReserve(IERC20Reserve) returns() (Slither line:3117)
Visibility: public
erc20.approve(address(oldReserve),0)
_getAdmin()
_reserveSlot().value = address(newReserve)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
erc20.approve(address(newReserve),type()(uint256).max)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
ReserveSet(oldReserve,newReserve)
IERC20Reserve(_reserveSlot().value)
onlyAdmin()
require(bool,string)(newReserve.erc20() == erc20,Invalid reserve ERC-20 address)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
StorageSlot.getAddressSlot(SLOT_RESERVE)
require(bool,string)(admin() == msg.sender,Caller is not the admin)
Checking function: _reserveSlot() returns(StorageSlot.AddressSlot) (Slither line:3117)
Visibility: private
Checking function: _transfer(address,int128) returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(uint64) returns() (Slither line:3117)
Checking function: collect(address,SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
IERC20Reserve(_reserveSlot().value)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(! paused(),Contract paused)
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(user,int128(collected))
Collected(user,collected,split)
uint64(block.timestamp)
0
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
super.collect(user,currReceivers)
whenNotPaused()
erc20Reserve.withdraw(withdraw)
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
bytes32(0)
keccak256(bytes)(abi.encode(receivers))
StorageSlot.getAddressSlot(SLOT_RESERVE)
Checking function: flushCycles(address,uint64) returns(uint64) (Slither line:3117)
Visibility: public
cycle ++
0
_storage().receiverStates[user].collectable += collected
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
super.flushCycles(user,maxCycles)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
cycles = maxCycles
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
cycles = flushable
is an Assignment Operation (Slither line:3206)
newImplementation
currFinishedCycle + 1 - nextCollectedCycle
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
flushable = flushableCycles(user)
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
require(bool,string)(! paused(),Contract paused)
0
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
flushable -= cycles
is an Assignment Operation (Slither line:3206)
newImplementation
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: _authorizeUpgrade(address) returns() (Slither line:3117)
Visibility: internal
Checking function: admin() returns(address) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_getAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: changeAdmin(address) returns() (Slither line:3117)
Visibility: public
_setAdmin(newAdmin)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_changeAdmin(newAdmin)
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
AdminChanged(_getAdmin(),newAdmin)
require(bool,string)(admin() == msg.sender,Caller is not the admin)
Checking function: paused() returns(bool) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Checking function: pause() returns() (Slither line:3117)
Visibility: public
_getAdmin()
_pausedSlot().value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Paused(msg.sender)
whenNotPaused()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
require(bool,string)(! paused(),Contract paused)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
Checking function: unpause() returns() (Slither line:3117)
Visibility: public
require(bool,string)(admin() == msg.sender,Caller is not the admin)
_getAdmin()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_pausedSlot().value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Unpaused(msg.sender)
require(bool,string)(paused(),Contract not paused)
whenPaused()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
Checking function: _pausedSlot() returns(StorageSlot.BooleanSlot) (Slither line:3117)
Visibility: private
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
_upgradeTo(newImplementation)
_getAdmin()
_setImplementation(newImplementation)
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3206)
newImplementation
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
functionDelegateCall(target,data,Address: low-level delegate call failed)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
revert(string)(errorMessage)
Address.functionDelegateCall(newImplementation,data)
_setImplementation(newImplementation)
returndata
_authorizeUpgrade(newImplementation)
size > 0
Upgraded(newImplementation)
_upgradeToAndCallSecure(newImplementation,new bytes(0),false)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
onlyProxy()
newImplementation
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End DaiDripsHub.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: DaiDripsHub (Slither line:1264)
Looking for getter (Slither line:1273)


Implementation retrieved by function: _getImplementation in contract: ERC1967Upgrade (Slither line:1285)

End ERC1967Proxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: ERC1967Proxy
Setter found in contract DaiDripsHub
Found fallback
Found external function: receive
Found public function: constructor
impl_address_from_contract_call: newImplementation
Checking external function fallback
Checking external function receive
functions_writing_to_variable: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
functions_writing_to_variable: checking function ERC1967Proxy._getImplementation (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._storage (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._updateDripsBalance (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.hashDrips (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._userOrAccount (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._setImplementation (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _setImplementation writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._setDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setSplits (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.collectable (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._getBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._emitDripsUpdated (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._dripsEndTime (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._upgradeTo (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeTo writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._currTimestamp (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.collect (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._setBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertDripsReceiversValid (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._upgradeToAndCall (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCall writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function ERC1967Proxy._upgradeBeaconToAndCall (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._getBeacon (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._upgradeToAndCallSecure (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCallSecure writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._assertCurrDrips (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._delegate (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.flushableCycles (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._updateDripsReceiversStates (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertSplitsValid (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeBeaconToAndCall (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._emitDripping (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._getAdmin (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._implementation (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._storeNewDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._totalDripsAmtPerSec (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.flushCycles (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._fallback (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.give (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._setAdmin (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.splitsHash (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._collectInternal (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._authorizeUpgrade (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy.receive (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._permit (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertCurrSplits (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setReserve (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._authorizeUpgrade (proxy_features line:893)
functions_writing_to_variable: checking function ERC1967Proxy._beforeFallback (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._reserveSlot (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._flushCyclesInternal (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.admin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._getImplementation (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.hashSplits (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._transfer (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setImplementation (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _setImplementation writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.give (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._transfer (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.paused (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeTo (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeTo writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._give (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setSplits (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.pause (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.collect (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeToAndCall (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCall writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setDelta (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.unpause (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.dripsHash (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.flushCycles (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeToAndCallSecure (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCallSecure writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.setDripsAndPermit (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.reserve (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._pausedSlot (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setDripsAndPermit (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._userOrAccount (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.upgradeTo (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: upgradeTo writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function ERC1967Proxy.constructor (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: constructor writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.giveAndPermit (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.upgradeToAndCall (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: upgradeToAndCall writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function ERC1967Proxy._implementation (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.dripsHash (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._getAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.giveAndPermit (proxy_features line:893)
has_compatibility_checks: dependencies: []
has_compatibility_checks: skipping private function _setImplementation
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: skipping internal function _upgradeToAndCall
has_compatibility_checks: skipping internal function _upgradeToAndCallSecure
has_compatibility_checks: skipping private function _setImplementation
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: skipping internal function _upgradeToAndCall
has_compatibility_checks: skipping internal function _upgradeToAndCallSecure
has_compatibility_checks: checking external function upgradeTo
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
has_compatibility_checks: IF node exp = ! rollbackTesting.value
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: modifier calls: ['onlyProxy()']
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
has_compatibility_checks: condition address(this) != __self
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
has_compatibility_checks: condition _getImplementation() == __self
require(bool,string)(admin() == msg.sender,Caller is not the admin)
has_compatibility_checks: condition admin() == msg.sender
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
has_compatibility_checks: condition oldImplementation == _getImplementation()
has_compatibility_checks: checking public function constructor
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
assert(bool)(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1))
has_compatibility_checks: condition _IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1)
has_compatibility_checks: checking external function upgradeToAndCall
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
has_compatibility_checks: IF node exp = ! rollbackTesting.value
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: modifier calls: ['onlyProxy()']
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
has_compatibility_checks: condition address(this) != __self
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
has_compatibility_checks: condition _getImplementation() == __self
require(bool,string)(admin() == msg.sender,Caller is not the admin)
has_compatibility_checks: condition admin() == msg.sender
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
has_compatibility_checks: condition oldImplementation == _getImplementation()
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result__delegate_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(newImplementation)
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = _getImplementation()
has_time_delay: (node.type) RETURN
(Expression) _getAdmin()
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
has_time_delay: (node.type) IF
(Expression) data.length > 0 || forceCall
has_time_delay: (node.type) EXPRESSION
(Expression) revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
has_time_delay: (node.type) RETURN
(Expression) StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
has_time_delay: (node.type) IF
(Expression) success
has_time_delay: (node.type) RETURN
(Expression) functionDelegateCall(target,data,Address: low-level delegate call failed)
has_time_delay: (node.type) EXPRESSION
(Expression) r = slot
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(errorMessage)
has_time_delay: (node.type) EXPRESSION
(Expression) Address.functionDelegateCall(newImplementation,data)
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(newImplementation)
has_time_delay: (node.type) RETURN
(Expression) returndata
has_time_delay: (node.type) EXPRESSION
(Expression) _authorizeUpgrade(newImplementation)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT)
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeToAndCallSecure(newImplementation,new bytes(0),false)
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(account)
has_time_delay: (node.type) IF
(Expression) ! rollbackTesting.value
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_time_delay: (node.type) IF
(Expression) returndata.length > 0
has_time_delay: (node.type) RETURN
(Expression) StorageSlot.getAddressSlot(_ADMIN_SLOT).value
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxy()
has_time_delay: (node.type) EXPRESSION
(Expression) newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) onlyAdmin()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_time_delay: (node.type) EXPRESSION
(Expression) rollbackTesting.value = true
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(address(this) != __self,Function must be called through delegatecall)
has_time_delay: (node.type) EXPRESSION
(Expression) r = slot
has_time_delay: (node.type) RETURN
(Expression) verifyCallResult(success,returndata,errorMessage)
has_time_delay: (node.type) EXPRESSION
(Expression) Address.functionDelegateCall(newImplementation,abi.encodeWithSignature(upgradeTo(address),oldImplementation))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returndata) = target.delegatecall(data)
has_time_delay: (node.type) EXPRESSION
(Expression) rollbackTesting.value = false
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(admin() == msg.sender,Caller is not the admin)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)

Begin UUPSUpgradeable.is_proxy (Slither line:1425)


End UUPSUpgradeable.is_proxy (Slither line:1428)


Begin UUPSUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: UUPSUpgradeable 

End UUPSUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin IERC721.is_proxy (Slither line:1425)


End IERC721.is_proxy (Slither line:1428)


Begin IERC721.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721 

End IERC721.is_upgradeable_proxy (Slither line:1407)


Begin IERC721Receiver.is_proxy (Slither line:1425)


End IERC721Receiver.is_proxy (Slither line:1428)


Begin IERC721Receiver.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Receiver 

End IERC721Receiver.is_upgradeable_proxy (Slither line:1407)


Begin IERC721Metadata.is_proxy (Slither line:1425)


End IERC721Metadata.is_proxy (Slither line:1428)


Begin IERC721Metadata.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Metadata 

End IERC721Metadata.is_upgradeable_proxy (Slither line:1407)


Begin Strings.is_proxy (Slither line:1425)


End Strings.is_proxy (Slither line:1428)


Begin Strings.is_upgradeable_proxy (Slither line:1136)

Checking contract: Strings 

End Strings.is_upgradeable_proxy (Slither line:1407)


Begin ERC165.is_proxy (Slither line:1425)


End ERC165.is_proxy (Slither line:1428)


Begin ERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165 

End ERC165.is_upgradeable_proxy (Slither line:1407)


Begin ERC721.is_proxy (Slither line:1425)


End ERC721.is_proxy (Slither line:1428)


Begin ERC721.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721 

End ERC721.is_upgradeable_proxy (Slither line:1407)


Begin IDai.is_proxy (Slither line:1425)


End IDai.is_proxy (Slither line:1428)


Begin IDai.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDai 

End IDai.is_upgradeable_proxy (Slither line:1407)


Begin IERC20Reserve.is_proxy (Slither line:1425)


End IERC20Reserve.is_proxy (Slither line:1428)


Begin IERC20Reserve.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20Reserve 

End IERC20Reserve.is_upgradeable_proxy (Slither line:1407)


Begin ERC20Reserve.is_proxy (Slither line:1425)


End ERC20Reserve.is_proxy (Slither line:1428)


Begin ERC20Reserve.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Reserve 

End ERC20Reserve.is_upgradeable_proxy (Slither line:1407)


Begin IDaiReserve.is_proxy (Slither line:1425)


End IDaiReserve.is_proxy (Slither line:1428)


Begin IDaiReserve.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDaiReserve 

End IDaiReserve.is_upgradeable_proxy (Slither line:1407)


Begin DaiReserve.is_proxy (Slither line:1425)


End DaiReserve.is_proxy (Slither line:1428)


Begin DaiReserve.is_upgradeable_proxy (Slither line:1136)

Checking contract: DaiReserve 

End DaiReserve.is_upgradeable_proxy (Slither line:1407)


Begin DripsHub.is_proxy (Slither line:1425)


End DripsHub.is_proxy (Slither line:1428)


Begin DripsHub.is_upgradeable_proxy (Slither line:1136)

Checking contract: DripsHub 

End DripsHub.is_upgradeable_proxy (Slither line:1407)


Begin ManagedDripsHub.is_proxy (Slither line:1425)


End ManagedDripsHub.is_proxy (Slither line:1428)


Begin ManagedDripsHub.is_upgradeable_proxy (Slither line:1136)

Checking contract: ManagedDripsHub 

End ManagedDripsHub.is_upgradeable_proxy (Slither line:1407)


Begin ManagedDripsHubProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ManagedDripsHubProxy.find_delegatecall_in_asm (Slither line:1541)


End ManagedDripsHubProxy.find_delegatecall_in_asm (Slither line:1637)


Begin ManagedDripsHubProxy.find_delegatecall_in_asm (Slither line:1541)


End ManagedDripsHubProxy.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ManagedDripsHubProxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2792)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
returndatasize()()

End ManagedDripsHubProxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ManagedDripsHubProxy.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_22676_220_0__delegate_asm_0 = result__delegate_asm_0 (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End ManagedDripsHubProxy.find_delegatecall_in_exp_node (Slither line:2848)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ManagedDripsHubProxy.find_delegatecall_in_exp_node

Found Expression Node: _beforeFallback() (Slither line:2792)
Expression called: _beforeFallback
Type of call: tuple() (Slither line:2807)
Args:

End ManagedDripsHubProxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ManagedDripsHubProxy.find_delegatecall_in_exp_node

Found Expression Node: r = slot (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End ManagedDripsHubProxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ManagedDripsHubProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'implementation'
Looking for corresponding Variable
Current function: _delegate

Begin ManagedDripsHubProxy.find_delegate_variable_from_name
Searching for implementation (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _ROLLBACK_SLOT (Slither line:1689)
Checking _IMPLEMENTATION_SLOT (Slither line:1689)
Checking _ADMIN_SLOT (Slither line:1689)
Checking _BEACON_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking implementation (Slither line:1800)
implementation is a Parameter in ManagedDripsHubProxy._delegate (Slither line:1805)
CallExpression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:1819)
AssignmentOperation: result__delegate_asm_0 (Slither line:1811)
CallExpression: _beforeFallback() (Slither line:1819)
AssignmentOperation: slot (Slither line:1811)
CallExpression: _delegate(_implementation()) (Slither line:1819)
Found where _delegate is called: _delegate(_implementation()) (Slither line:1832)
The value passed to parameter #0 is _implementation() (Slither line:1835)

Begin ManagedDripsHubProxy.find_delegate_from_call_exp

_implementation() (Slither line:1993)
called = _implementation (Slither line:2000)
Return node of function ERC1967Proxy._implementation(): RETURN ERC1967Upgrade._getImplementation() (Slither line:2031)
Encountered call expression at RETURN node: ERC1967Upgrade._getImplementation() (Slither line:2043)
Encountered member access expression: ERC1967Upgrade._getImplementation (Slither line:2047)

Begin ManagedDripsHubProxy.find_delegate_from_member_access

Expression: ERC1967Upgrade._getImplementation (Slither line:2348)
ERC1967Upgrade (Slither line:2361)
_getImplementation is a member of the contract type: ERC1967Upgrade (Slither line:2406)
Looking for _getImplementation in ERC1967Upgrade (Slither line:2513)
Found the function called _getImplementation (Slither line:2517)
Returns a variable of type address (Slither line:2522)
Found RETURN node: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:2534)
Found another MemberAccess (Slither line:2542)
Member name: value
Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT)
MemberAccess after CallExpression: StorageSlot.getAddressSlot (Slither line:2546)
Too many MemberAccesses: returning (Slither line:2550)
find_delegate_from_member_access returned None (Slither line:2555)
Found storage slot: _IMPLEMENTATION_SLOT (Slither line:2568)

End ManagedDripsHubProxy.find_delegate_from_member_access (Slither line:2635)


End ManagedDripsHubProxy.find_delegate_from_call_exp (Slither line:2094)


End ManagedDripsHubProxy.find_delegate_variable_from_name (Slither line:1939)


End ManagedDripsHubProxy.find_delegatecall_in_asm (Slither line:1637)


End ManagedDripsHubProxy.is_proxy (Slither line:1476)


Begin ManagedDripsHubProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ManagedDripsHubProxy 
Local Variable: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:1164)
ManagedDripsHubProxy is delegating to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
Looking for setter (Slither line:1200)

Looking for setter in ERC1967Upgrade (Slither line:1238)


Begin ERC1967Upgrade.find_setter_in_contract (Slither line:3109)

Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:3112)
Checking function: _getImplementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setImplementation(address) returns() (Slither line:3117)
Visibility: private
Checking function: _upgradeTo(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _upgradeToAndCall(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _upgradeToAndCallSecure(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _getAdmin() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setAdmin(address) returns() (Slither line:3117)
Visibility: private
Checking function: _changeAdmin(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _getBeacon() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setBeacon(address) returns() (Slither line:3117)
Visibility: private
Checking function: _upgradeBeaconToAndCall(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal

End ERC1967Upgrade.find_setter_in_contract (Slither line:3315)


Could not find setter in ERC1967Upgrade (Slither line:1245)
Looking for setter in ERC1967Proxy (Slither line:1252)


Begin ERC1967Proxy.find_setter_in_contract (Slither line:3109)

Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:3112)
Checking function: constructor(address,bytes) returns() (Slither line:3117)
Checking function: _implementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: _getImplementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setImplementation(address) returns() (Slither line:3117)
Visibility: private
Checking function: _upgradeTo(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _upgradeToAndCall(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _upgradeToAndCallSecure(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _getAdmin() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setAdmin(address) returns() (Slither line:3117)
Visibility: private
Checking function: _changeAdmin(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _getBeacon() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _setBeacon(address) returns() (Slither line:3117)
Visibility: private
Checking function: _upgradeBeaconToAndCall(address,bytes,bool) returns() (Slither line:3117)
Visibility: internal
Checking function: _delegate(address) returns() (Slither line:3117)
Visibility: internal
Checking function: _implementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: _fallback() returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: receive() returns() (Slither line:3117)
Checking function: _beforeFallback() returns() (Slither line:3117)

End ERC1967Proxy.find_setter_in_contract (Slither line:3315)

Looking for setter in UUPSUpgradeable (Slither line:1252)


Begin UUPSUpgradeable.find_setter_in_contract (Slither line:3109)

Expression: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (Slither line:3112)
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
rollbackTesting.value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Address.functionDelegateCall(newImplementation,abi.encodeWithSignature(upgradeTo(address),oldImplementation))
rollbackTesting.value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
_upgradeTo(newImplementation)
functionDelegateCall(target,data,Address: low-level delegate call failed)
r = slot
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
_authorizeUpgrade(newImplementation)
_setImplementation(newImplementation)
revert(string)(errorMessage)
returndata
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
Address.functionDelegateCall(newImplementation,data)
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
_setImplementation(newImplementation)
Upgraded(newImplementation)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
_upgradeToAndCallSecure(newImplementation,new bytes(0),false)
r = slot
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
verifyCallResult(success,returndata,errorMessage)
onlyProxy()
(success,returndata) = target.delegatecall(data)
is an Assignment Operation (Slither line:3206)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End UUPSUpgradeable.find_setter_in_contract (Slither line:3315)

Looking for setter in ManagedDripsHub (Slither line:1252)


Begin ManagedDripsHub.find_setter_in_contract (Slither line:3109)

Expression: newImplementation (Slither line:3112)
Checking function: constructor(uint64) returns() (Slither line:3117)
Checking function: collect(address,SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
keccak256(bytes)(abi.encode(receivers))
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
i ++
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(user,int128(collected))
delete receiver.amtDeltas[cycle]
cycle ++
Collected(user,collected,split)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
require(bool,string)(! paused(),Contract paused)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
bytes32(0)
0
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
super.collect(user,currReceivers)
whenNotPaused()
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
Checking function: flushCycles(address,uint64) returns(uint64) (Slither line:3117)
Visibility: public
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
flushable -= cycles
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
0
_storage().receiverStates[user].collectable += collected
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
super.flushCycles(user,maxCycles)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
whenNotPaused()
cycles = maxCycles
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
cycles = flushable
is an Assignment Operation (Slither line:3206)
newImplementation
currFinishedCycle + 1 - nextCollectedCycle
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
flushable = flushableCycles(user)
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(! paused(),Contract paused)
0
i ++
Checking function: _authorizeUpgrade(address) returns() (Slither line:3117)
Visibility: internal
Checking function: admin() returns(address) (Slither line:3117)
Visibility: public
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: changeAdmin(address) returns() (Slither line:3117)
Visibility: public
AdminChanged(_getAdmin(),newAdmin)
require(bool,string)(admin() == msg.sender,Caller is not the admin)
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
_setAdmin(newAdmin)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_changeAdmin(newAdmin)
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: paused() returns(bool) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Checking function: pause() returns() (Slither line:3117)
Visibility: public
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Paused(msg.sender)
whenNotPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
require(bool,string)(! paused(),Contract paused)
Checking function: unpause() returns() (Slither line:3117)
Visibility: public
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_pausedSlot().value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Unpaused(msg.sender)
require(bool,string)(paused(),Contract not paused)
whenPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: _pausedSlot() returns(StorageSlot.BooleanSlot) (Slither line:3117)
Visibility: private
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
rollbackTesting.value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
Address.functionDelegateCall(newImplementation,abi.encodeWithSignature(upgradeTo(address),oldImplementation))
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
rollbackTesting.value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3206)
newImplementation
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
_upgradeTo(newImplementation)
functionDelegateCall(target,data,Address: low-level delegate call failed)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
revert(string)(errorMessage)
_setImplementation(newImplementation)
returndata
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
newImplementation
Address.functionDelegateCall(newImplementation,data)
_setImplementation(newImplementation)
_authorizeUpgrade(newImplementation)
Upgraded(newImplementation)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
_upgradeToAndCallSecure(newImplementation,new bytes(0),false)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
verifyCallResult(success,returndata,errorMessage)
onlyProxy()
(success,returndata) = target.delegatecall(data)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End ManagedDripsHub.find_setter_in_contract (Slither line:3315)

Looking for setter in ERC20DripsHub (Slither line:1252)


Begin ERC20DripsHub.find_setter_in_contract (Slither line:3109)

Expression: newImplementation (Slither line:3112)
Checking function: constructor(uint64,IERC20) returns() (Slither line:3117)
Checking function: setDrips(uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
bytes32(0)
MAX_TIMESTAMP
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
uint64(endTime)
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
_storeNewDrips(userOrAccount,newBalance,newReceivers)
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
UserOrAccount(false,user,0)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
_setDrips(_userOrAccount(msg.sender),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
whenNotPaused()
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
None
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,currEndTime,currAmtPerSec)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
Checking function: setDrips(uint256,uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
bytes32(0)
MAX_TIMESTAMP
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
uint64(endTime)
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
_storeNewDrips(userOrAccount,newBalance,newReceivers)
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
UserOrAccount(true,user,account)
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
None
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,currEndTime,currAmtPerSec)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
_setDrips(_userOrAccount(msg.sender,account),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
whenNotPaused()
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
Checking function: give(address,uint128) returns() (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
Given(userOrAccount.user,receiver,amt)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_give(_userOrAccount(msg.sender),receiver,amt)
UserOrAccount(false,user,0)
whenNotPaused()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: give(uint256,address,uint128) returns() (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
UserOrAccount(true,user,account)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
_give(_userOrAccount(msg.sender,account),receiver,amt)
Given(userOrAccount.user,receiver,amt)
whenNotPaused()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: setSplits(SplitsReceiver[],SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
bytes32(0)
_setSplits(msg.sender,currReceivers,newReceivers)
keccak256(bytes)(abi.encode(receivers))
whenNotPaused()
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(weight != 0,Splits receiver weight is zero)
totalWeight += weight
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate splits receivers)
require(bool,string)(prevReceiver < receiver,Splits receivers not sorted by address)
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(totalWeight <= TOTAL_SPLITS_WEIGHT,Splits weights sum too high)
_pausedSlot().value
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
Collected(user,collected,split)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
_assertSplitsValid(newReceivers)
_storage().splitsHash[user] = hashSplits(newReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
SplitsUpdated(user,newReceivers)
0
_transfer(user,int128(collected))
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
require(bool,string)(receivers.length <= MAX_SPLITS_RECEIVERS,Too many splits receivers)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: reserve() returns(IERC20Reserve) (Slither line:3117)
Visibility: public
IERC20Reserve(_reserveSlot().value)
StorageSlot.getAddressSlot(SLOT_RESERVE)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: setReserve(IERC20Reserve) returns() (Slither line:3117)
Visibility: public
require(bool,string)(admin() == msg.sender,Caller is not the admin)
StorageSlot.getAddressSlot(SLOT_RESERVE)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.approve(address(oldReserve),0)
_getAdmin()
_reserveSlot().value = address(newReserve)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
erc20.approve(address(newReserve),type()(uint256).max)
ReserveSet(oldReserve,newReserve)
IERC20Reserve(_reserveSlot().value)
onlyAdmin()
require(bool,string)(newReserve.erc20() == erc20,Invalid reserve ERC-20 address)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: _reserveSlot() returns(StorageSlot.AddressSlot) (Slither line:3117)
Visibility: private
Checking function: _transfer(address,int128) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(uint64) returns() (Slither line:3117)
Checking function: collect(address,SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
bytes32(0)
keccak256(bytes)(abi.encode(receivers))
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
super.collect(user,currReceivers)
whenNotPaused()
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_pausedSlot().value
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
Collected(user,collected,split)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
uint64(block.timestamp)
0
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(user,int128(collected))
delete receiver.amtDeltas[cycle]
cycle ++
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Checking function: flushCycles(address,uint64) returns(uint64) (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
0
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
flushable -= cycles
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
0
_storage().receiverStates[user].collectable += collected
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
super.flushCycles(user,maxCycles)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
whenNotPaused()
cycles = maxCycles
is an Assignment Operation (Slither line:3206)
newImplementation
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
cycles = flushable
is an Assignment Operation (Slither line:3206)
newImplementation
currFinishedCycle + 1 - nextCollectedCycle
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
flushable = flushableCycles(user)
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: _authorizeUpgrade(address) returns() (Slither line:3117)
Visibility: internal
Checking function: admin() returns(address) (Slither line:3117)
Visibility: public
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: changeAdmin(address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(admin() == msg.sender,Caller is not the admin)
AdminChanged(_getAdmin(),newAdmin)
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
_setAdmin(newAdmin)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_getAdmin()
_changeAdmin(newAdmin)
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: paused() returns(bool) (Slither line:3117)
Visibility: public
StorageSlot.getBooleanSlot(SLOT_PAUSED)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
Checking function: pause() returns() (Slither line:3117)
Visibility: public
require(bool,string)(! paused(),Contract paused)
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_getAdmin()
_pausedSlot().value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Paused(msg.sender)
whenNotPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: unpause() returns() (Slither line:3117)
Visibility: public
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_getAdmin()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_pausedSlot().value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Unpaused(msg.sender)
require(bool,string)(paused(),Contract not paused)
whenPaused()
onlyAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: _pausedSlot() returns(StorageSlot.BooleanSlot) (Slither line:3117)
Visibility: private
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
onlyProxy()
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End ERC20DripsHub.find_setter_in_contract (Slither line:3315)

Looking for setter in DaiDripsHub (Slither line:1252)


Begin DaiDripsHub.find_setter_in_contract (Slither line:3109)

Expression: newImplementation (Slither line:3112)
Checking function: constructor(uint64,IDai) returns() (Slither line:3117)
Checking function: setDripsAndPermit(uint64,uint128,DripsReceiver[],int128,DripsReceiver[],PermitArgs) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
require(bool,string)(! paused(),Contract paused)
None
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_permit(permitArgs)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
setDrips(lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
whenNotPaused()
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_setDrips(_userOrAccount(msg.sender),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: setDripsAndPermit(uint256,uint64,uint128,DripsReceiver[],int128,DripsReceiver[],PermitArgs) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
IERC20Reserve(_reserveSlot().value)
_permit(permitArgs)
setDrips(account,lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
whenNotPaused()
require(bool,string)(! paused(),Contract paused)
UserOrAccount(true,user,account)
None
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_setDrips(_userOrAccount(msg.sender,account),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
whenNotPaused()
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: giveAndPermit(address,uint128,PermitArgs) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
_give(_userOrAccount(msg.sender),receiver,amt)
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
_permit(permitArgs)
give(receiver,amt)
whenNotPaused()
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(userOrAccount.user,- int128(amt))
_pausedSlot().value
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
StorageSlot.getAddressSlot(SLOT_RESERVE)
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
Checking function: giveAndPermit(uint256,address,uint128,PermitArgs) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
whenNotPaused()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_permit(permitArgs)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
give(account,receiver,amt)
erc20Reserve.deposit(deposit)
whenNotPaused()
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
IERC20Reserve(_reserveSlot().value)
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
UserOrAccount(true,user,account)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
StorageSlot.getAddressSlot(SLOT_RESERVE)
dai.permit(msg.sender,address(this),permitArgs.nonce,permitArgs.expiry,true,permitArgs.v,permitArgs.r,permitArgs.s)
_give(_userOrAccount(msg.sender,account),receiver,amt)
Checking function: _permit(PermitArgs) returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(uint64,IERC20) returns() (Slither line:3117)
Checking function: setDrips(uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
require(bool,string)(! paused(),Contract paused)
None
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_setDrips(_userOrAccount(msg.sender),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: setDrips(uint256,uint64,uint128,DripsReceiver[],int128,DripsReceiver[]) returns(uint128,int128) (Slither line:3117)
Visibility: public
DripsUpdated(userOrAccount.user,userOrAccount.account,balance,receivers)
keccak256(bytes)(abi.encode(receivers,update,balance))
startTime
DripsUpdated(userOrAccount.user,balance,receivers)
IERC20Reserve(_reserveSlot().value)
require(bool,string)(! paused(),Contract paused)
UserOrAccount(true,user,account)
None
uint64(block.timestamp)
require(bool,string)(receivers.length <= MAX_DRIPS_RECEIVERS,Too many drips receivers)
newIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
amtDeltas[thisCycle].thisCycle += int128(uint128(thisCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
amtDeltas[thisCycle].nextCycle += int128(uint128(nextCycleSecs)) * amtPerSecDelta
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currIdx = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx = currReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
MAX_TIMESTAMP
uint64(endTime)
_storeNewDrips(userOrAccount,newBalance,newReceivers)
expectedHash = _storage().accountDripsHashes[userOrAccount.user][userOrAccount.account]
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripsUpdated(userOrAccount,newBalance,newReceivers)
i ++
_transfer(userOrAccount.user,- realBalanceDelta)
expectedHash = _storage().userDripsHashes[userOrAccount.user]
is an Assignment Operation (Slither line:3206)
newImplementation
newIdx = newReceivers.length
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(amt != 0,Drips receiver amtPerSec is zero)
pickCurr = currReceiver <= newReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
endTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
_storage().accountDripsHashes[userOrAccount.user][userOrAccount.account] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
amtPerSec += amt
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(actualHash == expectedHash,Invalid current drips configuration)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
pickNew = newReceiver <= currReceiver
is an Assignment Operation (Slither line:3206)
newImplementation
receiverState.nextCollectedCycle = _currTimestamp() / cycleSecs + 1
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_storage().userDripsHashes[userOrAccount.user] = newDripsHash
is an Assignment Operation (Slither line:3206)
newImplementation
currEndTime = _currTimestamp()
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
Dripping(userOrAccount.user,userOrAccount.account,receiver,amtPerSec,endTime)
erc20Reserve.withdraw(withdraw)
require(bool,string)(prevReceiver != receiver,Duplicate drips receivers)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver < receiver,Drips receivers not sorted by address)
Dripping(userOrAccount.user,receiver,amtPerSec,endTime)
_pausedSlot().value
require(bool,string)(amtPerSec <= type()(uint128).max,Total drips receivers amtPerSec too high)
receiver = currReceivers[currIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
uint128(amtPerSec)
currAmtPerSec = int128(currReceivers[currIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_setDelta(receiver,currEndTime,currAmtPerSec)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
balance = 0
is an Assignment Operation (Slither line:3206)
newImplementation
currIdx ++
erc20Reserve.deposit(deposit)
_setDrips(_userOrAccount(msg.sender,account),lastUpdate,lastBalance,currReceivers,balanceDelta,newReceivers)
_assertCurrDrips(userOrAccount,lastUpdate,lastBalance,currReceivers)
(uint128(uint136(balance)),int128(balance - currBalance))
_setDelta(receiver,_currTimestamp(),newAmtPerSec - currAmtPerSec)
whenNotPaused()
receiver = newReceivers[newIdx].receiver
is an Assignment Operation (Slither line:3206)
newImplementation
newAmtPerSec = int128(newReceivers[newIdx].amtPerSec)
is an Assignment Operation (Slither line:3206)
newImplementation
totalAmtPerSec += receivers[i ++].amtPerSec
is an Assignment Operation (Slither line:3206)
newImplementation
_setDelta(receiver,newEndTime,- newAmtPerSec)
newIdx ++
(newBalance,realBalanceDelta) = _updateDripsBalance(lastUpdate,lastBalance,currEndTime,currAmtPerSec,balanceDelta)
is an Assignment Operation (Slither line:3206)
newImplementation
_emitDripping(userOrAccount,receiver,uint128(newAmtPerSec),newEndTime)
bytes32(0)
StorageSlot.getAddressSlot(SLOT_RESERVE)
_updateDripsReceiversStates(userOrAccount,currReceivers,currEndTime,newReceivers,newEndTime)
Checking function: give(address,uint128) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
_give(_userOrAccount(msg.sender),receiver,amt)
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
UserOrAccount(false,user,0)
IERC20Reserve(_reserveSlot().value)
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
StorageSlot.getAddressSlot(SLOT_RESERVE)
Checking function: give(uint256,address,uint128) returns() (Slither line:3117)
Visibility: public
Given(userOrAccount.user,receiver,amt)
whenNotPaused()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
IERC20Reserve(_reserveSlot().value)
_storage().receiverStates[receiver].collectable += amt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
require(bool,string)(! paused(),Contract paused)
erc20Reserve.withdraw(withdraw)
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
UserOrAccount(true,user,account)
_transfer(userOrAccount.user,- int128(amt))
Given(userOrAccount.user,userOrAccount.account,receiver,amt)
_pausedSlot().value
StorageSlot.getAddressSlot(SLOT_RESERVE)
_give(_userOrAccount(msg.sender,account),receiver,amt)
Checking function: setSplits(SplitsReceiver[],SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
IERC20Reserve(_reserveSlot().value)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(! paused(),Contract paused)
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(receivers.length <= MAX_SPLITS_RECEIVERS,Too many splits receivers)
Collected(user,collected,split)
uint64(block.timestamp)
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
_assertSplitsValid(newReceivers)
_storage().splitsHash[user] = hashSplits(newReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
SplitsUpdated(user,newReceivers)
0
_transfer(user,int128(collected))
_setSplits(msg.sender,currReceivers,newReceivers)
whenNotPaused()
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
i ++
require(bool,string)(weight != 0,Splits receiver weight is zero)
totalWeight += weight
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
prevReceiver = receiver
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(prevReceiver != receiver,Duplicate splits receivers)
require(bool,string)(prevReceiver < receiver,Splits receivers not sorted by address)
erc20Reserve.withdraw(withdraw)
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
require(bool,string)(totalWeight <= TOTAL_SPLITS_WEIGHT,Splits weights sum too high)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.transferFrom(user,address(this),deposit)
erc20Reserve.deposit(deposit)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
bytes32(0)
keccak256(bytes)(abi.encode(receivers))
StorageSlot.getAddressSlot(SLOT_RESERVE)
Checking function: reserve() returns(IERC20Reserve) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
StorageSlot.getAddressSlot(SLOT_RESERVE)
IERC20Reserve(_reserveSlot().value)
Checking function: setReserve(IERC20Reserve) returns() (Slither line:3117)
Visibility: public
erc20.approve(address(oldReserve),0)
_getAdmin()
_reserveSlot().value = address(newReserve)
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
erc20.approve(address(newReserve),type()(uint256).max)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
ReserveSet(oldReserve,newReserve)
IERC20Reserve(_reserveSlot().value)
onlyAdmin()
require(bool,string)(newReserve.erc20() == erc20,Invalid reserve ERC-20 address)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
StorageSlot.getAddressSlot(SLOT_RESERVE)
require(bool,string)(admin() == msg.sender,Caller is not the admin)
Checking function: _reserveSlot() returns(StorageSlot.AddressSlot) (Slither line:3117)
Visibility: private
Checking function: _transfer(address,int128) returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(uint64) returns() (Slither line:3117)
Checking function: collect(address,SplitsReceiver[]) returns(uint128,uint128) (Slither line:3117)
Visibility: public
0
split += splitsAmt
is an Assignment Operation (Slither line:3206)
newImplementation
receiverStates[splitsReceiver].collectable += splitsAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
currFinishedCycle + 1 - nextCollectedCycle
Split(user,splitsReceiver,splitsAmt)
IERC20Reserve(_reserveSlot().value)
_assertCurrSplits(user,currReceivers)
collected -= split
is an Assignment Operation (Slither line:3206)
newImplementation
collected = receiver.collectable
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(! paused(),Contract paused)
receiver.collectable = 0
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
(collected,split) = _collectInternal(user,currReceivers)
is an Assignment Operation (Slither line:3206)
newImplementation
collected += _flushCyclesInternal(user,cycles)
is an Assignment Operation (Slither line:3206)
newImplementation
_transfer(user,int128(collected))
Collected(user,collected,split)
uint64(block.timestamp)
0
i ++
splitsWeight += currReceivers[i].weight
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(address(erc20Reserve) != address(0),Reserve unset)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
super.collect(user,currReceivers)
whenNotPaused()
erc20Reserve.withdraw(withdraw)
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
erc20.transfer(user,withdraw)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(hashSplits(currReceivers) == _storage().splitsHash[user],Invalid current splits receivers)
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
cycle ++
StorageSlot.getBooleanSlot(SLOT_PAUSED)
erc20.transferFrom(user,address(this),deposit)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
erc20Reserve.deposit(deposit)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
bytes32(0)
keccak256(bytes)(abi.encode(receivers))
StorageSlot.getAddressSlot(SLOT_RESERVE)
Checking function: flushCycles(address,uint64) returns(uint64) (Slither line:3117)
Visibility: public
cycle ++
0
_storage().receiverStates[user].collectable += collected
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
super.flushCycles(user,maxCycles)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
dripsHubStorage = slot
is an Assignment Operation (Slither line:3206)
newImplementation
whenNotPaused()
cycles = maxCycles
is an Assignment Operation (Slither line:3206)
newImplementation
uint64(block.timestamp)
receiver.amtDeltas[cycle].thisCycle += cycleAmt
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
cycles = flushable
is an Assignment Operation (Slither line:3206)
newImplementation
currFinishedCycle + 1 - nextCollectedCycle
receiver.nextCollectedCycle = cycle
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
flushable = flushableCycles(user)
is an Assignment Operation (Slither line:3206)
newImplementation
delete receiver.amtDeltas[cycle]
require(bool,string)(! paused(),Contract paused)
0
i ++
cycleAmt += receiver.amtDeltas[cycle].thisCycle
is an Assignment Operation (Slither line:3206)
newImplementation
flushable -= cycles
is an Assignment Operation (Slither line:3206)
newImplementation
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
collectedAmt += uint128(cycleAmt)
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
cycleAmt += receiver.amtDeltas[cycle].nextCycle
is an Assignment Operation (Slither line:3206)
newImplementation
Checking function: _authorizeUpgrade(address) returns() (Slither line:3117)
Visibility: internal
Checking function: admin() returns(address) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_getAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
Checking function: changeAdmin(address) returns() (Slither line:3117)
Visibility: public
_setAdmin(newAdmin)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
_getAdmin()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_changeAdmin(newAdmin)
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
AdminChanged(_getAdmin(),newAdmin)
require(bool,string)(admin() == msg.sender,Caller is not the admin)
Checking function: paused() returns(bool) (Slither line:3117)
Visibility: public
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Checking function: pause() returns() (Slither line:3117)
Visibility: public
_getAdmin()
_pausedSlot().value = true
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
StorageSlot.getBooleanSlot(SLOT_PAUSED)
Paused(msg.sender)
whenNotPaused()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
require(bool,string)(! paused(),Contract paused)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
require(bool,string)(admin() == msg.sender,Caller is not the admin)
Checking function: unpause() returns() (Slither line:3117)
Visibility: public
require(bool,string)(admin() == msg.sender,Caller is not the admin)
_getAdmin()
StorageSlot.getBooleanSlot(SLOT_PAUSED)
_pausedSlot().value = false
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)
Unpaused(msg.sender)
require(bool,string)(paused(),Contract not paused)
whenPaused()
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
onlyAdmin()
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
_pausedSlot().value
Checking function: _pausedSlot() returns(StorageSlot.BooleanSlot) (Slither line:3117)
Visibility: private
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: external
_upgradeTo(newImplementation)
_getAdmin()
_setImplementation(newImplementation)
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3206)
newImplementation
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
functionDelegateCall(target,data,Address: low-level delegate call failed)
r = slot
is an Assignment Operation (Slither line:3206)
newImplementation
revert(string)(errorMessage)
Address.functionDelegateCall(newImplementation,data)
_setImplementation(newImplementation)
returndata
_authorizeUpgrade(newImplementation)
size > 0
Upgraded(newImplementation)
_upgradeToAndCallSecure(newImplementation,new bytes(0),false)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
newImplementation
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
StorageSlot.getAddressSlot(_ADMIN_SLOT).value
onlyProxy()
newImplementation
StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
is an Assignment Operation (Slither line:3206)
Left side is a MemberAccess (Slither line:3209)

End DaiDripsHub.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: DaiDripsHub (Slither line:1264)
Looking for getter (Slither line:1273)


Implementation retrieved by function: _getImplementation in contract: ERC1967Upgrade (Slither line:1285)

End ManagedDripsHubProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: ManagedDripsHubProxy
Setter found in contract DaiDripsHub
Found public function: constructor
Found fallback
Found external function: receive
Found public function: constructor
impl_address_from_contract_call: newImplementation
Checking external function fallback
Checking external function receive
functions_writing_to_variable: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
functions_writing_to_variable: checking function DaiDripsHub._storage (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._updateDripsBalance (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.hashDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._userOrAccount (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setSplits (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.collectable (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._emitDripsUpdated (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._dripsEndTime (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._currTimestamp (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.collect (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertDripsReceiversValid (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._getBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertCurrDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.flushableCycles (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._updateDripsReceiversStates (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertSplitsValid (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeBeaconToAndCall (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._emitDripping (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._storeNewDrips (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._totalDripsAmtPerSec (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.flushCycles (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.give (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.splitsHash (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._setAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._collectInternal (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._authorizeUpgrade (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._permit (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._assertCurrSplits (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._getImplementation (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.setReserve (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._authorizeUpgrade (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy.receive (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._setImplementation (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _setImplementation writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function ManagedDripsHubProxy._beforeFallback (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._reserveSlot (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._flushCyclesInternal (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._getBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.admin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._getImplementation (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.hashSplits (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._upgradeTo (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeTo writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._transfer (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._setBeacon (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setImplementation (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _setImplementation writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.give (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._upgradeToAndCall (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCall writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._transfer (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.paused (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._upgradeBeaconToAndCall (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeTo (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeTo writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._give (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._upgradeToAndCallSecure (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCallSecure writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.setSplits (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._delegate (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.pause (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.collect (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeToAndCall (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCall writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.constructor (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._setDelta (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.unpause (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.dripsHash (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.flushCycles (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._upgradeToAndCallSecure (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: _upgradeToAndCallSecure writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.setDripsAndPermit (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._implementation (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._getAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.reserve (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._pausedSlot (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy._implementation (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy.constructor (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: constructor writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.setDripsAndPermit (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy.constructor (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: constructor writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub._userOrAccount (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.upgradeTo (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: upgradeTo writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function DaiDripsHub.giveAndPermit (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.upgradeToAndCall (proxy_features line:893)
get_value_assigned: StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
functions_writing_to_variable: upgradeToAndCall writes newImplementation to StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value (proxy_features line:987)
functions_writing_to_variable: checking function ManagedDripsHubProxy._fallback (proxy_features line:893)
functions_writing_to_variable: checking function ManagedDripsHubProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.dripsHash (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub._getAdmin (proxy_features line:893)
functions_writing_to_variable: checking function DaiDripsHub.giveAndPermit (proxy_features line:893)
has_compatibility_checks: dependencies: []
has_compatibility_checks: skipping private function _setImplementation
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: skipping private function _setImplementation
has_compatibility_checks: skipping internal function _upgradeToAndCall
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: skipping internal function _upgradeToAndCallSecure
has_compatibility_checks: skipping internal function _upgradeToAndCall
has_compatibility_checks: skipping internal function _upgradeToAndCallSecure
has_compatibility_checks: checking public function constructor
require(bool,string)(newAdmin != address(0),ERC1967: new admin is the zero address)
has_compatibility_checks: condition newAdmin != address(0)
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
assert(bool)(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1))
has_compatibility_checks: condition _IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1)
has_compatibility_checks: checking public function constructor
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
assert(bool)(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1))
has_compatibility_checks: condition _IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
has_compatibility_checks: checking external function upgradeTo
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
has_compatibility_checks: IF node exp = ! rollbackTesting.value
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: modifier calls: ['onlyProxy()']
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
has_compatibility_checks: condition address(this) != __self
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
has_compatibility_checks: condition _getImplementation() == __self
require(bool,string)(admin() == msg.sender,Caller is not the admin)
has_compatibility_checks: condition admin() == msg.sender
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
has_compatibility_checks: condition oldImplementation == _getImplementation()
has_compatibility_checks: checking external function upgradeToAndCall
has_compatibility_checks: IF node exp = data.length > 0 || forceCall
has_compatibility_checks: IF node exp = success
has_compatibility_checks: IF node exp = ! rollbackTesting.value
require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: modifier calls: ['onlyProxy()']
check_condition_from_expression: condition extcodesize(uint256)(account) > 0
has_compatibility_checks: IF node exp = returndata.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(errorMessage)']
has_compatibility_checks: ConditionalExpression if returndata.length > 0 then returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata) else revert(string)(errorMessage)
require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_compatibility_checks: condition isContract(target)
require(bool,string)(address(this) != __self,Function must be called through delegatecall)
has_compatibility_checks: condition address(this) != __self
require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
has_compatibility_checks: condition _getImplementation() == __self
require(bool,string)(admin() == msg.sender,Caller is not the admin)
has_compatibility_checks: condition admin() == msg.sender
require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)
has_compatibility_checks: condition oldImplementation == _getImplementation()
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result__delegate_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(newImplementation)
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = _getImplementation()
has_time_delay: (node.type) RETURN
(Expression) _getAdmin()
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)
has_time_delay: (node.type) IF
(Expression) data.length > 0 || forceCall
has_time_delay: (node.type) EXPRESSION
(Expression) revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)
has_time_delay: (node.type) RETURN
(Expression) StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value
has_time_delay: (node.type) IF
(Expression) success
has_time_delay: (node.type) RETURN
(Expression) functionDelegateCall(target,data,Address: low-level delegate call failed)
has_time_delay: (node.type) EXPRESSION
(Expression) r = slot
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(errorMessage)
has_time_delay: (node.type) EXPRESSION
(Expression) Address.functionDelegateCall(newImplementation,data)
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(newImplementation)
has_time_delay: (node.type) RETURN
(Expression) returndata
has_time_delay: (node.type) EXPRESSION
(Expression) _authorizeUpgrade(newImplementation)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT)
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeToAndCallSecure(newImplementation,new bytes(0),false)
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(account)
has_time_delay: (node.type) IF
(Expression) ! rollbackTesting.value
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(Address.isContract(newImplementation),ERC1967: new implementation is not a contract)
has_time_delay: (node.type) IF
(Expression) returndata.length > 0
has_time_delay: (node.type) RETURN
(Expression) StorageSlot.getAddressSlot(_ADMIN_SLOT).value
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxy()
has_time_delay: (node.type) EXPRESSION
(Expression) newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) onlyAdmin()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isContract(target),Address: delegate call to non-contract)
has_time_delay: (node.type) EXPRESSION
(Expression) rollbackTesting.value = true
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(address(this) != __self,Function must be called through delegatecall)
has_time_delay: (node.type) EXPRESSION
(Expression) r = slot
has_time_delay: (node.type) RETURN
(Expression) verifyCallResult(success,returndata,errorMessage)
has_time_delay: (node.type) EXPRESSION
(Expression) Address.functionDelegateCall(newImplementation,abi.encodeWithSignature(upgradeTo(address),oldImplementation))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_getImplementation() == __self,Function must be called through active proxy)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returndata) = target.delegatecall(data)
has_time_delay: (node.type) EXPRESSION
(Expression) rollbackTesting.value = false
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(admin() == msg.sender,Caller is not the admin)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldImplementation == _getImplementation(),ERC1967Upgrade: upgrade breaks further upgrades)

Begin ERC20DripsHub.is_proxy (Slither line:1425)


End ERC20DripsHub.is_proxy (Slither line:1428)


Begin ERC20DripsHub.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20DripsHub 

End ERC20DripsHub.is_upgradeable_proxy (Slither line:1407)


Begin DaiDripsHub.is_proxy (Slither line:1425)


End DaiDripsHub.is_proxy (Slither line:1428)


Begin DaiDripsHub.is_upgradeable_proxy (Slither line:1136)

Checking contract: DaiDripsHub 

End DaiDripsHub.is_upgradeable_proxy (Slither line:1407)


Begin IBuilder.is_proxy (Slither line:1425)


End IBuilder.is_proxy (Slither line:1428)


Begin IBuilder.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBuilder 

End IBuilder.is_upgradeable_proxy (Slither line:1407)


Begin IDripsToken.is_proxy (Slither line:1425)


End IDripsToken.is_proxy (Slither line:1428)


Begin IDripsToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDripsToken 

End IDripsToken.is_upgradeable_proxy (Slither line:1407)


Begin DripsToken.is_proxy (Slither line:1425)


End DripsToken.is_proxy (Slither line:1428)


Begin DripsToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: DripsToken 

End DripsToken.is_upgradeable_proxy (Slither line:1407)

