
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin InterestOracle.is_proxy (Slither line:1425)


End InterestOracle.is_proxy (Slither line:1428)


Begin InterestOracle.is_upgradeable_proxy (Slither line:1136)

Checking contract: InterestOracle 

End InterestOracle.is_upgradeable_proxy (Slither line:1407)


Begin EnumerableBytes32Set.is_proxy (Slither line:1425)


End EnumerableBytes32Set.is_proxy (Slither line:1428)


Begin EnumerableBytes32Set.is_upgradeable_proxy (Slither line:1136)

Checking contract: EnumerableBytes32Set 

End EnumerableBytes32Set.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin ReentrancyGuard.is_proxy (Slither line:1425)


End ReentrancyGuard.is_proxy (Slither line:1428)


Begin ReentrancyGuard.is_upgradeable_proxy (Slither line:1136)

Checking contract: ReentrancyGuard 

End ReentrancyGuard.is_upgradeable_proxy (Slither line:1407)


Begin LenderInterestStruct.is_proxy (Slither line:1425)


End LenderInterestStruct.is_proxy (Slither line:1428)


Begin LenderInterestStruct.is_upgradeable_proxy (Slither line:1136)

Checking contract: LenderInterestStruct 

End LenderInterestStruct.is_upgradeable_proxy (Slither line:1407)


Begin LoanParamsStruct.is_proxy (Slither line:1425)


End LoanParamsStruct.is_proxy (Slither line:1428)


Begin LoanParamsStruct.is_upgradeable_proxy (Slither line:1136)

Checking contract: LoanParamsStruct 

End LoanParamsStruct.is_upgradeable_proxy (Slither line:1407)


Begin LoanStruct.is_proxy (Slither line:1425)


End LoanStruct.is_proxy (Slither line:1428)


Begin LoanStruct.is_upgradeable_proxy (Slither line:1136)

Checking contract: LoanStruct 

End LoanStruct.is_upgradeable_proxy (Slither line:1407)


Begin IWeth.is_proxy (Slither line:1425)


End IWeth.is_proxy (Slither line:1428)


Begin IWeth.is_upgradeable_proxy (Slither line:1136)

Checking contract: IWeth 

End IWeth.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin OrderStruct.is_proxy (Slither line:1425)


End OrderStruct.is_proxy (Slither line:1428)


Begin OrderStruct.is_upgradeable_proxy (Slither line:1136)

Checking contract: OrderStruct 

End OrderStruct.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin Constants.is_proxy (Slither line:1425)


End Constants.is_proxy (Slither line:1428)


Begin Constants.is_upgradeable_proxy (Slither line:1136)

Checking contract: Constants 

End Constants.is_upgradeable_proxy (Slither line:1407)


Begin LoanInterestStruct.is_proxy (Slither line:1425)


End LoanInterestStruct.is_proxy (Slither line:1428)


Begin LoanInterestStruct.is_upgradeable_proxy (Slither line:1136)

Checking contract: LoanInterestStruct 

End LoanInterestStruct.is_upgradeable_proxy (Slither line:1407)


Begin IWethERC20.is_proxy (Slither line:1425)


End IWethERC20.is_proxy (Slither line:1428)


Begin IWethERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IWethERC20 

End IWethERC20.is_upgradeable_proxy (Slither line:1407)


Begin Objects.is_proxy (Slither line:1425)


End Objects.is_proxy (Slither line:1428)


Begin Objects.is_upgradeable_proxy (Slither line:1136)

Checking contract: Objects 

End Objects.is_upgradeable_proxy (Slither line:1407)


Begin State.is_proxy (Slither line:1425)


End State.is_proxy (Slither line:1428)


Begin State.is_upgradeable_proxy (Slither line:1136)

Checking contract: State 

End State.is_upgradeable_proxy (Slither line:1407)


Begin bZxProtocol.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin bZxProtocol.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(gas(), target, add(data, 0x20), mload(data), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'target'
Looking for corresponding Variable
Current function: fallback

Begin bZxProtocol.find_delegate_variable_from_name
Searching for target (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking WEI_PRECISION (Slither line:1689)
Checking WEI_PERCENT_PRECISION (Slither line:1689)
Checking DAYS_IN_A_YEAR (Slither line:1689)
Checking ONE_MONTH (Slither line:1689)
Checking LoanDepositValueID (Slither line:1689)
Checking wethToken (Slither line:1689)
Checking bzrxTokenAddress (Slither line:1689)
Checking vbzrxTokenAddress (Slither line:1689)
Checking OOKI (Slither line:1689)
Checking REENTRANCY_GUARD_FREE (Slither line:1689)
Checking REENTRANCY_GUARD_LOCKED (Slither line:1689)
Checking reentrancyLock (Slither line:1689)
Checking _owner (Slither line:1689)
Checking priceFeeds (Slither line:1689)
Checking swapsImpl (Slither line:1689)
Checking logicTargets (Slither line:1689)
Checking loans (Slither line:1689)
Checking loanParams (Slither line:1689)
Checking lenderOrders (Slither line:1689)
Checking borrowerOrders (Slither line:1689)
Checking delegatedManagers (Slither line:1689)
Checking lenderInterest (Slither line:1689)
Checking loanInterest (Slither line:1689)
Checking logicTargetsSet (Slither line:1689)
Checking activeLoansSet (Slither line:1689)
Checking lenderLoanSets (Slither line:1689)
Checking borrowerLoanSets (Slither line:1689)
Checking userLoanParamSets (Slither line:1689)
Checking feesController (Slither line:1689)
Checking lendingFeePercent (Slither line:1689)
Checking lendingFeeTokensHeld (Slither line:1689)
Checking lendingFeeTokensPaid (Slither line:1689)
Checking tradingFeePercent (Slither line:1689)
Checking tradingFeeTokensHeld (Slither line:1689)
Checking tradingFeeTokensPaid (Slither line:1689)
Checking borrowingFeePercent (Slither line:1689)
Checking borrowingFeeTokensHeld (Slither line:1689)
Checking borrowingFeeTokensPaid (Slither line:1689)
Checking protocolTokenHeld (Slither line:1689)
Checking protocolTokenPaid (Slither line:1689)
Checking affiliateFeePercent (Slither line:1689)
Checking liquidationIncentivePercent (Slither line:1689)
Checking loanPoolToUnderlying (Slither line:1689)
Checking underlyingToLoanPool (Slither line:1689)
Checking loanPoolsSet (Slither line:1689)
Checking supportedTokens (Slither line:1689)
Checking maxDisagreement (Slither line:1689)
Checking sourceBufferPercent (Slither line:1689)
Checking maxSwapSize (Slither line:1689)
Checking poolLastUpdateTime (Slither line:1689)
Checking poolPrincipalTotal (Slither line:1689)
Checking poolInterestTotal (Slither line:1689)
Checking poolRatePerTokenStored (Slither line:1689)
Checking loanInterestTotal (Slither line:1689)
Checking loanRatePerTokenPaid (Slither line:1689)
Checking poolLastInterestRate (Slither line:1689)
Checking poolInterestRateObservations (Slither line:1689)
Checking poolLastIdx (Slither line:1689)
Checking timeDelta (Slither line:1689)
Checking twaiLength (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking target (Slither line:1703)
target is a Local Variable in bZxProtocol.fallback (Slither line:1707)
Expression: logicTargets[msg.sig] (Slither line:1719)
logicTargets is a State Variable in contract State (Slither line:1749)

End bZxProtocol.find_delegate_variable_by_name


End bZxProtocol.find_delegatecall_in_asm (Slither line:1637)


End bZxProtocol.is_proxy (Slither line:1476)


Begin bZxProtocol.is_upgradeable_proxy (Slither line:1136)

Checking contract: bZxProtocol 
bZxProtocol is delegating to logicTargets
Looking for setter (Slither line:1200)

Looking for setter in State (Slither line:1204)


Begin State.find_setter_in_contract (Slither line:3119)

Checking function: _setTarget(bytes4,address) returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: owner() returns(address) (Slither line:3127)
Visibility: public
_owner
Checking function: isOwner() returns(bool) (Slither line:3127)
Visibility: public
msg.sender
_msgSender() == _owner
Checking function: renounceOwnership() returns() (Slither line:3127)
Visibility: public
OwnershipTransferred(_owner,address(0))
require(bool,string)(isOwner(),Ownable: caller is not the owner)
_owner = address(0)
is an Assignment Operation (Slither line:3216)
msg.sender
_msgSender() == _owner
onlyOwner()
Checking function: transferOwnership(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)
_transferOwnership(newOwner)
require(bool,string)(isOwner(),Ownable: caller is not the owner)
onlyOwner()
OwnershipTransferred(_owner,newOwner)
msg.sender
_owner = newOwner
is an Assignment Operation (Slither line:3216)
_msgSender() == _owner
Checking function: _transferOwnership(address) returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: _msgSender() returns(address) (Slither line:3127)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3127)
Visibility: internal

End State.find_setter_in_contract (Slither line:3345)


Could not find setter in State 
Looking in bZxProtocol (Slither line:1213)

Begin bZxProtocol.find_setter_in_contract (Slither line:3119)

Checking function: fallback() returns() (Slither line:3127)
Checking function: replaceContract(address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(success,setup failed)
require(bool,string)(isOwner(),Ownable: caller is not the owner)
msg.sender
_msgSender() == _owner
onlyOwner()
(success) = target.delegatecall(abi.encodeWithSignature(initialize(address),target))
is an Assignment Operation (Slither line:3216)
Checking function: setTargets(string[],address[]) returns() (Slither line:3127)
Visibility: external
require(bool,string)(sigsArr.length == targetsArr.length,count mismatch)
set.index[value] = set.values.push(value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
true
require(bool,string)(isOwner(),Ownable: caller is not the owner)
delete set.index[value]
msg.sender
_msgSender() == _owner
set.index[value] != 0
false
set.values[toDeleteIndex] = lastValue
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
logicTargets[sig] = target
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)

End bZxProtocol.find_setter_in_contract (Slither line:3345)


Implementation set by function: setTargets in contract: bZxProtocol (Slither line:1264)
Looking for getter (Slither line:1273)


Begin State.find_getter_in_contract (Slither line:2974)

logicTargets is a Variable object
target
Checking function: constructor (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable  (Slither line:3008)
RETURN node expression: _owner (Slither line:3028)
Checking function: isOwner (Slither line:2988)
isOwner returns bool variable  (Slither line:3008)
RETURN node expression: _msgSender() == _owner (Slither line:3028)
Checking function: renounceOwnership (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _transferOwnership (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: _setTarget (Slither line:2988)
Checking function: slitherConstructorVariables (Slither line:2988)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End State.find_getter_in_contract (Slither line:3083)


Begin bZxProtocol.find_getter_in_contract (Slither line:2974)

logicTargets is a Variable object
target
Checking function: _setTarget (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable  (Slither line:3008)
RETURN node expression: _owner (Slither line:3028)
Checking function: isOwner (Slither line:2988)
isOwner returns bool variable  (Slither line:3008)
RETURN node expression: _msgSender() == _owner (Slither line:3028)
Checking function: renounceOwnership (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _transferOwnership (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: fallback (Slither line:2988)
Checking function: replaceContract (Slither line:2988)
Checking function: setTargets (Slither line:2988)
Checking function: getTarget (Slither line:2988)
getTarget returns address variable  (Slither line:3008)
RETURN node expression: logicTargets[bytes4(keccak256(bytes)(abi.encodePacked(sig)))] (Slither line:3028)

End bZxProtocol.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: getTarget in contract: bZxProtocol (Slither line:1285)

End bZxProtocol.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: target
impl_address_from_contract_call: StateVariable logicTargets
impl_address_from_contract_call: getter is getTarget
getter.full_name = getTarget(string)
library call: EnumerableBytes32Set.addBytes32
library call: EnumerableBytes32Set.removeBytes32
impl_address_from_contract_call: CallExpression require(bool,string)(target != address(0),target not active)
impl_address_from_contract_call: arg is target != address(0)
impl_address_from_contract_call: arg is target not active
Checking public function owner
Checking public function isOwner
Checking public function renounceOwnership
Checking public function transferOwnership
Checking external function replaceContract
Checking external function setTargets
Checking external function getTarget
Checking external function fallback
functions_writing_to_variable: logicTargets
functions_writing_to_variable: checking function bZxProtocol.owner (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol._transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.constructor (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol._msgSender (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.replaceContract (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.setTargets (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol._setTarget (proxy_features line:898)
functions_writing_to_variable: exp = logicTargets[sig] = target (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: logicTargets[sig] = target (proxy_features line:912)
functions_writing_to_variable: IndexAccess: logicTargets[sig] (proxy_features line:920)
functions_writing_to_variable: Identifier: logicTargets (proxy_features line:924)
get_value_assigned: logicTargets[sig] = target
functions_writing_to_variable: exp = target != address(0) (proxy_features line:909)
functions_writing_to_variable: exp = logicTargetsSet.addBytes32(bytes32(sig)) (proxy_features line:909)
functions_writing_to_variable: exp = logicTargetsSet.removeBytes32(bytes32(sig)) (proxy_features line:909)
functions_writing_to_variable: _setTarget writes target to logicTargets (proxy_features line:929)
functions_writing_to_variable: checking function bZxProtocol.getTarget (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.fallback (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.renounceOwnership (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.isOwner (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.constructor (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol.slitherConstructorVariables (proxy_features line:898)
functions_writing_to_variable: checking function bZxProtocol._msgData (proxy_features line:898)
has_compatibility_checks: dependencies: ['target', 'targetsArr', 'REF_89']
has_compatibility_checks: skipping internal function _setTarget
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(gas(), target, add(data, 0x20), mload(data), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: data = msg.data
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: target = logicTargets[msg.sig]
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(target != address(0),target not active)
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: gasleft()() <= 2300
can_toggle_delegatecall_on_off: successors:
 NodeType: NEW VARIABLE  expression: data = msg.data
 NodeType: NEW VARIABLE  expression: target = logicTargets[msg.sig]
 NodeType: INLINE ASM  expression: {
    let result := delegatecall(gas(), target, add(data, 0x20), mload(data), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off: delegatecall_condition = False
 NodeType: EXPRESSION  expression: require(bool,string)(target != address(0),target not active)
 NodeType: END_IF  expression: None
 NodeType: RETURN  expression: None
Found public function: owner
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastIndex = set.values.length - 1
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(sigsArr.length == targetsArr.length,count mismatch)
has_time_delay: (node.type) EXPRESSION
(Expression) set.index[value] = set.values.push(value)
has_time_delay: (node.type) IF
(Expression) lastIndex != toDeleteIndex
has_time_delay: (node.type) RETURN
(Expression) true
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isOwner(),Ownable: caller is not the owner)
has_time_delay: (node.type) EXPRESSION
(Expression) delete set.index[value]
has_time_delay: (node.type) RETURN
(Expression) msg.sender
has_time_delay: (node.type) RETURN
(Expression) _msgSender() == _owner
has_time_delay: (node.type) RETURN
(Expression) set.index[value] != 0
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastValue = set.values[lastIndex]
has_time_delay: (node.type) NEW VARIABLE
(Expression) i = 0
has_time_delay: (node.type) EXPRESSION
(Expression) set.values[toDeleteIndex] = lastValue
has_time_delay: (node.type) EXPRESSION
(Expression) logicTargets[sig] = target
has_time_delay: (node.type) NEW VARIABLE
(Expression) toDeleteIndex = set.index[value] - 1
has_time_delay: (node.type) IF_LOOP
(Expression) i < sigsArr.length
has_time_delay: (node.type) IF
(Expression) target != address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) set.index[lastValue] = toDeleteIndex + 1
has_time_delay: (node.type) EXPRESSION
(Expression) set.values.pop()
has_time_delay: (node.type) EXPRESSION
(Expression) i ++
has_time_delay: (node.type) IF
(Expression) contains(set,value)
has_time_delay: (node.type) EXPRESSION
(Expression) _setTarget(bytes4(keccak256(bytes)(abi.encodePacked(sigsArr[i]))),targetsArr[i])
has_time_delay: (node.type) EXPRESSION
(Expression) logicTargetsSet.addBytes32(bytes32(sig))
has_time_delay: (node.type) RETURN
(Expression) true
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) logicTargetsSet.removeBytes32(bytes32(sig))
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) IF
(Expression) ! contains(set,value)
