{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "Proxy (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#687-757)",
        "elements": [],
        "description": "Proxy (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#687-757) is a proxy, but doesn't seem upgradeable.\n",
        "id": "cb70bcec6d81585d7521ef499de1dc4cc025c9eb09a62b94cfe4ec81796afff6",
        "features": {
          "upgradeable": false
        }
      },
      {
        "contract": "BeaconProxy (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#1061-1105)",
        "elements": [],
        "description": "BeaconProxy (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#1061-1105) is an upgradeable proxy.\n_implementation was found in a different contract.\n_implementation is an address state variable.\nUpgradeableBeacon._implementation (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#1124) gets value from a cross-contract call: IBeacon(_getBeacon()).implementation()\nMultiAddress appears to be a Beacon contract for the proxy\nThe address of MultiAddress comes from the value of ERC1967Upgrade._getBeacon(). (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#1008)\nFound compatibility checks in all upgrade functions.\nTo remove upgradeability, delete upgradeTo from UpgradeableBeacon\n",
        "id": "f06bef18363328bc074344765dcf0785881188cc066b5ee0dfa9f9ca8f140032",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "UpgradeableBeacon._implementation",
          "impl_address_setter": "UpgradeableBeacon.upgradeTo(address)",
          "impl_address_getter": "UpgradeableBeacon.implementation()",
          "impl_address_location": "UpgradeableBeacon (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.8.9/9e./ethereum/contracts/kovan/9e/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol/9E284cE513430F0F9E8B827b42552D2d0d793A7c_MultiAddress.sol#1123-1172)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "IBeacon(_getBeacon()).implementation()",
          "beacon": "MultiAddress",
          "beacon_source_type": "address",
          "beacon_source_variable": "",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": {
              "UpgradeableBeacon.upgradeTo(address)": {
                "check": "require(bool,string)(extcodesize(uint256)(account) > 0,UpgradeableBeacon: implementation is not a contract)",
                "is_correct": true
              },
              "UpgradeableBeacon.constructor(address)": {
                "check": "require(bool,string)(extcodesize(uint256)(account) > 0,UpgradeableBeacon: implementation is not a contract)",
                "is_correct": true
              }
            }
          },
          "can_remove_upgradeability": true,
          "how_to_remove_upgradeability": "remove upgradeTo from UpgradeableBeacon"
        }
      }
    ]
  }
}