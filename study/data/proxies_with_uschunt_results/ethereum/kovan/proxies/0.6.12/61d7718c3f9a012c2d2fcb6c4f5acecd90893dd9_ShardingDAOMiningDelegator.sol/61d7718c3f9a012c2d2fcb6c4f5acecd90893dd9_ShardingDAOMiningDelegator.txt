
Begin DelegationStorage.is_proxy (Slither line:1425)


End DelegationStorage.is_proxy (Slither line:1428)


Begin DelegationStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegationStorage 

End DelegationStorage.is_upgradeable_proxy (Slither line:1407)


Begin DelegatorInterface.is_proxy (Slither line:1425)


End DelegatorInterface.is_proxy (Slither line:1428)


Begin DelegatorInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegatorInterface 

End DelegatorInterface.is_upgradeable_proxy (Slither line:1407)


Begin DelegateInterface.is_proxy (Slither line:1425)


End DelegateInterface.is_proxy (Slither line:1428)


Begin DelegateInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateInterface 

End DelegateInterface.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin SafeERC20.is_proxy (Slither line:1425)


End SafeERC20.is_proxy (Slither line:1428)


Begin SafeERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeERC20 

End SafeERC20.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin FullMath.is_proxy (Slither line:1425)


End FullMath.is_proxy (Slither line:1428)


Begin FullMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: FullMath 

End FullMath.is_upgradeable_proxy (Slither line:1407)


Begin Babylonian.is_proxy (Slither line:1425)


End Babylonian.is_proxy (Slither line:1428)


Begin Babylonian.is_upgradeable_proxy (Slither line:1136)

Checking contract: Babylonian 

End Babylonian.is_upgradeable_proxy (Slither line:1407)


Begin BitMath.is_proxy (Slither line:1425)


End BitMath.is_proxy (Slither line:1428)


Begin BitMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: BitMath 

End BitMath.is_upgradeable_proxy (Slither line:1407)


Begin FixedPoint.is_proxy (Slither line:1425)


End FixedPoint.is_proxy (Slither line:1428)


Begin FixedPoint.is_upgradeable_proxy (Slither line:1136)

Checking contract: FixedPoint 

End FixedPoint.is_upgradeable_proxy (Slither line:1407)


Begin IUniswapV2Pair.is_proxy (Slither line:1425)


End IUniswapV2Pair.is_proxy (Slither line:1428)


Begin IUniswapV2Pair.is_upgradeable_proxy (Slither line:1136)

Checking contract: IUniswapV2Pair 

End IUniswapV2Pair.is_upgradeable_proxy (Slither line:1407)


Begin UniswapV2OracleLibrary.is_proxy (Slither line:1425)


End UniswapV2OracleLibrary.is_proxy (Slither line:1428)


Begin UniswapV2OracleLibrary.is_upgradeable_proxy (Slither line:1136)

Checking contract: UniswapV2OracleLibrary 

End UniswapV2OracleLibrary.is_upgradeable_proxy (Slither line:1407)


Begin IInvitation.is_proxy (Slither line:1425)


End IInvitation.is_proxy (Slither line:1428)


Begin IInvitation.is_upgradeable_proxy (Slither line:1136)

Checking contract: IInvitation 

End IInvitation.is_upgradeable_proxy (Slither line:1407)


Begin ActivityBase.is_proxy (Slither line:1425)


End ActivityBase.is_proxy (Slither line:1428)


Begin ActivityBase.is_upgradeable_proxy (Slither line:1136)

Checking contract: ActivityBase 

End ActivityBase.is_upgradeable_proxy (Slither line:1407)


Begin ERC20.is_proxy (Slither line:1425)


End ERC20.is_proxy (Slither line:1428)


Begin ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20 

End ERC20.is_upgradeable_proxy (Slither line:1407)


Begin SHDToken.is_proxy (Slither line:1425)


End SHDToken.is_proxy (Slither line:1428)


Begin SHDToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: SHDToken 

End SHDToken.is_upgradeable_proxy (Slither line:1407)


Begin ShardingDAOMining.is_proxy (Slither line:1425)


End ShardingDAOMining.is_proxy (Slither line:1428)


Begin ShardingDAOMining.is_upgradeable_proxy (Slither line:1136)

Checking contract: ShardingDAOMining 

End ShardingDAOMining.is_upgradeable_proxy (Slither line:1407)


Begin ShardingDAOMiningDelegator.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ShardingDAOMiningDelegator.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_112671_225_0_fallback_asm_0 = success (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End ShardingDAOMiningDelegator.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ShardingDAOMiningDelegator.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
free_mem_ptr_fallback_asm_0
returndatasize()()

End ShardingDAOMiningDelegator.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ShardingDAOMiningDelegator.find_delegatecall_in_asm (Slither line:1541)


End ShardingDAOMiningDelegator.find_delegatecall_in_asm (Slither line:1637)


Begin ShardingDAOMiningDelegator.find_delegatecall_in_asm (Slither line:1541)


End ShardingDAOMiningDelegator.find_delegatecall_in_asm (Slither line:1637)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ShardingDAOMiningDelegator.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
free_mem_ptr_fallback_asm_0
returndatasize()()

End ShardingDAOMiningDelegator.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


Found LowLevelCall (Slither line:2730)


Found delegatecall in LowLevelCall (Slither line:2732)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End ShardingDAOMiningDelegator.is_proxy (Slither line:1476)


Begin ShardingDAOMiningDelegator.is_upgradeable_proxy (Slither line:1136)

Checking contract: ShardingDAOMiningDelegator 
ShardingDAOMiningDelegator is delegating to implementation
Looking for setter (Slither line:1200)

Looking for setter in DelegationStorage (Slither line:1204)


Begin DelegationStorage.find_setter_in_contract (Slither line:3109)


End DelegationStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in DelegationStorage 
Looking in ShardingDAOMiningDelegator (Slither line:1213)

Begin ShardingDAOMiningDelegator.find_setter_in_contract (Slither line:3109)

Checking function: constructor(SHDToken,address,address,address,uint256,uint256,address,bytes) returns() (Slither line:3117)
Checking function: _setImplementation(address,bool,bytes) returns() (Slither line:3117)
Visibility: public
(success,returnData) = callee.delegatecall(data)
is an Assignment Operation (Slither line:3206)
require(bool,string)(admin == msg.sender,invalid authorized)
delegateTo(implementation,data)
delegateToImplementation(abi.encodeWithSignature(_resignImplementation()))
returnData
implementation = implementation_
is an Assignment Operation (Slither line:3206)

End ShardingDAOMiningDelegator.find_setter_in_contract (Slither line:3315)


Implementation set by function: _setImplementation in contract: ShardingDAOMiningDelegator (Slither line:1264)
Looking for getter (Slither line:1273)


Begin DelegationStorage.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_

End DelegationStorage.find_getter_in_contract (Slither line:3073)


Begin ShardingDAOMiningDelegator.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_
Checking function: initialize (Slither line:2978)
Checking function: initializeTimeWeight (Slither line:2978)
Checking function: setNftShard (Slither line:2978)
Checking function: add (Slither line:2978)
Checking function: setPriceUpdateTerm (Slither line:2978)
Checking function: kickEvilPoolByPid (Slither line:2978)
Checking function: addInBlackList (Slither line:2978)
Checking function: resetEvilPool (Slither line:2978)
Checking function: dealEvilPoolDiviend (Slither line:2978)
Checking function: setMintCoefficient (Slither line:2978)
Checking function: setShardPoolDividendWeight (Slither line:2978)
Checking function: setSHDPerBlock (Slither line:2978)
Checking function: massUpdatePools (Slither line:2978)
Checking function: updatePoolDividend (Slither line:2978)
Checking function: mintSHARD (Slither line:2978)
mintSHARD returns uint256 variable  (Slither line:2998)
RETURN node expression: farmMint (Slither line:3018)
RETURN node expression: 0 (Slither line:3018)
Checking function: updatePoolAccumulativeDividend (Slither line:2978)
Checking function: updateSHARDPoolAccumulativeDividend (Slither line:2978)
Checking function: deposit (Slither line:2978)
Checking function: withdraw (Slither line:2978)
Checking function: addToRank (Slither line:2978)
Checking function: tryToReplacePoolInRank (Slither line:2978)
Checking function: acceptInvitation (Slither line:2978)
Checking function: buildInvitation (Slither line:2978)
Checking function: setMaxRankNumber (Slither line:2978)
Checking function: getModifiedRewardToken (Slither line:2978)
getModifiedRewardToken returns uint256 variable  (Slither line:2998)
RETURN node expression: getRewardToken(_fromBlock,_toBlock).mul(shardMintWeight).div(reserveMintWeight.add(shardMintWeight)) (Slither line:3018)
Checking function: pendingSHARDByPids (Slither line:2978)
pendingSHARDByPids returns uint256[] variable called _pending (Slither line:2998)
pendingSHARDByPids returns uint256[] variable called _potential (Slither line:2998)
pendingSHARDByPids returns uint256 variable called _blockNumber (Slither line:2998)
Checking function: calculatePendingSHARD (Slither line:2978)
calculatePendingSHARD returns uint256 variable called _pending (Slither line:2998)
calculatePendingSHARD returns uint256 variable called _potential (Slither line:2998)
RETURN node expression: (_pending,0) (Slither line:3018)
RETURN node expression: (0,0) (Slither line:3018)
RETURN node expression: (_pending,0) (Slither line:3018)
Checking function: getDepositWeight (Slither line:2978)
getDepositWeight returns uint256 variable  (Slither line:2998)
RETURN node expression: 0 (Slither line:3018)
RETURN node expression: depositTimeWeight[_lockTime.sub(1)].sub(500).mul(_lockAmount) (Slither line:3018)
Checking function: getPoolLength (Slither line:2978)
getPoolLength returns uint256 variable  (Slither line:2998)
RETURN node expression: poolInfo.length (Slither line:3018)
Checking function: getPagePoolInfo (Slither line:2978)
getPagePoolInfo returns uint256[] variable called _nftPoolId (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _accumulativeDividend (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _usersTotalWeight (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _lpTokenAmount (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _oracleWeight (Slither line:2998)
getPagePoolInfo returns address[] variable called _swapAddress (Slither line:2998)
Checking function: getInstantPagePoolInfo (Slither line:2978)
getInstantPagePoolInfo returns uint256[] variable called _nftPoolId (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _accumulativeDividend (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _usersTotalWeight (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _lpTokenAmount (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _oracleWeight (Slither line:2998)
getInstantPagePoolInfo returns address[] variable called _swapAddress (Slither line:2998)
Checking function: getRankList (Slither line:2978)
getRankList returns uint256[] variable  (Slither line:2998)
RETURN node expression: rankIdList (Slither line:3018)
Checking function: getBlackList (Slither line:2978)
getBlackList returns ShardingDAOMining.EvilPoolInfo[] variable called _blackList (Slither line:2998)
Checking function: getInvitation (Slither line:2978)
getInvitation returns address variable called _invitor (Slither line:2998)
getInvitation returns address[] variable called _invitees (Slither line:2998)
getInvitation returns bool variable called _isWithdrawn (Slither line:2998)
Checking function: getUserInfo (Slither line:2978)
getUserInfo returns uint256 variable called _amount (Slither line:2998)
getUserInfo returns uint256 variable called _originWeight (Slither line:2998)
getUserInfo returns uint256 variable called _modifiedWeight (Slither line:2998)
getUserInfo returns uint256 variable called _endBlock (Slither line:2998)
Checking function: getUserInfoByPids (Slither line:2978)
getUserInfoByPids returns uint256[] variable called _amount (Slither line:2998)
getUserInfoByPids returns uint256[] variable called _originWeight (Slither line:2998)
getUserInfoByPids returns uint256[] variable called _modifiedWeight (Slither line:2998)
getUserInfoByPids returns uint256[] variable called _endBlock (Slither line:2998)
Checking function: safeSHARDTransfer (Slither line:2978)
Checking function: updateUserInfo (Slither line:2978)
Checking function: getOracleWeight (Slither line:2978)
getOracleWeight returns uint256 variable called _oracleWeight (Slither line:2998)
Checking function: calculateOracleWeight (Slither line:2978)
calculateOracleWeight returns uint256 variable called _oracleWeight (Slither line:2998)
RETURN node expression: 0 (Slither line:3018)
Checking function: resetInvitationRelationship (Slither line:2978)
Checking function: modifyWeightByInvitation (Slither line:2978)
Checking function: verifyDescription (Slither line:2978)
verifyDescription returns bool variable called success (Slither line:2998)
Checking function: getUserModifiedWeight (Slither line:2978)
getUserModifiedWeight returns uint256 variable  (Slither line:2998)
RETURN node expression: modifiedWeight (Slither line:3018)
Checking function: getRewardToken (Slither line:2978)
getRewardToken returns uint256 variable  (Slither line:2998)
RETURN node expression: calculateRewardToken(MINT_DECREASE_TERM,SHDPerBlock,startBlock,_fromBlock,_toBlock) (Slither line:3018)
Checking function: calculateRewardToken (Slither line:2978)
calculateRewardToken returns uint256 variable  (Slither line:2998)
RETURN node expression: totalReward (Slither line:3018)
RETURN node expression: 0 (Slither line:3018)
Checking function: getTargetTokenInSwap (Slither line:2978)
getTargetTokenInSwap returns address variable  (Slither line:2998)
getTargetTokenInSwap returns address variable  (Slither line:2998)
getTargetTokenInSwap returns uint256 variable  (Slither line:2998)
RETURN node expression: (token0,token1,1) (Slither line:3018)
RETURN node expression: (token0,token1,0) (Slither line:3018)
Checking function: generateOrcaleInfo (Slither line:2978)
generateOrcaleInfo returns ShardingDAOMining.TokenPairInfo variable  (Slither line:2998)
RETURN node expression: tokenBInfo (Slither line:3018)
Checking function: initializeTokenOracle (Slither line:2978)
Checking function: updateTokenOracle (Slither line:2978)
updateTokenOracle returns FixedPoint.uq112x112 variable called _price (Slither line:2998)
RETURN node expression: cachedPrice (Slither line:3018)
Checking function: updateAfterModifyStartBlock (Slither line:2978)
Checking function: setDividendWeight (Slither line:2978)
Checking function: setDeveloperDAOFund (Slither line:2978)
Checking function: setTokenAmountLimit (Slither line:2978)
Checking function: setTokenAmountLimitFeeRate (Slither line:2978)
Checking function: setContracSenderFeeRate (Slither line:2978)
Checking function: setStartBlock (Slither line:2978)
Checking function: transferAdmin (Slither line:2978)
Checking function: setMarketingFund (Slither line:2978)
Checking function: updateAfterModifyStartBlock (Slither line:2978)
Checking function: calculateDividend (Slither line:2978)
calculateDividend returns uint256 variable called _marketingFundDividend (Slither line:2998)
calculateDividend returns uint256 variable called _devDividend (Slither line:2998)
calculateDividend returns uint256 variable called _userDividend (Slither line:2998)
Checking function: judgeContractSender (Slither line:2978)
Checking function: checkAdmin (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: owner (Slither line:2978)
owner returns address variable  (Slither line:2998)
RETURN node expression: _owner (Slither line:3018)
Checking function: renounceOwnership (Slither line:2978)
Checking function: transferOwnership (Slither line:2978)
Checking function: _msgSender (Slither line:2978)
_msgSender returns address variable  (Slither line:2998)
RETURN node expression: msg.sender (Slither line:3018)
Checking function: _msgData (Slither line:2978)
_msgData returns bytes variable  (Slither line:2998)
RETURN node expression: msg.data (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: _setImplementation (Slither line:2978)
Checking function: delegateTo (Slither line:2978)
delegateTo returns bytes variable  (Slither line:2998)
RETURN node expression: returnData (Slither line:3018)
Checking function: delegateToImplementation (Slither line:2978)
delegateToImplementation returns bytes variable  (Slither line:2998)
RETURN node expression: delegateTo(implementation,data) (Slither line:3018)
Checking function: delegateToViewImplementation (Slither line:2978)
delegateToViewImplementation returns bytes variable  (Slither line:2998)
RETURN node expression: abi.decode(returnData,(bytes)) (Slither line:3018)
Checking function: fallback (Slither line:2978)
Checking function: setNftShard (Slither line:2978)
Checking function: add (Slither line:2978)
Checking function: setPriceUpdateTerm (Slither line:2978)
Checking function: kickEvilPoolByPid (Slither line:2978)
Checking function: resetEvilPool (Slither line:2978)
Checking function: setMintCoefficient (Slither line:2978)
Checking function: setShardPoolDividendWeight (Slither line:2978)
Checking function: setStartBlock (Slither line:2978)
Checking function: setSHDPerBlock (Slither line:2978)
Checking function: massUpdatePools (Slither line:2978)
Checking function: updatePoolDividend (Slither line:2978)
Checking function: deposit (Slither line:2978)
Checking function: withdraw (Slither line:2978)
Checking function: tryToReplacePoolInRank (Slither line:2978)
Checking function: acceptInvitation (Slither line:2978)
Checking function: setMaxRankNumber (Slither line:2978)
Checking function: setDeveloperDAOFund (Slither line:2978)
Checking function: setDividendWeight (Slither line:2978)
Checking function: setTokenAmountLimit (Slither line:2978)
Checking function: setTokenAmountLimitFeeRate (Slither line:2978)
Checking function: setContracSenderFeeRate (Slither line:2978)
Checking function: transferAdmin (Slither line:2978)
Checking function: setMarketingFund (Slither line:2978)
Checking function: pendingSHARDByPids (Slither line:2978)
pendingSHARDByPids returns uint256[] variable called _pending (Slither line:2998)
pendingSHARDByPids returns uint256[] variable called _potential (Slither line:2998)
pendingSHARDByPids returns uint256 variable called _blockNumber (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[],uint256[],uint256)) (Slither line:3018)
Checking function: getPoolLength (Slither line:2978)
getPoolLength returns uint256 variable  (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: getPagePoolInfo (Slither line:2978)
getPagePoolInfo returns uint256[] variable called _nftPoolId (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _accumulativeDividend (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _usersTotalWeight (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _lpTokenAmount (Slither line:2998)
getPagePoolInfo returns uint256[] variable called _oracleWeight (Slither line:2998)
getPagePoolInfo returns address[] variable called _swapAddress (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[],uint256[],uint256[],uint256[],uint256[],address[])) (Slither line:3018)
Checking function: getInstantPagePoolInfo (Slither line:2978)
getInstantPagePoolInfo returns uint256[] variable called _nftPoolId (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _accumulativeDividend (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _usersTotalWeight (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _lpTokenAmount (Slither line:2998)
getInstantPagePoolInfo returns uint256[] variable called _oracleWeight (Slither line:2998)
getInstantPagePoolInfo returns address[] variable called _swapAddress (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[],uint256[],uint256[],uint256[],uint256[],address[])) (Slither line:3018)
Checking function: getRankList (Slither line:2978)
getRankList returns uint256[] variable  (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[])) (Slither line:3018)
Checking function: getBlackList (Slither line:2978)
getBlackList returns ShardingDAOMining.EvilPoolInfo[] variable called _blackList (Slither line:2998)
RETURN node expression: abi.decode(data,(EvilPoolInfo)) (Slither line:3018)
Checking function: getInvitation (Slither line:2978)
getInvitation returns address variable called _invitor (Slither line:2998)
getInvitation returns address[] variable called _invitees (Slither line:2998)
getInvitation returns bool variable called _isWithdrawn (Slither line:2998)
RETURN node expression: abi.decode(data,(address,address[],bool)) (Slither line:3018)
Checking function: getUserInfoByPids (Slither line:2978)
getUserInfoByPids returns uint256[] variable called _amount (Slither line:2998)
getUserInfoByPids returns uint256[] variable called _originWeight (Slither line:2998)
getUserInfoByPids returns uint256[] variable called _modifiedWeight (Slither line:2998)
getUserInfoByPids returns uint256[] variable called _endBlock (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[],uint256[],uint256[],uint256[])) (Slither line:3018)
Checking function: getRewardToken (Slither line:2978)
getRewardToken returns uint256 variable  (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: slitherConstructorVariables (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End ShardingDAOMiningDelegator.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in ShardingDAOMiningDelegator (Slither line:1305)
or in DelegationStorage (Slither line:1319)

Begin DelegatorInterface.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_

End DelegatorInterface.find_getter_in_contract (Slither line:3073)


End ShardingDAOMiningDelegator.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: implementation_
impl_address_from_contract_call: StateVariable implementation
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression implementation.delegatecall(msg.data)
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(free_mem_ptr_fallback_asm_0,0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression mload(uint256)(0x40)
impl_address_from_contract_call: arg is 0x40
Checking public function initialize
Checking external function setNftShard
Checking external function add
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nftShard || msg.sender == admin,invalid sender)
Checking external function setPriceUpdateTerm
Checking external function kickEvilPoolByPid
Checking external function resetEvilPool
Checking external function setMintCoefficient
Checking external function setShardPoolDividendWeight
Checking external function setSHDPerBlock
Checking public function initialize
Checking external function setNftShard
Checking external function add
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nftShard || msg.sender == admin,invalid sender)
Checking external function setPriceUpdateTerm
Checking external function kickEvilPoolByPid
Checking external function resetEvilPool
Checking external function setMintCoefficient
Checking external function setShardPoolDividendWeight
Checking external function setSHDPerBlock
Checking public function massUpdatePools
Checking public function updatePoolDividend
Checking external function deposit
Checking external function withdraw
Checking external function tryToReplacePoolInRank
Checking external function acceptInvitation
Checking external function setMaxRankNumber
Checking external function pendingSHARDByPids
Checking external function getPoolLength
Checking external function getPagePoolInfo
Checking external function getInstantPagePoolInfo
Checking external function getRankList
Checking external function getBlackList
Checking external function getInvitation
Checking external function getUserInfoByPids
Checking public function getRewardToken
Checking external function setDividendWeight
Checking external function setDeveloperDAOFund
Checking external function setTokenAmountLimit
Checking external function setTokenAmountLimitFeeRate
Checking external function setContracSenderFeeRate
Checking external function setStartBlock
Checking external function transferAdmin
Checking external function setMarketingFund
Checking public function owner
Checking public function renounceOwnership
Checking public function transferOwnership
Checking external function acceptInvitation
Checking external function getInvitation
Checking public function _setImplementation
Checking public function _setImplementation
Checking public function delegateToImplementation
Checking public function delegateToViewImplementation
Checking external function setNftShard
Checking external function add
Checking external function setPriceUpdateTerm
Checking external function kickEvilPoolByPid
Checking external function resetEvilPool
Checking external function setMintCoefficient
Checking external function setShardPoolDividendWeight
Checking external function setStartBlock
Checking external function setSHDPerBlock
Checking public function massUpdatePools
Checking public function updatePoolDividend
Checking external function deposit
Checking external function withdraw
Checking external function tryToReplacePoolInRank
Checking external function acceptInvitation
Checking external function setMaxRankNumber
Checking external function setDeveloperDAOFund
Checking external function setDividendWeight
Checking external function setTokenAmountLimit
Checking external function setTokenAmountLimitFeeRate
Checking external function setContracSenderFeeRate
Checking external function transferAdmin
Checking external function setMarketingFund
Checking external function pendingSHARDByPids
Checking external function getPoolLength
Checking external function getPagePoolInfo
Checking external function getInstantPagePoolInfo
Checking external function getRankList
Checking external function getBlackList
Checking external function getInvitation
Checking external function getUserInfoByPids
Checking public function getRewardToken
Checking external function fallback
functions_writing_to_variable: implementation
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator._setImplementation (proxy_features line:893)
functions_writing_to_variable: exp = checkAdmin() (proxy_features line:904)
functions_writing_to_variable: exp = allowResign (proxy_features line:904)
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (proxy_features line:904)
functions_writing_to_variable: exp = oldImplementation = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: oldImplementation = implementation (proxy_features line:907)
functions_writing_to_variable: exp = implementation = implementation_ (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: implementation = implementation_ (proxy_features line:907)
functions_writing_to_variable: Identifier: implementation (proxy_features line:919)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData)) (proxy_features line:904)
functions_writing_to_variable: exp = NewImplementation(oldImplementation,implementation) (proxy_features line:904)
functions_writing_to_variable: exp = require(bool,string)(admin == msg.sender,invalid authorized) (proxy_features line:904)
functions_writing_to_variable: exp = delegateTo(implementation,data) (proxy_features line:904)
functions_writing_to_variable: exp = (success,returnData) = callee.delegatecall(data) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: (success,returnData) = callee.delegatecall(data) (proxy_features line:907)
functions_writing_to_variable: exp = success == 0 (proxy_features line:904)
functions_writing_to_variable: exp = revert(uint256,uint256)(returnData + 0x20,returndatasize()()) (proxy_features line:904)
functions_writing_to_variable: exp = returnData (proxy_features line:904)
functions_writing_to_variable: _setImplementation writes implementation_ to implementation (proxy_features line:924)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.safeSHARDTransfer (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setTokenAmountLimit (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator._msgSender (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.delegateTo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getBlackList (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.acceptInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.delegateToImplementation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setTokenAmountLimitFeeRate (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator._msgData (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.delegateToViewImplementation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setNftShard (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.buildInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getDepositWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.fallback (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.acceptInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.add (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setContracSenderFeeRate (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setNftShard (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setMaxRankNumber (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getUserInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setPriceUpdateTerm (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.add (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getRankList (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updateUserInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setStartBlock (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setPriceUpdateTerm (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getPoolLength (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getModifiedRewardToken (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator._setImplementation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.kickEvilPoolByPid (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getUserInfoByPids (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.resetEvilPool (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getOracleWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.pendingSHARDByPids (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.transferAdmin (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.kickEvilPoolByPid (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setMintCoefficient (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getPagePoolInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.addInBlackList (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setShardPoolDividendWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setMarketingFund (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setStartBlock (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getInstantPagePoolInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.calculatePendingSHARD (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updateAfterModifyStartBlock (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setSHDPerBlock (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.calculateOracleWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.resetEvilPool (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getUserModifiedWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setMarketingFund (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.resetInvitationRelationship (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.massUpdatePools (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updatePoolAccumulativeDividend (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.calculateDividend (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.pendingSHARDByPids (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updatePoolDividend (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.dealEvilPoolDiviend (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getRewardToken (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getPoolLength (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.judgeContractSender (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.deposit (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getPagePoolInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.modifyWeightByInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.initializeTokenOracle (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setMintCoefficient (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.withdraw (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updateSHARDPoolAccumulativeDividend (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getInstantPagePoolInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.tryToReplacePoolInRank (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.calculateRewardToken (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getRankList (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setShardPoolDividendWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.acceptInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getBlackList (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setMaxRankNumber (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.deposit (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getInvitation (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updateTokenOracle (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setSHDPerBlock (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setDeveloperDAOFund (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getUserInfoByPids (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getTargetTokenInSwap (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.checkAdmin (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.withdraw (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.verifyDescription (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setDividendWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.getRewardToken (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updateAfterModifyStartBlock (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.massUpdatePools (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.constructor (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setTokenAmountLimit (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setTokenAmountLimitFeeRate (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.owner (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.addToRank (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setDividendWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.initialize (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setContracSenderFeeRate (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.updatePoolDividend (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.setDeveloperDAOFund (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.initializeTimeWeight (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.generateOrcaleInfo (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.constructor (proxy_features line:893)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: constructor writes implementation_ to implementation (proxy_features line:1008)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.transferAdmin (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.mintSHARD (proxy_features line:893)
functions_writing_to_variable: checking function ShardingDAOMiningDelegator.tryToReplacePoolInRank (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation_', 'implementation_']
has_compatibility_checks: checking public function _setImplementation
has_compatibility_checks: IF node exp = allowResign
require(bool,string)(admin == msg.sender,invalid authorized)
has_compatibility_checks: condition admin == msg.sender
has_compatibility_checks: IF node exp = success == 0
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: ConditionalExpression if success == 0 then revert(uint256,uint256)(returnData + 0x20,returndatasize()()) else returnData
has_compatibility_checks: checking public function constructor
has_compatibility_checks: IF node exp = allowResign
require(bool,string)(admin == msg.sender,invalid authorized)
has_compatibility_checks: condition admin == msg.sender
has_compatibility_checks: IF node exp = success == 0
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: ConditionalExpression if success == 0 then revert(uint256,uint256)(returnData + 0x20,returndatasize()()) else returnData
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: (success) = implementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off:
 dominator node type: END_IF
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: msg.value > 0
can_toggle_delegatecall_on_off: successors:
 NodeType: NEW VARIABLE  expression: None
 NodeType: END_IF  expression: None
 NodeType: EXPRESSION  expression: switch_expr_112671_225_0_fallback_asm_0 = success
 NodeType: NEW VARIABLE  expression: None
 NodeType: IF  expression: switch_expr_112671_225_0_fallback_asm_0 == 0
 NodeType: EXPRESSION  expression: return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
 NodeType: INLINE ASM  expression: {'AST': {'nodeType': 'YulBlock', 'src': '112548:359:0', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '112563:31:0', 'value': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '112589:4:0', 'type': '', 'value': '0x40'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '112583:5:0'}, 'nodeType': 'YulFunctionCall', 'src': '112583:11:0'}, 'variables': [{'name': 'free_mem_ptr', 'nodeType': 'YulTypedName', 'src': '112567:12:0', 'type': ''}]}, {'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '112623:12:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '112637:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '112640:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '112640:16:0'}], 'functionName': {'name': 'returndatacopy', 'nodeType': 'YulIdentifier', 'src': '112608:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '112608:49:0'}, 'nodeType': 'YulExpressionStatement', 'src': '112608:49:0'}, {'cases': [{'body': {'nodeType': 'YulBlock', 'src': '112710:80:0', 'statements': [{'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '112740:12:0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '112754:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '112754:16:0'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '112733:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '112733:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '112733:38:0'}]}, 'nodeType': 'YulCase', 'src': '112703:87:0', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '112708:1:0', 'type': '', 'value': '0'}}, {'body': {'nodeType': 'YulBlock', 'src': '112816:80:0', 'statements': [{'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '112846:12:0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '112860:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '112860:16:0'}], 'functionName': {'name': 'return', 'nodeType': 'YulIdentifier', 'src': '112839:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '112839:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '112839:38:0'}]}, 'nodeType': 'YulCase', 'src': '112808:88:0', 'value': 'default'}], 'expression': {'name': 'success', 'nodeType': 'YulIdentifier', 'src': '112678:7:0'}, 'nodeType': 'YulSwitch', 'src': '112671:225:0'}]}, 'evmVersion': 'istanbul', 'externalReferences': [{'declaration': 8474, 'isOffset': False, 'isSlot': False, 'src': '112678:7:0', 'valueSize': 1}], 'id': 8481, 'nodeType': 'InlineAssembly', 'src': '112539:368:0'}
 NodeType: NEW VARIABLE  expression: None
 NodeType: END_IF  expression: None
 NodeType: EXPRESSION  expression: revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
 NodeType: EXPRESSION  expression: (success) = implementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off: delegatecall_condition = False
 NodeType: EXPRESSION  expression: returndatacopy(uint256,uint256,uint256)(free_mem_ptr_fallback_asm_0,0,returndatasize()())
 NodeType: EXPRESSION  expression: free_mem_ptr_fallback_asm_0 = mload(uint256)(0x40)
 NodeType: RETURN  expression: None
Found public function: initialize
has_time_delay: (node.type) IF
(Expression) allowResign
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returnData) = callee.delegatecall(data)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(admin == msg.sender,invalid authorized)
has_time_delay: (node.type) RETURN
(Expression) delegateTo(implementation,data)
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_resignImplementation()))
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = implementation
has_time_delay: (node.type) RETURN
(Expression) returnData
has_time_delay: (node.type) EXPRESSION
(Expression) implementation = implementation_
has_time_delay: (node.type) IF
(Expression) success == 0
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData))
has_time_delay: (node.type) EXPRESSION
(Expression) checkAdmin()
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(oldImplementation,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(uint256,uint256)(returnData + 0x20,returndatasize()())
