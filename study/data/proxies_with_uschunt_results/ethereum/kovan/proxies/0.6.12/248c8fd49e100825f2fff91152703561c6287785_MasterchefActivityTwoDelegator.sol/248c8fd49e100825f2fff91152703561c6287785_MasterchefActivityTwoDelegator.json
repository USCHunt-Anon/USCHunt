{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "MasterchefActivityTwoDelegator (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.6.12/248c8fd49e100825f2fff91152703561c6287785_MasterchefActivityTwoDelegator.sol/248c8fd49e100825f2fff91152703561c6287785_MasterchefActivityTwoDelegator.sol#2521-3055)",
        "elements": [],
        "description": "MasterchefActivityTwoDelegator (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.6.12/248c8fd49e100825f2fff91152703561c6287785_MasterchefActivityTwoDelegator.sol/248c8fd49e100825f2fff91152703561c6287785_MasterchefActivityTwoDelegator.sol#2521-3055) is an upgradeable proxy.\nimplementation was found in a different contract.\nimplementation is an address state variable.\n uses Inherited Storage\nMissing compatibility check in MasterchefActivityTwoDelegator.constructor(SHARDToken,address,address,address,uint256,uint256,address,bytes)\nMissing compatibility check in MasterchefActivityTwoDelegator._setImplementation(address,bool,bytes)\nCan toggle delegatecall on/off: condition: msg.value > 0\n",
        "id": "e2a5b1dc9952b0327e8f623b9174c9aebd5404f5c61f49cae295e2a11ee9b0a1",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "DelegationStorage.implementation",
          "impl_address_setter": "MasterchefActivityTwoDelegator._setImplementation(address,bool,bytes)",
          "impl_address_getter": "not found",
          "impl_address_location": "DelegationStorage (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.6.12/248c8fd49e100825f2fff91152703561c6287785_MasterchefActivityTwoDelegator.sol/248c8fd49e100825f2fff91152703561c6287785_MasterchefActivityTwoDelegator.sol#10-15)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "inherited_storage": true,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "MasterchefActivityTwoDelegator.constructor(SHARDToken,address,address,address,uint256,uint256,address,bytes)": "missing",
              "MasterchefActivityTwoDelegator._setImplementation(address,bool,bytes)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "can_toggle_delegatecall": true,
          "toggle_delegatecall_condition": "!msg.value > 0",
          "toggle_alternative_logic": "None",
          "immutable_functions": {
            "other": [
              "_setImplementation(address,bool,bytes)",
              "initialize(SHARDToken,address,address,address,uint256,uint256)",
              "setNftShard(address)",
              "add(uint256,IUniswapV2Pair,IUniswapV2Pair)",
              "setPriceUpdateTerm(uint256)",
              "kickEvilPoolByPid(uint256,string)",
              "resetEvilPool(uint256)",
              "setMintCoefficient(uint256,uint256)",
              "setShardPoolDividendWeight(uint256,uint256)",
              "massUpdatePools()",
              "updatePoolDividend(uint256)",
              "deposit(uint256,uint256,uint256)",
              "withdraw(uint256)",
              "tryToReplacePoolInRank(uint256,uint256)",
              "acceptInvitation(address)",
              "setMaxRankNumber(uint256)",
              "pendingSHARD(uint256,address)",
              "getPoolLength()",
              "getPagePoolInfo(uint256,uint256)",
              "getInstantPagePoolInfo(uint256,uint256)",
              "getRankList()",
              "getBlackList()",
              "getInvitation(address)",
              "getUserInfo(uint256,address)",
              "getOracleInfo(uint256)",
              "getRewardToken(uint256,uint256)",
              "setDividendWeight(uint256,uint256)",
              "setDeveloperAddress(address)",
              "setTokenAmountLimit(uint256,uint256)",
              "setTokenAmountLimitFeeRate(uint256,uint256)",
              "setContracSenderFeeRate(uint256,uint256)",
              "setStartBlock(uint256)",
              "tansferAdmin(address)",
              "owner()",
              "renounceOwnership()",
              "transferOwnership(address)",
              "acceptInvitation(address)",
              "getInvitation(address)",
              "_setImplementation(address,bool,bytes)",
              "delegateToImplementation(bytes)",
              "delegateToViewImplementation(bytes)",
              "setNftShard(address)",
              "add(uint256,IUniswapV2Pair,IUniswapV2Pair)",
              "setPriceUpdateTerm(uint256)",
              "kickEvilPoolByPid(uint256,string)",
              "resetEvilPool(uint256)",
              "setMintCoefficient(uint256,uint256)",
              "setShardPoolDividendWeight(uint256,uint256)",
              "setStartBlock(uint256)",
              "massUpdatePools()",
              "updatePoolDividend(uint256)",
              "deposit(uint256,uint256,uint256)",
              "withdraw(uint256)",
              "tryToReplacePoolInRank(uint256,uint256)",
              "acceptInvitation(address)",
              "setMaxRankNumber(uint256)",
              "setDeveloperAddress(address)",
              "setDividendWeight(uint256,uint256)",
              "setTokenAmountLimit(uint256,uint256)",
              "setTokenAmountLimitFeeRate(uint256,uint256)",
              "setContracSenderFeeRate(uint256,uint256)",
              "tansferAdmin(address)",
              "pendingSHARD(uint256,address)",
              "getPoolLength()",
              "getPagePoolInfo(uint256,uint256)",
              "getInstantPagePoolInfo(uint256,uint256)",
              "getRankList()",
              "getBlackList()",
              "getInvitation(address)",
              "getUserInfo(uint256,address)",
              "getOracleInfo(uint256)",
              "getRewardToken(uint256,uint256)"
            ]
          }
        }
      }
    ]
  }
}