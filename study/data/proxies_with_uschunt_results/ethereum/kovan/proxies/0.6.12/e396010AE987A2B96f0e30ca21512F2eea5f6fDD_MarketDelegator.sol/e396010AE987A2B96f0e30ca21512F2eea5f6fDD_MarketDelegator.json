{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "MarketDelegator (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.6.12/e396010AE987A2B96f0e30ca21512F2eea5f6fDD_MarketDelegator.sol/e396010AE987A2B96f0e30ca21512F2eea5f6fDD_MarketDelegator.sol#342-802)",
        "elements": [],
        "description": "MarketDelegator (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.6.12/e396010AE987A2B96f0e30ca21512F2eea5f6fDD_MarketDelegator.sol/e396010AE987A2B96f0e30ca21512F2eea5f6fDD_MarketDelegator.sol#342-802) is an upgradeable proxy.\nimplementation was found in a different contract.\nimplementation is an address state variable.\n uses Inherited Storage\nMissing compatibility check in MarketDelegator._setImplementation(address,bool,bytes)\nMissing compatibility check in MarketDelegator.constructor(address,address,address,address,address,address,address,address,address,address,bytes)\nCan toggle delegatecall on/off: condition: msg.value > 0\n",
        "id": "1c965de94cce1c34f64807b318563ca78a98cb4825a5f769224c0729b3ce8546",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "DelegationStorage.implementation",
          "impl_address_setter": "MarketDelegator._setImplementation(address,bool,bytes)",
          "impl_address_getter": "not found",
          "impl_address_location": "DelegationStorage (../../smart-contract-sanctuary/ethereum/contracts/kovan/sorted/0.6.12/e396010AE987A2B96f0e30ca21512F2eea5f6fDD_MarketDelegator.sol/e396010AE987A2B96f0e30ca21512F2eea5f6fDD_MarketDelegator.sol#293-298)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "inherited_storage": true,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "MarketDelegator._setImplementation(address,bool,bytes)": "missing",
              "MarketDelegator.constructor(address,address,address,address,address,address,address,address,address,address,bytes)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "can_toggle_delegatecall": true,
          "toggle_delegatecall_condition": "!msg.value > 0",
          "toggle_alternative_logic": "None",
          "immutable_functions": {
            "other": [
              "_setImplementation(address,bool,bytes)",
              "createShard(address,uint256,string,string,uint256,address)",
              "stakeETH(uint256)",
              "stake(uint256,uint256)",
              "redeem(uint256,uint256)",
              "redeemETH(uint256,uint256)",
              "settle(uint256)",
              "redeemInSubscriptionFailed(uint256)",
              "usersWithdrawShardToken(uint256)",
              "creatorWithdrawWantToken(uint256)",
              "applyForBuyout(uint256,uint256)",
              "applyForBuyoutETH(uint256)",
              "vote(uint256,bool)",
              "voteResultConfirm(uint256)",
              "exchangeForWantToken(uint256,uint256)",
              "redeemForBuyoutFailed(uint256)",
              "setShardsCreatorProportion(uint256)",
              "setPlatformProportion(uint256)",
              "setTotalSupply(uint256)",
              "setDeadlineForRedeem(uint256)",
              "setDeadlineForStake(uint256)",
              "setDev(address)",
              "setProfitProportionForDev(uint256)",
              "setGovernance(address)",
              "setTokenBar(address)",
              "setShardsFarm(address)",
              "setRegulator(address)",
              "shardAudit(uint256,bool)",
              "getPrice(uint256)",
              "getAllPools()",
              "onERC721Received(address,address,uint256,bytes)",
              "_setImplementation(address,bool,bytes)",
              "createShard(address,uint256,string,string,uint256,address)",
              "stake(uint256,uint256)",
              "stakeETH(uint256)",
              "redeem(uint256,uint256)",
              "redeemETH(uint256,uint256)",
              "settle(uint256)",
              "redeemInSubscriptionFailed(uint256)",
              "usersWithdrawShardToken(uint256)",
              "creatorWithdrawWantToken(uint256)",
              "applyForBuyout(uint256,uint256)",
              "applyForBuyoutETH(uint256)",
              "vote(uint256,bool)",
              "voteResultConfirm(uint256)",
              "exchangeForWantToken(uint256,uint256)",
              "redeemForBuyoutFailed(uint256)",
              "getPrice(uint256)",
              "setDeadlineForStake(uint256)",
              "setDeadlineForRedeem(uint256)",
              "setShardsCreatorProportion(uint256)",
              "setPlatformProportion(uint256)",
              "setTotalSupply(uint256)",
              "setDev(address)",
              "setProfitProportionForDev(uint256)",
              "setGovernance(address)",
              "setTokenBar(address)",
              "setShardsFarm(address)",
              "setRegulator(address)",
              "shardAudit(uint256,bool)",
              "getAllPools()",
              "onERC721Received(address,address,uint256,bytes)",
              "delegateToImplementation(bytes)",
              "delegateToViewImplementation(bytes)"
            ]
          }
        }
      }
    ]
  }
}