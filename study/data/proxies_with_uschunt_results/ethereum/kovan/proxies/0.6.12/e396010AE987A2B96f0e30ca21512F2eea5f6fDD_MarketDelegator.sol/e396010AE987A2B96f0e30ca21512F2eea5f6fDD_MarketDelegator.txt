
Begin IERC721Receiver.is_proxy (Slither line:1425)


End IERC721Receiver.is_proxy (Slither line:1428)


Begin IERC721Receiver.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Receiver 

End IERC721Receiver.is_upgradeable_proxy (Slither line:1407)


Begin IShardsMarketStorge.is_proxy (Slither line:1425)


End IShardsMarketStorge.is_proxy (Slither line:1428)


Begin IShardsMarketStorge.is_upgradeable_proxy (Slither line:1136)

Checking contract: IShardsMarketStorge 

End IShardsMarketStorge.is_upgradeable_proxy (Slither line:1407)


Begin IShardsMarket.is_proxy (Slither line:1425)


End IShardsMarket.is_proxy (Slither line:1428)


Begin IShardsMarket.is_upgradeable_proxy (Slither line:1136)

Checking contract: IShardsMarket 

End IShardsMarket.is_upgradeable_proxy (Slither line:1407)


Begin DelegationStorage.is_proxy (Slither line:1425)


End DelegationStorage.is_proxy (Slither line:1428)


Begin DelegationStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegationStorage 

End DelegationStorage.is_upgradeable_proxy (Slither line:1407)


Begin DelegatorInterface.is_proxy (Slither line:1425)


End DelegatorInterface.is_proxy (Slither line:1428)


Begin DelegatorInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegatorInterface 

End DelegatorInterface.is_upgradeable_proxy (Slither line:1407)


Begin DelegateInterface.is_proxy (Slither line:1425)


End DelegateInterface.is_proxy (Slither line:1428)


Begin DelegateInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateInterface 

End DelegateInterface.is_upgradeable_proxy (Slither line:1407)


Begin MarketDelegator.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin MarketDelegator.find_delegatecall_in_asm (Slither line:1541)


End MarketDelegator.find_delegatecall_in_asm (Slither line:1637)


Begin MarketDelegator.find_delegatecall_in_asm (Slither line:1541)


End MarketDelegator.find_delegatecall_in_asm (Slither line:1637)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin MarketDelegator.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
free_mem_ptr_fallback_asm_0
returndatasize()()

End MarketDelegator.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


Found LowLevelCall (Slither line:2730)


Found delegatecall in LowLevelCall (Slither line:2732)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End MarketDelegator.is_proxy (Slither line:1476)


Begin MarketDelegator.is_upgradeable_proxy (Slither line:1136)

Checking contract: MarketDelegator 
MarketDelegator is delegating to implementation
Looking for setter (Slither line:1200)

Looking for setter in DelegationStorage (Slither line:1204)


Begin DelegationStorage.find_setter_in_contract (Slither line:3109)


End DelegationStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in DelegationStorage 
Looking in MarketDelegator (Slither line:1213)

Begin MarketDelegator.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address,address,address,address,address,address,address,address,address,address,bytes) returns() (Slither line:3117)
Checking function: _setImplementation(address,bool,bytes) returns() (Slither line:3117)
Visibility: public
implementation = implementation_
is an Assignment Operation (Slither line:3206)

End MarketDelegator.find_setter_in_contract (Slither line:3315)


Implementation set by function: _setImplementation in contract: MarketDelegator (Slither line:1264)
Looking for getter (Slither line:1273)


Begin DelegationStorage.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_

End DelegationStorage.find_getter_in_contract (Slither line:3073)


Begin MarketDelegator.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_
Checking function: shardAudit (Slither line:2978)
Checking function: getPrice (Slither line:2978)
getPrice returns uint256 variable called currentPrice (Slither line:2998)
Checking function: getAllPools (Slither line:2978)
getAllPools returns uint256[] variable called _pools (Slither line:2998)
Checking function: constructor (Slither line:2978)
Checking function: _setImplementation (Slither line:2978)
Checking function: createShard (Slither line:2978)
createShard returns uint256 variable called shardPoolId (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: stake (Slither line:2978)
Checking function: stakeETH (Slither line:2978)
Checking function: redeem (Slither line:2978)
Checking function: redeemETH (Slither line:2978)
Checking function: settle (Slither line:2978)
Checking function: redeemInSubscriptionFailed (Slither line:2978)
Checking function: usersWithdrawShardToken (Slither line:2978)
Checking function: creatorWithdrawWantToken (Slither line:2978)
Checking function: applyForBuyout (Slither line:2978)
applyForBuyout returns uint256 variable called proposalId (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: applyForBuyoutETH (Slither line:2978)
applyForBuyoutETH returns uint256 variable called proposalId (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: vote (Slither line:2978)
Checking function: voteResultConfirm (Slither line:2978)
voteResultConfirm returns bool variable called result (Slither line:2998)
RETURN node expression: abi.decode(data,(bool)) (Slither line:3018)
Checking function: exchangeForWantToken (Slither line:2978)
exchangeForWantToken returns uint256 variable called wantTokenAmount (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: redeemForBuyoutFailed (Slither line:2978)
redeemForBuyoutFailed returns uint256 variable called shardTokenAmount (Slither line:2998)
redeemForBuyoutFailed returns uint256 variable called wantTokenAmount (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256,uint256)) (Slither line:3018)
Checking function: getPrice (Slither line:2978)
getPrice returns uint256 variable called currentPrice (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: setDeadlineForStake (Slither line:2978)
Checking function: setDeadlineForRedeem (Slither line:2978)
Checking function: setShardsCreatorProportion (Slither line:2978)
Checking function: setPlatformProportion (Slither line:2978)
Checking function: setTotalSupply (Slither line:2978)
Checking function: setDev (Slither line:2978)
Checking function: setProfitProportionForDev (Slither line:2978)
Checking function: setGovernance (Slither line:2978)
Checking function: setTokenBar (Slither line:2978)
Checking function: setShardsFarm (Slither line:2978)
Checking function: setRegulator (Slither line:2978)
Checking function: shardAudit (Slither line:2978)
Checking function: getAllPools (Slither line:2978)
getAllPools returns uint256[] variable called _pools (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[])) (Slither line:3018)
Checking function: onERC721Received (Slither line:2978)
onERC721Received returns bytes4 variable  (Slither line:2998)
RETURN node expression: 0x150b7a02 (Slither line:3018)
Checking function: delegateTo (Slither line:2978)
delegateTo returns bytes variable  (Slither line:2998)
RETURN node expression: returnData (Slither line:3018)
Checking function: delegateToImplementation (Slither line:2978)
delegateToImplementation returns bytes variable  (Slither line:2998)
RETURN node expression: delegateTo(implementation,data) (Slither line:3018)
Checking function: delegateToViewImplementation (Slither line:2978)
delegateToViewImplementation returns bytes variable  (Slither line:2998)
RETURN node expression: abi.decode(returnData,(bytes)) (Slither line:3018)
Checking function: fallback (Slither line:2978)
Checking function: slitherConstructorVariables (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End MarketDelegator.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in MarketDelegator (Slither line:1305)
or in DelegationStorage (Slither line:1319)

Begin DelegatorInterface.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_

End DelegatorInterface.find_getter_in_contract (Slither line:3073)


End MarketDelegator.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: implementation_
impl_address_from_contract_call: StateVariable implementation
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression implementation.delegatecall(msg.data)
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(free_mem_ptr_fallback_asm_0,0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression mload(uint256)(0x40)
impl_address_from_contract_call: arg is 0x40
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
Checking public function _setImplementation
Checking external function createShard
Checking external function stakeETH
Checking external function stake
Checking external function redeem
Checking external function redeemETH
Checking external function settle
Checking external function redeemInSubscriptionFailed
Checking external function usersWithdrawShardToken
Checking external function creatorWithdrawWantToken
Checking external function applyForBuyout
Checking external function applyForBuyoutETH
Checking external function vote
Checking external function voteResultConfirm
Checking external function exchangeForWantToken
Checking external function redeemForBuyoutFailed
Checking external function setShardsCreatorProportion
Checking external function setPlatformProportion
Checking external function setTotalSupply
Checking external function setDeadlineForRedeem
Checking external function setDeadlineForStake
Checking external function setDev
Checking external function setProfitProportionForDev
Checking external function setGovernance
Checking external function setTokenBar
Checking external function setShardsFarm
Checking external function setRegulator
Checking external function shardAudit
Checking public function getPrice
Checking external function getAllPools
Checking external function onERC721Received
Checking public function _setImplementation
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
Checking external function createShard
Checking external function stake
Checking external function stakeETH
Checking external function redeem
Checking external function redeemETH
Checking external function settle
Checking external function redeemInSubscriptionFailed
Checking external function usersWithdrawShardToken
Checking external function creatorWithdrawWantToken
Checking external function applyForBuyout
Checking external function applyForBuyoutETH
Checking external function vote
Checking external function voteResultConfirm
Checking external function exchangeForWantToken
Checking external function redeemForBuyoutFailed
Checking public function getPrice
Checking external function setDeadlineForStake
Checking external function setDeadlineForRedeem
Checking external function setShardsCreatorProportion
Checking external function setPlatformProportion
Checking external function setTotalSupply
Checking external function setDev
Checking external function setProfitProportionForDev
Checking external function setGovernance
Checking external function setTokenBar
Checking external function setShardsFarm
Checking external function setRegulator
Checking external function shardAudit
Checking external function getAllPools
Checking external function onERC721Received
Checking public function delegateToImplementation
Checking public function delegateToViewImplementation
Checking external function fallback
functions_writing_to_variable: implementation
functions_writing_to_variable: checking function MarketDelegator.setShardsCreatorProportion (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.voteResultConfirm (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setPlatformProportion (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.getPrice (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.delegateToViewImplementation (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator._setImplementation (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin) (proxy_features line:904)
functions_writing_to_variable: exp = allowResign (proxy_features line:904)
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (proxy_features line:904)
functions_writing_to_variable: exp = oldImplementation = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: oldImplementation = implementation (proxy_features line:907)
functions_writing_to_variable: exp = implementation = implementation_ (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: implementation = implementation_ (proxy_features line:907)
functions_writing_to_variable: Identifier: implementation (proxy_features line:919)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData)) (proxy_features line:904)
functions_writing_to_variable: exp = NewImplementation(oldImplementation,implementation) (proxy_features line:904)
functions_writing_to_variable: exp = delegateTo(implementation,data) (proxy_features line:904)
functions_writing_to_variable: exp = (success,returnData) = callee.delegatecall(data) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: (success,returnData) = callee.delegatecall(data) (proxy_features line:907)
functions_writing_to_variable: exp = success == 0 (proxy_features line:904)
functions_writing_to_variable: exp = revert(uint256,uint256)(returnData + 0x20,returndatasize()()) (proxy_features line:904)
functions_writing_to_variable: exp = returnData (proxy_features line:904)
functions_writing_to_variable: _setImplementation writes implementation_ to implementation (proxy_features line:924)
functions_writing_to_variable: checking function MarketDelegator.setTokenBar (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.applyForBuyoutETH (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.stakeETH (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setDeadlineForStake (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeemInSubscriptionFailed (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeemInSubscriptionFailed (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.exchangeForWantToken (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeem (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setTotalSupply (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setRegulator (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.fallback (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.exchangeForWantToken (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.createShard (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.usersWithdrawShardToken (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeemForBuyoutFailed (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.shardAudit (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setShardsFarm (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setDev (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setDev (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.stake (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.usersWithdrawShardToken (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.getAllPools (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setPlatformProportion (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.creatorWithdrawWantToken (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.getPrice (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.getAllPools (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator._setImplementation (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeemETH (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.stakeETH (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setProfitProportionForDev (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeemForBuyoutFailed (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.vote (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setRegulator (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.applyForBuyout (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setDeadlineForStake (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setProfitProportionForDev (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.onERC721Received (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.creatorWithdrawWantToken (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setGovernance (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setTotalSupply (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.createShard (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeem (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.applyForBuyoutETH (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setDeadlineForRedeem (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.delegateTo (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.onERC721Received (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.shardAudit (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.redeemETH (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setTokenBar (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.settle (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setGovernance (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.vote (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.applyForBuyout (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setShardsCreatorProportion (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.delegateToImplementation (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.voteResultConfirm (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.stake (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setDeadlineForRedeem (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.constructor (proxy_features line:893)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: constructor writes implementation_ to implementation (proxy_features line:1008)
functions_writing_to_variable: checking function MarketDelegator.settle (proxy_features line:893)
functions_writing_to_variable: checking function MarketDelegator.setShardsFarm (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation_', 'implementation_']
has_compatibility_checks: checking public function _setImplementation
has_compatibility_checks: IF node exp = success == 0
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: ConditionalExpression if success == 0 then revert(uint256,uint256)(returnData + 0x20,returndatasize()()) else returnData
require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
has_compatibility_checks: condition msg.sender == governance
has_compatibility_checks: IF node exp = allowResign
has_compatibility_checks: checking public function constructor
has_compatibility_checks: IF node exp = success == 0
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: ConditionalExpression if success == 0 then revert(uint256,uint256)(returnData + 0x20,returndatasize()()) else returnData
require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
has_compatibility_checks: condition msg.sender == governance
has_compatibility_checks: IF node exp = allowResign
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: msg.value > 0
can_toggle_delegatecall_on_off: successors:
 NodeType: NEW VARIABLE  expression: None
 NodeType: INLINE ASM  expression: {'AST': {'nodeType': 'YulBlock', 'src': '23886:359:0', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '23901:31:0', 'value': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '23927:4:0', 'type': '', 'value': '0x40'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '23921:5:0'}, 'nodeType': 'YulFunctionCall', 'src': '23921:11:0'}, 'variables': [{'name': 'free_mem_ptr', 'nodeType': 'YulTypedName', 'src': '23905:12:0', 'type': ''}]}, {'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '23961:12:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '23975:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '23978:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '23978:16:0'}], 'functionName': {'name': 'returndatacopy', 'nodeType': 'YulIdentifier', 'src': '23946:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '23946:49:0'}, 'nodeType': 'YulExpressionStatement', 'src': '23946:49:0'}, {'cases': [{'body': {'nodeType': 'YulBlock', 'src': '24048:80:0', 'statements': [{'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '24078:12:0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '24092:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '24092:16:0'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '24071:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '24071:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '24071:38:0'}]}, 'nodeType': 'YulCase', 'src': '24041:87:0', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '24046:1:0', 'type': '', 'value': '0'}}, {'body': {'nodeType': 'YulBlock', 'src': '24154:80:0', 'statements': [{'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '24184:12:0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '24198:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '24198:16:0'}], 'functionName': {'name': 'return', 'nodeType': 'YulIdentifier', 'src': '24177:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '24177:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '24177:38:0'}]}, 'nodeType': 'YulCase', 'src': '24146:88:0', 'value': 'default'}], 'expression': {'name': 'success', 'nodeType': 'YulIdentifier', 'src': '24016:7:0'}, 'nodeType': 'YulSwitch', 'src': '24009:225:0'}]}, 'evmVersion': 'istanbul', 'externalReferences': [{'declaration': 1260, 'isOffset': False, 'isSlot': False, 'src': '24016:7:0', 'valueSize': 1}], 'id': 1267, 'nodeType': 'InlineAssembly', 'src': '23877:368:0'}
 NodeType: END_IF  expression: None
 NodeType: EXPRESSION  expression: return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
 NodeType: EXPRESSION  expression: (success) = implementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off: delegatecall_condition = False
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: returndatacopy(uint256,uint256,uint256)(free_mem_ptr_fallback_asm_0,0,returndatasize()())
 NodeType: EXPRESSION  expression: free_mem_ptr_fallback_asm_0 = mload(uint256)(0x40)
 NodeType: EXPRESSION  expression: switch_expr_24009_225_0_fallback_asm_0 = success
 NodeType: RETURN  expression: None
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
 NodeType: IF  expression: switch_expr_24009_225_0_fallback_asm_0 == 0
 NodeType: END_IF  expression: None
Found public function: _setImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) implementation = implementation_
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData))
has_time_delay: (node.type) RETURN
(Expression) delegateTo(implementation,data)
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(oldImplementation,implementation)
has_time_delay: (node.type) RETURN
(Expression) returnData
has_time_delay: (node.type) IF
(Expression) success == 0
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(uint256,uint256)(returnData + 0x20,returndatasize()())
has_time_delay: (node.type) IF
(Expression) allowResign
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_resignImplementation()))
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = implementation
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returnData) = callee.delegatecall(data)
