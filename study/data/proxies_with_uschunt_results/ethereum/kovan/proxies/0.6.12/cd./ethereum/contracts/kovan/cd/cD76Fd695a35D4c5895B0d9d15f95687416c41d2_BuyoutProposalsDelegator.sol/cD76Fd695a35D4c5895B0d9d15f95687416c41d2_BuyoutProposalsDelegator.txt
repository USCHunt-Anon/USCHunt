
Begin IBuyoutProposalsStorge.is_proxy (Slither line:1425)


End IBuyoutProposalsStorge.is_proxy (Slither line:1428)


Begin IBuyoutProposalsStorge.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBuyoutProposalsStorge 

End IBuyoutProposalsStorge.is_upgradeable_proxy (Slither line:1407)


Begin IBuyoutProposals.is_proxy (Slither line:1425)


End IBuyoutProposals.is_proxy (Slither line:1428)


Begin IBuyoutProposals.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBuyoutProposals 

End IBuyoutProposals.is_upgradeable_proxy (Slither line:1407)


Begin DelegationStorage.is_proxy (Slither line:1425)


End DelegationStorage.is_proxy (Slither line:1428)


Begin DelegationStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegationStorage 

End DelegationStorage.is_upgradeable_proxy (Slither line:1407)


Begin DelegatorInterface.is_proxy (Slither line:1425)


End DelegatorInterface.is_proxy (Slither line:1428)


Begin DelegatorInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegatorInterface 

End DelegatorInterface.is_upgradeable_proxy (Slither line:1407)


Begin DelegateInterface.is_proxy (Slither line:1425)


End DelegateInterface.is_proxy (Slither line:1428)


Begin DelegateInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateInterface 

End DelegateInterface.is_upgradeable_proxy (Slither line:1407)


Begin BuyoutProposalsDelegator.is_proxy (Slither line:1425)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BuyoutProposalsDelegator.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
free_mem_ptr_fallback_asm_0
returndatasize()()

End BuyoutProposalsDelegator.find_delegatecall_in_exp_node (Slither line:2848)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BuyoutProposalsDelegator.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
free_mem_ptr_fallback_asm_0
returndatasize()()

End BuyoutProposalsDelegator.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BuyoutProposalsDelegator.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_13439_225_0_fallback_asm_0 = success (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End BuyoutProposalsDelegator.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin BuyoutProposalsDelegator.find_delegatecall_in_asm (Slither line:1541)


End BuyoutProposalsDelegator.find_delegatecall_in_asm (Slither line:1637)


Begin BuyoutProposalsDelegator.find_delegatecall_in_asm (Slither line:1541)


End BuyoutProposalsDelegator.find_delegatecall_in_asm (Slither line:1637)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


Found LowLevelCall (Slither line:2730)


Found delegatecall in LowLevelCall (Slither line:2732)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End BuyoutProposalsDelegator.is_proxy (Slither line:1476)


Begin BuyoutProposalsDelegator.is_upgradeable_proxy (Slither line:1136)

Checking contract: BuyoutProposalsDelegator 
BuyoutProposalsDelegator is delegating to implementation
Looking for setter (Slither line:1200)

Looking for setter in DelegationStorage (Slither line:1204)


Begin DelegationStorage.find_setter_in_contract (Slither line:3109)


End DelegationStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in DelegationStorage 
Looking in BuyoutProposalsDelegator (Slither line:1213)

Begin BuyoutProposalsDelegator.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address,address,address,bytes) returns() (Slither line:3117)
Checking function: _setImplementation(address,bool,bytes) returns() (Slither line:3117)
Visibility: public
implementation = implementation_
is an Assignment Operation (Slither line:3206)

End BuyoutProposalsDelegator.find_setter_in_contract (Slither line:3315)


Implementation set by function: _setImplementation in contract: BuyoutProposalsDelegator (Slither line:1264)
Looking for getter (Slither line:1273)


Begin DelegationStorage.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_

End DelegationStorage.find_getter_in_contract (Slither line:3073)


Begin BuyoutProposalsDelegator.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_
Checking function: constructor (Slither line:2978)
Checking function: _setImplementation (Slither line:2978)
Checking function: createProposal (Slither line:2978)
createProposal returns uint256 variable called proposalId (Slither line:2998)
createProposal returns uint256 variable called buyoutTimes (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256,uint256)) (Slither line:3018)
Checking function: vote (Slither line:2978)
vote returns uint256 variable called proposalId (Slither line:2998)
vote returns uint256 variable called balance (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256,uint256)) (Slither line:3018)
Checking function: voteResultConfirm (Slither line:2978)
voteResultConfirm returns uint256 variable called proposalId (Slither line:2998)
voteResultConfirm returns bool variable called result (Slither line:2998)
voteResultConfirm returns address variable called submitter (Slither line:2998)
voteResultConfirm returns uint256 variable called shardAmount (Slither line:2998)
voteResultConfirm returns uint256 variable called wantTokenAmount (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256,bool,address,uint256,uint256)) (Slither line:3018)
Checking function: exchangeForWantToken (Slither line:2978)
exchangeForWantToken returns uint256 variable called wantTokenAmount (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256)) (Slither line:3018)
Checking function: redeemForBuyoutFailed (Slither line:2978)
redeemForBuyoutFailed returns uint256 variable called _shardPoolId (Slither line:2998)
redeemForBuyoutFailed returns uint256 variable called shardTokenAmount (Slither line:2998)
redeemForBuyoutFailed returns uint256 variable called wantTokenAmount (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256,uint256,uint256)) (Slither line:3018)
Checking function: setBuyoutTimes (Slither line:2978)
Checking function: setVoteLenth (Slither line:2978)
Checking function: setPassNeeded (Slither line:2978)
Checking function: setBuyoutProportion (Slither line:2978)
Checking function: setGovernance (Slither line:2978)
Checking function: setMarket (Slither line:2978)
Checking function: getProposalsForExactPool (Slither line:2978)
getProposalsForExactPool returns uint256[] variable called _proposalsHistory (Slither line:2998)
RETURN node expression: abi.decode(data,(uint256[])) (Slither line:3018)
Checking function: delegateTo (Slither line:2978)
delegateTo returns bytes variable  (Slither line:2998)
RETURN node expression: returnData (Slither line:3018)
Checking function: delegateToImplementation (Slither line:2978)
delegateToImplementation returns bytes variable  (Slither line:2998)
RETURN node expression: delegateTo(implementation,data) (Slither line:3018)
Checking function: delegateToViewImplementation (Slither line:2978)
delegateToViewImplementation returns bytes variable  (Slither line:2998)
RETURN node expression: abi.decode(returnData,(bytes)) (Slither line:3018)
Checking function: fallback (Slither line:2978)
Checking function: slitherConstructorVariables (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End BuyoutProposalsDelegator.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in BuyoutProposalsDelegator (Slither line:1305)
or in DelegationStorage (Slither line:1319)

Begin DelegatorInterface.find_getter_in_contract (Slither line:2964)

implementation is a Variable object
implementation_

End DelegatorInterface.find_getter_in_contract (Slither line:3073)


End BuyoutProposalsDelegator.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: implementation_
impl_address_from_contract_call: StateVariable implementation
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression implementation.delegatecall(msg.data)
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(free_mem_ptr_fallback_asm_0,0,returndatasize()())
impl_address_from_contract_call: arg is free_mem_ptr_fallback_asm_0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression mload(uint256)(0x40)
impl_address_from_contract_call: arg is 0x40
Checking public function _setImplementation
Checking external function createProposal
Checking external function vote
Checking external function voteResultConfirm
Checking external function exchangeForWantToken
Checking external function redeemForBuyoutFailed
Checking external function setBuyoutTimes
Checking external function setVoteLenth
Checking external function setPassNeeded
Checking external function setBuyoutProportion
Checking external function setGovernance
Checking external function setMarket
Checking external function getProposalsForExactPool
Checking public function _setImplementation
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
Checking external function createProposal
Checking external function vote
Checking external function voteResultConfirm
Checking external function exchangeForWantToken
Checking external function redeemForBuyoutFailed
Checking external function setBuyoutTimes
Checking external function setVoteLenth
Checking external function setPassNeeded
Checking external function setBuyoutProportion
Checking external function setGovernance
Checking external function setMarket
Checking external function getProposalsForExactPool
Checking public function delegateToImplementation
Checking public function delegateToViewImplementation
Checking external function fallback
functions_writing_to_variable: implementation
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setBuyoutProportion (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.createProposal (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator._setImplementation (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setPassNeeded (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.vote (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.vote (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.delegateToViewImplementation (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setBuyoutProportion (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setGovernance (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.voteResultConfirm (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.fallback (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setGovernance (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.exchangeForWantToken (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.redeemForBuyoutFailed (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setMarket (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setVoteLenth (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setMarket (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.redeemForBuyoutFailed (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.createProposal (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.getProposalsForExactPool (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.getProposalsForExactPool (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setBuyoutTimes (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.constructor (proxy_features line:893)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: constructor writes implementation_ to implementation (proxy_features line:1008)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.exchangeForWantToken (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setPassNeeded (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.delegateTo (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator._setImplementation (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin) (proxy_features line:904)
functions_writing_to_variable: exp = allowResign (proxy_features line:904)
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (proxy_features line:904)
functions_writing_to_variable: exp = oldImplementation = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: oldImplementation = implementation (proxy_features line:907)
functions_writing_to_variable: exp = implementation = implementation_ (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: implementation = implementation_ (proxy_features line:907)
functions_writing_to_variable: Identifier: implementation (proxy_features line:919)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: exp = delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData)) (proxy_features line:904)
functions_writing_to_variable: exp = NewImplementation(oldImplementation,implementation) (proxy_features line:904)
functions_writing_to_variable: exp = delegateTo(implementation,data) (proxy_features line:904)
functions_writing_to_variable: exp = (success,returnData) = callee.delegatecall(data) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: (success,returnData) = callee.delegatecall(data) (proxy_features line:907)
functions_writing_to_variable: exp = success == 0 (proxy_features line:904)
functions_writing_to_variable: exp = revert(uint256,uint256)(returnData + 0x20,returndatasize()()) (proxy_features line:904)
functions_writing_to_variable: exp = returnData (proxy_features line:904)
functions_writing_to_variable: _setImplementation writes implementation_ to implementation (proxy_features line:924)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setBuyoutTimes (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.setVoteLenth (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.voteResultConfirm (proxy_features line:893)
functions_writing_to_variable: checking function BuyoutProposalsDelegator.delegateToImplementation (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation_', 'implementation_']
has_compatibility_checks: checking public function constructor
require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
has_compatibility_checks: condition msg.sender == governance
has_compatibility_checks: IF node exp = allowResign
has_compatibility_checks: IF node exp = success == 0
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: ConditionalExpression if success == 0 then revert(uint256,uint256)(returnData + 0x20,returndatasize()()) else returnData
has_compatibility_checks: checking public function _setImplementation
require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
has_compatibility_checks: condition msg.sender == governance
has_compatibility_checks: IF node exp = allowResign
has_compatibility_checks: IF node exp = success == 0
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: IF node can lead to revert ['revert(uint256,uint256)(returnData + 0x20,returndatasize()())']
has_compatibility_checks: ConditionalExpression if success == 0 then revert(uint256,uint256)(returnData + 0x20,returndatasize()()) else returnData
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: msg.value > 0
can_toggle_delegatecall_on_off: successors:
 NodeType: RETURN  expression: None
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: revert(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
 NodeType: END_IF  expression: None
 NodeType: EXPRESSION  expression: return(uint256,uint256)(free_mem_ptr_fallback_asm_0,returndatasize()())
 NodeType: NEW VARIABLE  expression: None
 NodeType: IF  expression: switch_expr_13439_225_0_fallback_asm_0 == 0
 NodeType: EXPRESSION  expression: switch_expr_13439_225_0_fallback_asm_0 = success
 NodeType: INLINE ASM  expression: {'AST': {'nodeType': 'YulBlock', 'src': '13316:359:0', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '13331:31:0', 'value': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '13357:4:0', 'type': '', 'value': '0x40'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '13351:5:0'}, 'nodeType': 'YulFunctionCall', 'src': '13351:11:0'}, 'variables': [{'name': 'free_mem_ptr', 'nodeType': 'YulTypedName', 'src': '13335:12:0', 'type': ''}]}, {'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '13391:12:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '13405:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '13408:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '13408:16:0'}], 'functionName': {'name': 'returndatacopy', 'nodeType': 'YulIdentifier', 'src': '13376:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '13376:49:0'}, 'nodeType': 'YulExpressionStatement', 'src': '13376:49:0'}, {'cases': [{'body': {'nodeType': 'YulBlock', 'src': '13478:80:0', 'statements': [{'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '13508:12:0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '13522:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '13522:16:0'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '13501:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '13501:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '13501:38:0'}]}, 'nodeType': 'YulCase', 'src': '13471:87:0', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '13476:1:0', 'type': '', 'value': '0'}}, {'body': {'nodeType': 'YulBlock', 'src': '13584:80:0', 'statements': [{'expression': {'arguments': [{'name': 'free_mem_ptr', 'nodeType': 'YulIdentifier', 'src': '13614:12:0'}, {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '13628:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '13628:16:0'}], 'functionName': {'name': 'return', 'nodeType': 'YulIdentifier', 'src': '13607:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '13607:38:0'}, 'nodeType': 'YulExpressionStatement', 'src': '13607:38:0'}]}, 'nodeType': 'YulCase', 'src': '13576:88:0', 'value': 'default'}], 'expression': {'name': 'success', 'nodeType': 'YulIdentifier', 'src': '13446:7:0'}, 'nodeType': 'YulSwitch', 'src': '13439:225:0'}]}, 'evmVersion': 'istanbul', 'externalReferences': [{'declaration': 716, 'isOffset': False, 'isSlot': False, 'src': '13446:7:0', 'valueSize': 1}], 'id': 723, 'nodeType': 'InlineAssembly', 'src': '13307:368:0'}
 NodeType: END_IF  expression: None
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: (success) = implementation.delegatecall(msg.data)
can_toggle_delegatecall_on_off: delegatecall_condition = False
 NodeType: EXPRESSION  expression: returndatacopy(uint256,uint256,uint256)(free_mem_ptr_fallback_asm_0,0,returndatasize()())
 NodeType: EXPRESSION  expression: free_mem_ptr_fallback_asm_0 = mload(uint256)(0x40)
Found public function: _setImplementation
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = implementation
has_time_delay: (node.type) EXPRESSION
(Expression) implementation = implementation_
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_becomeImplementation(bytes),becomeImplementationData))
has_time_delay: (node.type) RETURN
(Expression) delegateTo(implementation,data)
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(oldImplementation,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returnData) = callee.delegatecall(data)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == governance,_setImplementation: Caller must be admin)
has_time_delay: (node.type) RETURN
(Expression) returnData
has_time_delay: (node.type) IF
(Expression) allowResign
has_time_delay: (node.type) IF
(Expression) success == 0
has_time_delay: (node.type) EXPRESSION
(Expression) delegateToImplementation(abi.encodeWithSignature(_resignImplementation()))
has_time_delay: (node.type) EXPRESSION
(Expression) revert(uint256,uint256)(returnData + 0x20,returndatasize()())
