
Begin LANDStorage.is_proxy (Slither line:1425)


End LANDStorage.is_proxy (Slither line:1428)


Begin LANDStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: LANDStorage 

End LANDStorage.is_upgradeable_proxy (Slither line:1407)


Begin OwnableStorage.is_proxy (Slither line:1425)


End OwnableStorage.is_proxy (Slither line:1428)


Begin OwnableStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnableStorage 

End OwnableStorage.is_upgradeable_proxy (Slither line:1407)


Begin ProxyStorage.is_proxy (Slither line:1425)


End ProxyStorage.is_proxy (Slither line:1428)


Begin ProxyStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyStorage 

End ProxyStorage.is_upgradeable_proxy (Slither line:1407)


Begin AssetRegistryStorage.is_proxy (Slither line:1425)


End AssetRegistryStorage.is_proxy (Slither line:1428)


Begin AssetRegistryStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: AssetRegistryStorage 

End AssetRegistryStorage.is_upgradeable_proxy (Slither line:1407)


Begin Storage.is_proxy (Slither line:1425)


End Storage.is_proxy (Slither line:1428)


Begin Storage.is_upgradeable_proxy (Slither line:1136)

Checking contract: Storage 

End Storage.is_upgradeable_proxy (Slither line:1407)


Begin DelegateProxy.is_proxy (Slither line:1425)


End DelegateProxy.is_proxy (Slither line:1428)


Begin DelegateProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateProxy 

End DelegateProxy.is_upgradeable_proxy (Slither line:1407)


Begin IApplication.is_proxy (Slither line:1425)


End IApplication.is_proxy (Slither line:1428)


Begin IApplication.is_upgradeable_proxy (Slither line:1136)

Checking contract: IApplication 

End IApplication.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: delegatedFwd(currentContract,msg.data) (Slither line:2792)
Expression called: delegatedFwd
Type of call: tuple() (Slither line:2807)
Args:
currentContract
msg.data

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin Proxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking currentContract (Slither line:1689)
Checking proxyOwner (Slither line:1689)
Checking owner (Slither line:1689)
Checking _name (Slither line:1689)
Checking _symbol (Slither line:1689)
Checking _description (Slither line:1689)
Checking _count (Slither line:1689)
Checking _assetsOf (Slither line:1689)
Checking _holderOf (Slither line:1689)
Checking _indexOfAsset (Slither line:1689)
Checking _assetData (Slither line:1689)
Checking _operators (Slither line:1689)
Checking _reentrancy (Slither line:1689)
Checking latestPing (Slither line:1689)
Checking clearLow (Slither line:1689)
Checking clearHigh (Slither line:1689)
Checking factor (Slither line:1689)
Checking authorizedDeploy (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in Proxy.delegatedFwd (Slither line:1805)
CallExpression: delegatedFwd(currentContract,msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(currentContract,msg.data) (Slither line:1832)
The value passed to parameter #0 is currentContract (Slither line:1835)
which is an Identifier with value currentContract (Slither line:1839)
currentContract is a State Variable (Slither line:1842)

End Proxy.find_delegate_variable_from_name (Slither line:1939)


End Proxy.find_delegatecall_in_asm (Slither line:1637)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 
Proxy is delegating to currentContract
Looking for setter (Slither line:1200)

Looking for setter in ProxyStorage (Slither line:1204)


Begin ProxyStorage.find_setter_in_contract (Slither line:3109)


End ProxyStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in ProxyStorage 
Looking in Proxy (Slither line:1213)

Begin Proxy.find_setter_in_contract (Slither line:3109)

Checking function: Proxy() returns() (Slither line:3117)
Checking function: transferOwnership(address) returns() (Slither line:3117)
Visibility: public
onlyProxyOwner()
require(bool)(_newOwner != proxyOwner)
OwnerUpdate(proxyOwner,_newOwner)
require(bool)(msg.sender == proxyOwner)
proxyOwner = _newOwner
is an Assignment Operation (Slither line:3206)
Checking function: upgrade(IApplication,bytes) returns() (Slither line:3117)
Visibility: public
Upgrade(newContract,data)
require(bool)(msg.sender == proxyOwner)
onlyProxyOwner()
currentContract = newContract
is an Assignment Operation (Slither line:3206)

End Proxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgrade in contract: Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin ProxyStorage.find_getter_in_contract (Slither line:2964)

currentContract is a Variable object
newContract

End ProxyStorage.find_getter_in_contract (Slither line:3073)


Begin Proxy.find_getter_in_contract (Slither line:2964)

currentContract is a Variable object
newContract
Checking function: delegatedFwd (Slither line:2978)
Checking function: isContract (Slither line:2978)
isContract returns bool variable  (Slither line:2998)
RETURN node expression: size > 0 (Slither line:3018)
Checking function: OwnableStorage (Slither line:2978)
Checking function: Proxy (Slither line:2978)
Checking function: transferOwnership (Slither line:2978)
Checking function: upgrade (Slither line:2978)
Checking function: fallback (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End Proxy.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in Proxy (Slither line:1305)
or in ProxyStorage (Slither line:1319)

Begin Storage.find_getter_in_contract (Slither line:2964)

currentContract is a Variable object
newContract
Checking function: OwnableStorage (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End Storage.find_getter_in_contract (Slither line:3073)


End Proxy.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: newContract
impl_address_from_contract_call: StateVariable currentContract
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression delegatedFwd(currentContract,msg.data)
impl_address_from_contract_call: arg is currentContract
impl_address_from_contract_call: arg is msg.data
impl_address_from_contract_call: CallExpression require(bool)(isContract(_dst))
impl_address_from_contract_call: arg is isContract(_dst)
impl_address_from_contract_call: CallExpression isContract(_dst)
impl_address_from_contract_call: CallExpression require(bool)(currentContract != 0)
impl_address_from_contract_call: arg is currentContract != 0
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function upgrade
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function upgrade
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function fallback
functions_writing_to_variable: currentContract
functions_writing_to_variable: checking function Proxy.isContract (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.Proxy (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.OwnableStorage (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.upgrade (proxy_features line:893)
functions_writing_to_variable: exp = currentContract = newContract (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: currentContract = newContract (proxy_features line:907)
functions_writing_to_variable: Identifier: currentContract (proxy_features line:919)
get_value_assigned: currentContract = newContract
functions_writing_to_variable: exp = IApplication(this).initialize(data) (proxy_features line:904)
functions_writing_to_variable: exp = Upgrade(newContract,data) (proxy_features line:904)
functions_writing_to_variable: exp = onlyProxyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool)(msg.sender == proxyOwner) (proxy_features line:904)
functions_writing_to_variable: upgrade writes newContract to currentContract (proxy_features line:924)
functions_writing_to_variable: checking function Proxy.transferOwnership (proxy_features line:893)
has_compatibility_checks: dependencies: ['newContract']
has_compatibility_checks: checking public function upgrade
require(bool)(msg.sender == proxyOwner)
has_compatibility_checks: condition msg.sender == proxyOwner
has_compatibility_checks: newContract is UserDefinedType: IApplication
has_compatibility_checks: newContract is Contract type: IApplication
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
    let size := returndatasize
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(isContract(_dst))
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: Proxy
Found public function: transferOwnership
has_time_delay: (node.type) EXPRESSION
(Expression) Upgrade(newContract,data)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) currentContract = newContract
has_time_delay: (node.type) EXPRESSION
(Expression) IApplication(this).initialize(data)

Begin LANDProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin LANDProxy.find_delegatecall_in_exp_node

Found Expression Node: delegatedFwd(currentContract,msg.data) (Slither line:2792)
Expression called: delegatedFwd
Type of call: tuple() (Slither line:2807)
Args:
currentContract
msg.data

End LANDProxy.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin LANDProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin LANDProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking currentContract (Slither line:1689)
Checking proxyOwner (Slither line:1689)
Checking owner (Slither line:1689)
Checking _name (Slither line:1689)
Checking _symbol (Slither line:1689)
Checking _description (Slither line:1689)
Checking _count (Slither line:1689)
Checking _assetsOf (Slither line:1689)
Checking _holderOf (Slither line:1689)
Checking _indexOfAsset (Slither line:1689)
Checking _assetData (Slither line:1689)
Checking _operators (Slither line:1689)
Checking _reentrancy (Slither line:1689)
Checking latestPing (Slither line:1689)
Checking clearLow (Slither line:1689)
Checking clearHigh (Slither line:1689)
Checking factor (Slither line:1689)
Checking authorizedDeploy (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in LANDProxy.delegatedFwd (Slither line:1805)
CallExpression: delegatedFwd(currentContract,msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(currentContract,msg.data) (Slither line:1832)
The value passed to parameter #0 is currentContract (Slither line:1835)
which is an Identifier with value currentContract (Slither line:1839)
currentContract is a State Variable (Slither line:1842)

End LANDProxy.find_delegate_variable_from_name (Slither line:1939)


End LANDProxy.find_delegatecall_in_asm (Slither line:1637)


End LANDProxy.is_proxy (Slither line:1476)


Begin LANDProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: LANDProxy 
LANDProxy is delegating to currentContract
Looking for setter (Slither line:1200)

Looking for setter in ProxyStorage (Slither line:1204)


Begin ProxyStorage.find_setter_in_contract (Slither line:3109)

Expression: newContract (Slither line:3112)

End ProxyStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in ProxyStorage 
Looking in LANDProxy (Slither line:1213)

Begin LANDProxy.find_setter_in_contract (Slither line:3109)

Expression: newContract (Slither line:3112)
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: Proxy() returns() (Slither line:3117)
Checking function: transferOwnership(address) returns() (Slither line:3117)
Visibility: public
onlyProxyOwner()
require(bool)(_newOwner != proxyOwner)
require(bool)(msg.sender == proxyOwner)
OwnerUpdate(proxyOwner,_newOwner)
proxyOwner = _newOwner
is an Assignment Operation (Slither line:3206)
newContract
Checking function: upgrade(IApplication,bytes) returns() (Slither line:3117)
Visibility: public
Upgrade(newContract,data)
require(bool)(msg.sender == proxyOwner)
onlyProxyOwner()
currentContract = newContract
is an Assignment Operation (Slither line:3206)
newContract

End LANDProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgrade in contract: LANDProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin ProxyStorage.find_getter_in_contract (Slither line:2964)

currentContract is a Variable object
newContract

End ProxyStorage.find_getter_in_contract (Slither line:3073)


Begin LANDProxy.find_getter_in_contract (Slither line:2964)

currentContract is a Variable object
newContract
Checking function: Proxy (Slither line:2978)
Checking function: transferOwnership (Slither line:2978)
Checking function: upgrade (Slither line:2978)
Checking function: fallback (Slither line:2978)
Checking function: delegatedFwd (Slither line:2978)
Checking function: isContract (Slither line:2978)
isContract returns bool variable  (Slither line:2998)
RETURN node expression: size > 0 (Slither line:3018)
Checking function: OwnableStorage (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End LANDProxy.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in LANDProxy (Slither line:1305)
or in ProxyStorage (Slither line:1319)

Begin Storage.find_getter_in_contract (Slither line:2964)

currentContract is a Variable object
newContract
Checking function: OwnableStorage (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End Storage.find_getter_in_contract (Slither line:3073)


End LANDProxy.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: newContract
impl_address_from_contract_call: StateVariable currentContract
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression delegatedFwd(currentContract,msg.data)
impl_address_from_contract_call: arg is currentContract
impl_address_from_contract_call: arg is msg.data
impl_address_from_contract_call: CallExpression require(bool)(isContract(_dst))
impl_address_from_contract_call: arg is isContract(_dst)
impl_address_from_contract_call: CallExpression isContract(_dst)
impl_address_from_contract_call: CallExpression require(bool)(currentContract != 0)
impl_address_from_contract_call: arg is currentContract != 0
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function upgrade
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function upgrade
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function fallback
functions_writing_to_variable: currentContract
functions_writing_to_variable: checking function LANDProxy.isContract (proxy_features line:893)
functions_writing_to_variable: checking function LANDProxy.upgrade (proxy_features line:893)
functions_writing_to_variable: exp = currentContract = newContract (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: currentContract = newContract (proxy_features line:907)
functions_writing_to_variable: Identifier: currentContract (proxy_features line:919)
get_value_assigned: currentContract = newContract
functions_writing_to_variable: exp = IApplication(this).initialize(data) (proxy_features line:904)
functions_writing_to_variable: exp = Upgrade(newContract,data) (proxy_features line:904)
functions_writing_to_variable: exp = onlyProxyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool)(msg.sender == proxyOwner) (proxy_features line:904)
functions_writing_to_variable: upgrade writes newContract to currentContract (proxy_features line:924)
functions_writing_to_variable: checking function LANDProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function LANDProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function LANDProxy.OwnableStorage (proxy_features line:893)
functions_writing_to_variable: checking function LANDProxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function LANDProxy.Proxy (proxy_features line:893)
functions_writing_to_variable: checking function LANDProxy.slitherConstructorConstantVariables (proxy_features line:893)
has_compatibility_checks: dependencies: ['newContract']
has_compatibility_checks: checking public function upgrade
require(bool)(msg.sender == proxyOwner)
has_compatibility_checks: condition msg.sender == proxyOwner
has_compatibility_checks: newContract is UserDefinedType: IApplication
has_compatibility_checks: newContract is Contract type: IApplication
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
    let size := returndatasize
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(isContract(_dst))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: Proxy
Found public function: transferOwnership
has_time_delay: (node.type) EXPRESSION
(Expression) Upgrade(newContract,data)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) currentContract = newContract
has_time_delay: (node.type) EXPRESSION
(Expression) IApplication(this).initialize(data)
