
Begin Proxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'impl'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for impl (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)
Checking data (Slither line:1703)
Checking impl (Slither line:1703)
impl is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin Proxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Got abstract function, looking for overriding function (Slither line:2015)
Failure (Slither line:2023)
implementation returns a variable of type address   (Slither line:2183)
Return value is LocalVariable:  (Slither line:2256)
has no expression (Slither line:2316)

End Proxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End Proxy.find_delegate_variable_by_name (Slither line:1739)


Begin Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2673)


End Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2700)


End Proxy.find_delegatecall_in_asm (Slither line:1637)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(impl != address(0)) (Slither line:2792)
Expression called: require(bool)
Type of call: tuple() (Slither line:2807)
Args:
impl != address(0)

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin UpgradableStorage.is_proxy (Slither line:1425)


End UpgradableStorage.is_proxy (Slither line:1428)


Begin UpgradableStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradableStorage 

End UpgradableStorage.is_upgradeable_proxy (Slither line:1407)


Begin Upgradable.is_proxy (Slither line:1425)


End Upgradable.is_proxy (Slither line:1428)


Begin Upgradable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Upgradable 

End Upgradable.is_upgradeable_proxy (Slither line:1407)


Begin KnowledgeProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin KnowledgeProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'impl'
Looking for corresponding Variable
Current function: fallback

Begin KnowledgeProxy.find_delegate_variable_from_name
Searching for impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owners (Slither line:1689)
Checking _implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking impl (Slither line:1703)
impl is a Local Variable in KnowledgeProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin KnowledgeProxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Return node of function UpgradableStorage.implementation(): RETURN _implementation (Slither line:2031)
_implementation (Slither line:2038)
implementation returns a variable of type address   called _implementation (Slither line:2183)

End KnowledgeProxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End KnowledgeProxy.find_delegate_variable_by_name (Slither line:1739)


End KnowledgeProxy.find_delegatecall_in_asm (Slither line:1637)


End KnowledgeProxy.is_proxy (Slither line:1476)


Begin KnowledgeProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: KnowledgeProxy 
KnowledgeProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradableStorage (Slither line:1204)


Begin UpgradableStorage.find_setter_in_contract (Slither line:3109)

Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation
Checking function: Ownable() returns() (Slither line:3117)
Checking function: addOwner(address) returns() (Slither line:3117)
Visibility: public
i ++
isOwner = true
is an Assignment Operation (Slither line:3206)
OwnerAdded(msg.sender,newOwner,i)
require(bool)(newOwner != address(0))
require(bool)(isOwner)
onlyOwner()
Checking function: removeOwner(uint256) returns() (Slither line:3117)
Visibility: public
i ++
require(bool)(isOwner)
isOwner = true
is an Assignment Operation (Slither line:3206)
owners[index] = owners[owners.length - 1]
is an Assignment Operation (Slither line:3206)
Left side is an IndexAccess (Slither line:3235)
delete owners[owners.length - 1]
OwnerRemoved(msg.sender,owner)
onlyOwner()
Checking function: ownersCount() returns(uint256) (Slither line:3117)
Visibility: public
owners.length

End UpgradableStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradableStorage 
Looking in KnowledgeProxy (Slither line:1213)

Begin KnowledgeProxy.find_setter_in_contract (Slither line:3109)

Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: public
Upgradable(this).initialize.value(msg.value)()
i ++
require(bool)(isOwner)
isOwner = true
is an Assignment Operation (Slither line:3206)
NewImplementation(imp)
onlyOwner()
_implementation = imp
is an Assignment Operation (Slither line:3206)

End KnowledgeProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: KnowledgeProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradableStorage.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
imp
Checking function: Ownable (Slither line:2978)
Checking function: addOwner (Slither line:2978)
Checking function: removeOwner (Slither line:2978)
Checking function: ownersCount (Slither line:2978)
ownersCount returns uint256 variable  (Slither line:2998)
RETURN node expression: owners.length (Slither line:3018)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End UpgradableStorage.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: UpgradableStorage (Slither line:1285)

End KnowledgeProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: imp
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression require(bool)(impl != address(0))
impl_address_from_contract_call: arg is impl != address(0)
impl_address_from_contract_call: CallExpression implementation()
Checking public function implementation
Checking public function addOwner
Found 'msg.sender ==' in expression: msg.sender == owners[i]
Checking public function removeOwner
Found 'msg.sender ==' in expression: msg.sender == owners[i]
Checking public function ownersCount
Checking public function implementation
Checking public function upgradeTo
Found 'msg.sender ==' in expression: msg.sender == owners[i]
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function KnowledgeProxy.ownersCount (proxy_features line:893)
functions_writing_to_variable: checking function KnowledgeProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function KnowledgeProxy.addOwner (proxy_features line:893)
functions_writing_to_variable: checking function KnowledgeProxy.upgradeTo (proxy_features line:893)
functions_writing_to_variable: exp = _implementation = imp (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = imp (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = imp
functions_writing_to_variable: exp = Upgradable(this).initialize.value(msg.value)() (proxy_features line:904)
functions_writing_to_variable: exp = NewImplementation(imp) (proxy_features line:904)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = isOwner = false (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: isOwner = false (proxy_features line:907)
functions_writing_to_variable: exp = i = 0 (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: i = 0 (proxy_features line:907)
functions_writing_to_variable: exp = i < owners.length (proxy_features line:904)
functions_writing_to_variable: exp = msg.sender == owners[i] (proxy_features line:904)
functions_writing_to_variable: exp = isOwner = true (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: isOwner = true (proxy_features line:907)
functions_writing_to_variable: exp = i ++ (proxy_features line:904)
functions_writing_to_variable: exp = require(bool)(isOwner) (proxy_features line:904)
functions_writing_to_variable: upgradeTo writes imp to _implementation (proxy_features line:924)
functions_writing_to_variable: checking function KnowledgeProxy.Ownable (proxy_features line:893)
functions_writing_to_variable: checking function KnowledgeProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function KnowledgeProxy.removeOwner (proxy_features line:893)
functions_writing_to_variable: checking function KnowledgeProxy.fallback (proxy_features line:893)
has_compatibility_checks: dependencies: ['imp']
has_compatibility_checks: checking public function upgradeTo
require(bool)(isOwner)
has_compatibility_checks: condition isOwner
check_condition_from_expression: Identifier isOwner
check_condition_from_expression: Identifier.value.expression false
has_compatibility_checks: IF node exp = msg.sender == owners[i]
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0)
    let size := returndatasize
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
}
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: data = msg.data
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: impl = implementation()
Found public function: implementation
has_time_delay: (node.type) NEW VARIABLE
(Expression) isOwner = false
has_time_delay: (node.type) IF_LOOP
(Expression) i < owners.length
has_time_delay: (node.type) EXPRESSION
(Expression) Upgradable(this).initialize.value(msg.value)()
has_time_delay: (node.type) EXPRESSION
(Expression) i ++
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(isOwner)
has_time_delay: (node.type) NEW VARIABLE
(Expression) i = 0
has_time_delay: (node.type) EXPRESSION
(Expression) isOwner = true
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(imp)
has_time_delay: (node.type) IF
(Expression) msg.sender == owners[i]
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = imp
