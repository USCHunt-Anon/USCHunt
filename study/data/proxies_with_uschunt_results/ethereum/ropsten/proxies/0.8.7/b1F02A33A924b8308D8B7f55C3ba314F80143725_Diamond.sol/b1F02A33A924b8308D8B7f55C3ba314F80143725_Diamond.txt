
Begin IDiamondCut.is_proxy (Slither line:1425)


End IDiamondCut.is_proxy (Slither line:1428)


Begin IDiamondCut.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondCut 

End IDiamondCut.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondLoupe.is_proxy (Slither line:1425)


End IDiamondLoupe.is_proxy (Slither line:1428)


Begin IDiamondLoupe.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondLoupe 

End IDiamondLoupe.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin IOwnable.is_proxy (Slither line:1425)


End IOwnable.is_proxy (Slither line:1428)


Begin IOwnable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IOwnable 

End IOwnable.is_upgradeable_proxy (Slither line:1407)


Begin LibMeta.is_proxy (Slither line:1425)


End LibMeta.is_proxy (Slither line:1428)


Begin LibMeta.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibMeta 

End LibMeta.is_upgradeable_proxy (Slither line:1407)


Begin LibDiamond.is_proxy (Slither line:1425)


End LibDiamond.is_proxy (Slither line:1428)


Begin LibDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibDiamond 

End LibDiamond.is_upgradeable_proxy (Slither line:1407)


Begin DiamondCutFacet.is_proxy (Slither line:1425)


End DiamondCutFacet.is_proxy (Slither line:1428)


Begin DiamondCutFacet.is_upgradeable_proxy (Slither line:1136)

Checking contract: DiamondCutFacet 

End DiamondCutFacet.is_upgradeable_proxy (Slither line:1407)


Begin DiamondLoupeFacet.is_proxy (Slither line:1425)


End DiamondLoupeFacet.is_proxy (Slither line:1428)


Begin DiamondLoupeFacet.is_upgradeable_proxy (Slither line:1136)

Checking contract: DiamondLoupeFacet 

End DiamondLoupeFacet.is_upgradeable_proxy (Slither line:1407)


Begin OwnershipFacet.is_proxy (Slither line:1425)


End OwnershipFacet.is_proxy (Slither line:1428)


Begin OwnershipFacet.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnershipFacet 

End OwnershipFacet.is_upgradeable_proxy (Slither line:1407)


Begin Diamond.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Diamond.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End Diamond.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Diamond.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'facet'
Looking for corresponding Variable
Current function: fallback

Begin Diamond.find_delegate_variable_from_name
Searching for facet (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)
Checking facet (Slither line:1703)
facet is a Local Variable in Diamond.fallback (Slither line:1707)
facet appears to be a Diamond facet address (Slither line:1713)

End Diamond.find_delegate_variable_by_name


End Diamond.find_delegatecall_in_asm (Slither line:1637)


End Diamond.is_proxy (Slither line:1476)


Begin Diamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: Diamond 
Local Variable: facet (Slither line:1164)
Diamond is delegating to facet
Looking for setter (Slither line:1200)


Begin Diamond.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor(address) returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)

Begin DiamondCut corner case handling (Slither line:3277)

Expression: ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector) (Slither line:3284)
ds.facetFunctionSelectors[_facetAddress].functionSelectors.push
Expression: enforceHasContractCode(_init,LibDiamondCut: _init address has no code) (Slither line:3284)
enforceHasContractCode
Expression: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0)) (Slither line:3284)
require(bool,string)
Expression: ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: (success,error) = _init.delegatecall(_calldata) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: selectorPosition ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut) (Slither line:3284)
require(bool,string)
Expression: require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0)) (Slither line:3284)
require(bool,string)
Expression: LibDiamond.setContractOwner(_contractOwner) (Slither line:3284)
LibDiamond.setContractOwner
Expression: LibDiamond.addDiamondFunctions(address(new DiamondCutFacet()),address(new DiamondLoupeFacet()),address(new OwnershipFacet())) (Slither line:3284)
LibDiamond.addDiamondFunctions
Expression: selectorIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: revert(string)(string(error)) (Slither line:3284)
revert(string)
Expression: enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code) (Slither line:3284)
enforceHasContractCode
Expression: revert(string)(LibDiamondCut: _init function reverted) (Slither line:3284)
revert(string)
Expression: ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: removeFunction(oldFacetAddress,selector) (Slither line:3284)
removeFunction
Expression: ds.facetAddresses.push(_facetAddress) (Slither line:3284)
ds.facetAddresses.push
Expression: require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut) (Slither line:3284)
require(bool,string)
Expression: require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0)) (Slither line:3284)
require(bool,string)
Expression: require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist) (Slither line:3284)
require(bool,string)
Expression: require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function) (Slither line:3284)
require(bool,string)
Expression: require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty) (Slither line:3284)
require(bool,string)
Expression: enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code) (Slither line:3284)
enforceHasContractCode
Expression: selectorIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0)) (Slither line:3284)
require(bool,string)
Expression: ds.facetAddresses.push(_facetAddress) (Slither line:3284)
ds.facetAddresses.push
Expression: require(bool,string)(contractSize != 0,_errorMessage) (Slither line:3284)
require(bool,string)
Expression: ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop() (Slither line:3284)
ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop
Expression: facetIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists) (Slither line:3284)
require(bool,string)
Expression: contractSize = extcodesize(uint256)(_contract) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds = position (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: initializeDiamondCut(_init,_calldata) (Slither line:3284)
initializeDiamondCut
Expression: ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: DiamondCut(_diamondCut,_init,_calldata) (Slither line:3284)
DiamondCut
Expression: addFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) (Slither line:3284)
addFunctions
Expression: delete ds.selectorToFacetAndPosition[_selector] (Slither line:3284)
Expression type: delete (Slither line:3286)
Expression: selectorIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: replaceFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) (Slither line:3284)
replaceFunctions
Expression: require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function) (Slither line:3284)
require(bool,string)
Expression: removeFunction(oldFacetAddress,selector) (Slither line:3284)
removeFunction
Expression: ds.contractOwner = _newOwner (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: OwnershipTransferred(previousOwner,_newOwner) (Slither line:3284)
OwnershipTransferred
Expression: removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) (Slither line:3284)
removeFunctions
Expression: ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector) (Slither line:3284)
ds.facetFunctionSelectors[_facetAddress].functionSelectors.push
Expression: functionSelectors[0] = IDiamondCut.diamondCut.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetAddresses.pop() (Slither line:3284)
ds.facetAddresses.pop
Expression: cut[0] = IDiamondCut.FacetCut(_diamondCutFacet,IDiamondCut.FacetCutAction.Add,functionSelectors) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: selectorPosition ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: revert(string)(LibDiamondCut: Incorrect FacetCutAction) (Slither line:3284)
revert(string)
Expression: functionSelectors = new bytes4[](5) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors[0] = IDiamondLoupe.facets.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetAddresses[facetAddressPosition] = lastFacetAddress (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors[2] = IDiamondLoupe.facetAddresses.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors[3] = IDiamondLoupe.facetAddress.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition (Slither line:3284)
Expression type: delete (Slither line:3286)
Expression: functionSelectors[4] = IERC165.supportsInterface.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: cut[1] = IDiamondCut.FacetCut(_diamondLoupeFacet,IDiamondCut.FacetCutAction.Add,functionSelectors) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors = new bytes4[](2) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors[0] = IOwnable.transferOwnership.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: functionSelectors[1] = IOwnable.owner.selector (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: cut[2] = IDiamondCut.FacetCut(_ownershipFacet,IDiamondCut.FacetCutAction.Add,functionSelectors) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: diamondCut(cut,address(0),) (Slither line:3284)
diamondCut
Expression: require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut) (Slither line:3284)
require(bool,string)

End DiamondCut corner case handling (Slither line:3313)


End Diamond.find_setter_in_contract (Slither line:3315)


Implementation set by function: diamondCut in contract: DiamondCutFacet (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Diamond.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: fallback (Slither line:2978)

End Diamond.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in Diamond (Slither line:1305)

Begin IDiamondCut.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IDiamondCut.find_getter_in_contract (Slither line:3073)

Looking for Loupe functions in LibMeta
domainSeparator(string,string) returns(bytes32)
getChainID() returns(uint256)
msgSender() returns(address)
slitherConstructorConstantVariables() returns()
Looking for Loupe functions in LibDiamond
diamondStorage() returns(LibDiamond.DiamondStorage)
setContractOwner(address) returns()
contractOwner() returns(address)
enforceIsContractOwner() returns()
addDiamondFunctions(address,address,address) returns()
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
addFunctions(address,bytes4[]) returns()
replaceFunctions(address,bytes4[]) returns()
removeFunctions(address,bytes4[]) returns()
removeFunction(address,bytes4) returns()
initializeDiamondCut(address,bytes) returns()
enforceHasContractCode(address,string) returns()
slitherConstructorConstantVariables() returns()
Looking for Loupe functions in DiamondCutFacet
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
Looking for Loupe functions in DiamondLoupeFacet
supportsInterface(bytes4) returns(bool)
facets() returns(IDiamondLoupe.Facet[])
facetFunctionSelectors(address) returns(bytes4[])
facetAddresses() returns(address[])
facetAddress(bytes4) returns(address)
facets() returns(IDiamondLoupe.Facet[])
facetFunctionSelectors(address) returns(bytes4[])
facetAddresses() returns(address[])
facetAddress(bytes4) returns(address)
supportsInterface(bytes4) returns(bool)
Looking for Loupe functions in OwnershipFacet
owner() returns(address)
transferOwnership(address) returns()
transferOwnership(address) returns()
owner() returns(address)
impl_address_from_contract_call: ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking external function fallback
functions_writing_to_variable: facet
functions_writing_to_variable: checking function DiamondCutFacet.diamondCut (proxy_features line:893)
get_value_assigned: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
functions_writing_to_variable: diamondCut writes _facetAddress to ds.selectorToFacetAndPosition[selector].facetAddress (proxy_features line:1033)
functions_writing_to_variable: checking function Diamond.constructor (proxy_features line:893)
get_value_assigned: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
functions_writing_to_variable: constructor writes _facetAddress to ds.selectorToFacetAndPosition[selector].facetAddress (proxy_features line:1033)
functions_writing_to_variable: checking function DiamondCutFacet.diamondCut (proxy_features line:893)
has_compatibility_checks: dependencies: ['REF_219', 'REF_217', 'REF_218', 'ds']
has_compatibility_checks: checking external function diamondCut
require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_compatibility_checks: condition _facetAddress == address(0)
check_condition_from_expression: condition _facetAddress == address(0)
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = error.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(error))', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(error))', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: ConditionalExpression if error.length > 0 then revert(string)(string(error)) else revert(string)(LibDiamondCut: _init function reverted)
has_compatibility_checks: IF node exp = selectorPosition == 0
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = _init == address(0)
has_compatibility_checks: IF node exp = selectorPosition == 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function)
has_compatibility_checks: condition _facetAddress != address(this)
check_condition_from_expression: condition _facetAddress != address(this)
require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_compatibility_checks: condition _calldata.length == 0
require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_compatibility_checks: condition _calldata.length > 0
has_compatibility_checks: IF node exp = selectorPosition != lastSelectorPosition
has_compatibility_checks: IF node exp = _init != address(this)
require(bool,string)(contractSize != 0,_errorMessage)
has_compatibility_checks: condition contractSize != 0
has_compatibility_checks: IF node exp = success == false
require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_compatibility_checks: condition oldFacetAddress == address(0)
require(bool,string)(LibMeta.msgSender() == diamondStorage().contractOwner,LibDiamond: Must be contract owner)
has_compatibility_checks: condition LibMeta.msgSender() == diamondStorage().contractOwner
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Add
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Replace
has_compatibility_checks: IF node exp = lastSelectorPosition == 0
require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
has_compatibility_checks: condition oldFacetAddress != _facetAddress
check_condition_from_expression: condition ds.selectorToFacetAndPosition[selector].facetAddress != _facetAddress
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Remove
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: ConditionalExpression if action == IDiamondCut.FacetCutAction.Remove then removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) else revert(string)(LibDiamondCut: Incorrect FacetCutAction)
has_compatibility_checks: IF node exp = msg.sender == address(this)
has_compatibility_checks: IF node exp = facetAddressPosition != lastFacetAddressPosition
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
has_compatibility_checks: checking public function constructor
require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_compatibility_checks: condition _facetAddress == address(0)
check_condition_from_expression: condition _facetAddress == address(0)
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = error.length > 0
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(error))', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(error))', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: ConditionalExpression if error.length > 0 then revert(string)(string(error)) else revert(string)(LibDiamondCut: _init function reverted)
has_compatibility_checks: IF node exp = selectorPosition == 0
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = _init == address(0)
has_compatibility_checks: IF node exp = selectorPosition == 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function)
has_compatibility_checks: condition _facetAddress != address(this)
check_condition_from_expression: condition _facetAddress != address(this)
require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_compatibility_checks: condition _calldata.length == 0
require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_compatibility_checks: condition _calldata.length > 0
has_compatibility_checks: IF node exp = selectorPosition != lastSelectorPosition
has_compatibility_checks: IF node exp = _init != address(this)
require(bool,string)(contractSize != 0,_errorMessage)
has_compatibility_checks: condition contractSize != 0
has_compatibility_checks: IF node exp = success == false
require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_compatibility_checks: condition oldFacetAddress == address(0)
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Add
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Replace
has_compatibility_checks: IF node exp = lastSelectorPosition == 0
require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
has_compatibility_checks: condition oldFacetAddress != _facetAddress
check_condition_from_expression: condition ds.selectorToFacetAndPosition[selector].facetAddress != _facetAddress
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Remove
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: ConditionalExpression if action == IDiamondCut.FacetCutAction.Remove then removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) else revert(string)(LibDiamondCut: Incorrect FacetCutAction)
has_compatibility_checks: IF node exp = facetAddressPosition != lastFacetAddressPosition
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: position = LibDiamond.DIAMOND_STORAGE_POSITION
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(facet != address(0),Diamond: Function does not exist)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ds = position
Found public function: constructor
Found fallback
