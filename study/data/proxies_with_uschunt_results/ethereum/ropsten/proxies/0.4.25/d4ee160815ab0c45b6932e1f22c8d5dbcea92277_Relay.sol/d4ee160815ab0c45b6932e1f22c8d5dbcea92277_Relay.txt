
Begin Relay.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Relay.find_delegatecall_in_exp_node

Found Expression Node: revert()() (Slither line:2792)
Expression called: revert()
Type of call: tuple() (Slither line:2807)
Args:

End Relay.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


Found LowLevelCall (Slither line:2730)


Found delegatecall in LowLevelCall (Slither line:2732)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End Relay.is_proxy (Slither line:1476)


Begin Relay.is_upgradeable_proxy (Slither line:1136)

Checking contract: Relay 
Relay is delegating to currentVersion
Looking for setter (Slither line:1200)


Begin Relay.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address) returns() (Slither line:3117)
Checking function: update(address) returns() (Slither line:3117)
Visibility: public
currentVersion = newAddress
is an Assignment Operation (Slither line:3206)

End Relay.find_setter_in_contract (Slither line:3315)


Implementation set by function: update in contract: Relay (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Relay.find_getter_in_contract (Slither line:2964)

currentVersion is a Variable object
newAddress
Checking function: constructor (Slither line:2978)
Checking function: update (Slither line:2978)
Checking function: fallback (Slither line:2978)

End Relay.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in Relay (Slither line:1305)

End Relay.is_upgradeable_proxy (Slither line:1407)

Checking public function update
Checking public function update
Checking public function fallback
functions_writing_to_variable: currentVersion
functions_writing_to_variable: checking function Relay.fallback (proxy_features line:893)
functions_writing_to_variable: checking function Relay.constructor (proxy_features line:893)
functions_writing_to_variable: exp = currentVersion = initAddr (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: currentVersion = initAddr (proxy_features line:907)
functions_writing_to_variable: Identifier: currentVersion (proxy_features line:919)
get_value_assigned: currentVersion = initAddr
functions_writing_to_variable: exp = owner = msg.sender (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: owner = msg.sender (proxy_features line:907)
functions_writing_to_variable: constructor writes initAddr to currentVersion (proxy_features line:924)
functions_writing_to_variable: checking function Relay.update (proxy_features line:893)
functions_writing_to_variable: exp = msg.sender != owner (proxy_features line:904)
functions_writing_to_variable: exp = revert()() (proxy_features line:904)
functions_writing_to_variable: exp = currentVersion = newAddress (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: currentVersion = newAddress (proxy_features line:907)
functions_writing_to_variable: Identifier: currentVersion (proxy_features line:919)
get_value_assigned: currentVersion = newAddress
functions_writing_to_variable: update writes newAddress to currentVersion (proxy_features line:924)
has_compatibility_checks: dependencies: ['initAddr', 'newAddress']
has_compatibility_checks: checking public function constructor
has_compatibility_checks: checking public function update
has_compatibility_checks: IF node exp = msg.sender != owner
has_compatibility_checks: IF node can lead to revert ['revert()()']
has_compatibility_checks: IF node can lead to revert ['revert()()']
has_compatibility_checks: ConditionalExpression if msg.sender != owner then revert()() else currentVersion = newAddress
Found public function: constructor
Found public function: update
has_time_delay: (node.type) EXPRESSION
(Expression) currentVersion = newAddress
has_time_delay: (node.type) EXPRESSION
(Expression) revert()()
has_time_delay: (node.type) IF
(Expression) msg.sender != owner
