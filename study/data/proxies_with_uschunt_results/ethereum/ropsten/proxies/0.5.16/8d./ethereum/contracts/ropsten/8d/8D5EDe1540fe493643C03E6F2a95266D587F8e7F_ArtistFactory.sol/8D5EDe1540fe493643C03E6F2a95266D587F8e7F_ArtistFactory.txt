
Begin MasterCopy.is_proxy (Slither line:1425)


End MasterCopy.is_proxy (Slither line:1428)


Begin MasterCopy.is_upgradeable_proxy (Slither line:1136)

Checking contract: MasterCopy 

End MasterCopy.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin IArtistSetup.is_proxy (Slither line:1425)


End IArtistSetup.is_proxy (Slither line:1428)


Begin IArtistSetup.is_upgradeable_proxy (Slither line:1136)

Checking contract: IArtistSetup 

End IArtistSetup.is_upgradeable_proxy (Slither line:1407)


Begin IArtistFactory.is_proxy (Slither line:1425)


End IArtistFactory.is_proxy (Slither line:1428)


Begin IArtistFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: IArtistFactory 

End IArtistFactory.is_upgradeable_proxy (Slither line:1407)


Begin ArtistFactory.is_proxy (Slither line:1425)


End ArtistFactory.is_proxy (Slither line:1428)


Begin ArtistFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: ArtistFactory 

End ArtistFactory.is_upgradeable_proxy (Slither line:1407)


Begin SimpleProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin SimpleProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff) (Slither line:1576)
    calldatacopy(0, 0, calldatasize()) (Slither line:1576)
    let success := delegatecall(gas(), masterCopy, 0, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'masterCopy'
Looking for corresponding Variable
Current function: fallback

Begin SimpleProxy.find_delegate_variable_from_name
Searching for masterCopy (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking masterCopy (Slither line:1689)
masterCopy is a State Variable in contract SimpleProxy (Slither line:1693)

End SimpleProxy.find_delegate_variable_by_name


End SimpleProxy.find_delegatecall_in_asm (Slither line:1637)


End SimpleProxy.is_proxy (Slither line:1476)


Begin SimpleProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: SimpleProxy 
SimpleProxy is delegating to masterCopy
Looking for setter (Slither line:1200)


Begin SimpleProxy.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address) returns() (Slither line:3117)
Checking function: setMaster(address) returns() (Slither line:3117)
Visibility: external
require(bool,string)(msg.sender == owner,not controller)
masterCopy = _masterCopy
is an Assignment Operation (Slither line:3206)

End SimpleProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: setMaster in contract: SimpleProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin SimpleProxy.find_getter_in_contract (Slither line:2964)

masterCopy is a Variable object
_masterCopy
Checking function: constructor (Slither line:2978)
Checking function: setMaster (Slither line:2978)
Checking function: fallback (Slither line:2978)

End SimpleProxy.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in SimpleProxy (Slither line:1305)
Checking for masterCopy at slot 0 in contract MasterCopy (Slither line:1355)
Found masterCopy at slot 0 in contract MasterCopy (Slither line:1362)

Begin MasterCopy.find_getter_in_contract (Slither line:2964)

masterCopy is a Variable object

End MasterCopy.find_getter_in_contract (Slither line:3073)

Checking external function setMaster
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,not controller)
Checking external function setMaster
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,not controller)
Checking external function fallback
functions_writing_to_variable: masterCopy
functions_writing_to_variable: checking function SimpleProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function SimpleProxy.setMaster (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == owner,not controller) (proxy_features line:904)
functions_writing_to_variable: exp = masterCopy = _masterCopy (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: masterCopy = _masterCopy (proxy_features line:907)
functions_writing_to_variable: Identifier: masterCopy (proxy_features line:919)
get_value_assigned: masterCopy = _masterCopy
functions_writing_to_variable: setMaster writes _masterCopy to masterCopy (proxy_features line:924)
functions_writing_to_variable: checking function SimpleProxy.constructor (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(_masterCopy != address(0),BID:Zero master is not permitted) (proxy_features line:904)
functions_writing_to_variable: exp = masterCopy = _masterCopy (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: masterCopy = _masterCopy (proxy_features line:907)
functions_writing_to_variable: Identifier: masterCopy (proxy_features line:919)
get_value_assigned: masterCopy = _masterCopy
functions_writing_to_variable: exp = owner = msg.sender (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: owner = msg.sender (proxy_features line:907)
functions_writing_to_variable: constructor writes _masterCopy to masterCopy (proxy_features line:924)
has_compatibility_checks: dependencies: ['_masterCopy', '_masterCopy']
has_compatibility_checks: checking external function setMaster
require(bool,string)(msg.sender == owner,not controller)
has_compatibility_checks: condition msg.sender == owner
has_compatibility_checks: checking public function constructor
require(bool,string)(_masterCopy != address(0),BID:Zero master is not permitted)
has_compatibility_checks: condition _masterCopy != address(0)
check_condition_from_expression: condition _masterCopy != address(0)
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)
    calldatacopy(0, 0, calldatasize())
    let success := delegatecall(gas(), masterCopy, 0, calldatasize(), 0, 0)
    returndatacopy(0, 0, returndatasize())
    if eq(success, 0) { revert(0, returndatasize()) }
    return(0, returndatasize())
}
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: constructor
Found external function: setMaster
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == owner,not controller)
has_time_delay: (node.type) EXPRESSION
(Expression) masterCopy = _masterCopy
