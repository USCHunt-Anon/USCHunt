
Begin FlightManager.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2735)


End Contract.find_delegatecall_in_ir (Slither line:2771)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2735)


End Contract.find_delegatecall_in_ir (Slither line:2771)


Found Assembly Node (Slither line:1447)


Begin FlightManager.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    mstore(0x40, 0x60) (Slither line:1576)
    switch flint$selector() (Slither line:1576)
    case 0xa6f2ae3a { (Slither line:1576)
        buy() (Slither line:1576)
    } (Slither line:1576)
    case 0x32b4d74c { (Slither line:1576)
        flint$return32Bytes(getNumRemainingSeats()) (Slither line:1576)
    } (Slither line:1576)
    case 0x09aa69c2 { (Slither line:1576)
        let _flintCallerCheck := 0 (Slither line:1576)
        _flintCallerCheck := add(_flintCallerCheck, flint$isValidCallerCapability(sload(3))) (Slither line:1576)
        if eq(_flintCallerCheck, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        cancelFlight() (Slither line:1576)
    } (Slither line:1576)
    case 0x15981650 { (Slither line:1576)
        let _flintCallerCheck := 0 (Slither line:1576)
        _flintCallerCheck := add(_flintCallerCheck, flint$isValidCallerCapability(sload(3))) (Slither line:1576)
        if eq(_flintCallerCheck, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        setTicketPrice(flint$decodeAsUInt(0)) (Slither line:1576)
    } (Slither line:1576)
    case 0x54ddd5d6 { (Slither line:1576)
        let _flintCallerCheck := 0 (Slither line:1576)
        _flintCallerCheck := add(_flintCallerCheck, flint$isCallerCapabilityInArray(6)) (Slither line:1576)
        if eq(_flintCallerCheck, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        retrieveRefund() (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        revert(0, 0) (Slither line:1576)
    } (Slither line:1576)
    function buy() (Slither line:1576)
    { (Slither line:1576)
        let _caller := caller() (Slither line:1576)
        let _value := flint$allocateMemory(32) (Slither line:1576)
        Wei_init_Int(_value, 1, callvalue()) (Slither line:1576)
        let _amountGiven := Wei_getRawValue(_value, 1) (Slither line:1576)
        Flint$Global_assert_Bool(eq(_amountGiven, sload(add(0, 4)))) (Slither line:1576)
        Flint$Global_assert_Bool(gt(sload(add(0, 5)), 0)) (Slither line:1576)
        Flint$Global_assert_Bool(eq(sload(add(0, 1)), 0)) (Slither line:1576)
        Wei_transfer_$inoutWei(flint$storageDictionaryOffsetForKey(8, _caller), 0, _value, 1) (Slither line:1576)
        sstore(flint$storageArrayOffset(6, sload(add(0, 7))), _caller) (Slither line:1576)
        sstore(add(0, 7), flint$add(sload(add(0, 7)), 1)) (Slither line:1576)
        sstore(add(0, 5), flint$sub(sload(add(0, 5)), 1)) (Slither line:1576)
    } (Slither line:1576)
    function getNumRemainingSeats() -> ret (Slither line:1576)
    { (Slither line:1576)
        let _caller := caller() (Slither line:1576)
        ret := sload(add(0, 5)) (Slither line:1576)
    } (Slither line:1576)
    function cancelFlight() (Slither line:1576)
    { (Slither line:1576)
        FlightInformation_cancelFlight(add(0, 0), 0) (Slither line:1576)
    } (Slither line:1576)
    function setTicketPrice(_ticketPrice) (Slither line:1576)
    { (Slither line:1576)
        sstore(add(0, 4), _ticketPrice) (Slither line:1576)
    } (Slither line:1576)
    function retrieveRefund() (Slither line:1576)
    { (Slither line:1576)
        let _passenger := caller() (Slither line:1576)
        Flint$Global_assert_Bool(sload(add(0, 1))) (Slither line:1576)
        refund(_passenger) (Slither line:1576)
    } (Slither line:1576)
    function refund(_passenger) (Slither line:1576)
    { (Slither line:1576)
        let _refund := flint$allocateMemory(32) (Slither line:1576)
        Wei_init_$inoutWei(_refund, 1, flint$storageDictionaryOffsetForKey(8, _passenger), 0) (Slither line:1576)
        sstore(add(0, 5), flint$add(sload(add(0, 5)), 1)) (Slither line:1576)
        Flint$Global_send_Address_$inoutWei(_passenger, _refund, 1) (Slither line:1576)
    } (Slither line:1576)
    function Flint$Global_send_Address_$inoutWei(_address, _value, _value$isMem) (Slither line:1576)
    { (Slither line:1576)
        let _w := flint$allocateMemory(32) (Slither line:1576)
        Wei_init_$inoutWei(_w, 1, _value, _value$isMem) (Slither line:1576)
        flint$send(Wei_getRawValue(_w, 1), _address) (Slither line:1576)
    } (Slither line:1576)
    function Flint$Global_fatalError() (Slither line:1576)
    { (Slither line:1576)
        flint$fatalError() (Slither line:1576)
    } (Slither line:1576)
    function Flint$Global_assert_Bool(_condition) (Slither line:1576)
    { (Slither line:1576)
        switch eq(_condition, 0) (Slither line:1576)
        case 1 { (Slither line:1576)
            Flint$Global_fatalError() (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function Wei_init_Int(_flintSelf, _flintSelf$isMem, _unsafeRawValue) (Slither line:1576)
    { (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _unsafeRawValue, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_init_$inoutWei_Int(_flintSelf, _flintSelf$isMem, _source, _source$isMem, _amount) (Slither line:1576)
    { (Slither line:1576)
        switch lt(Wei_getRawValue(_source, _source$isMem), _amount) (Slither line:1576)
        case 1 { (Slither line:1576)
            Flint$Global_fatalError() (Slither line:1576)
        } (Slither line:1576)
        flint$store(flint$computeOffset(_source, 0, _source$isMem), flint$sub(flint$load(flint$computeOffset(_source, 0, _source$isMem), _source$isMem), _amount), _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _amount, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_init_$inoutWei(_flintSelf, _flintSelf$isMem, _source, _source$isMem) (Slither line:1576)
    { (Slither line:1576)
        let _value := Wei_getRawValue(_source, _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_source, 0, _source$isMem), flint$sub(flint$load(flint$computeOffset(_source, 0, _source$isMem), _source$isMem), _value), _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _value, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_transfer_$inoutWei_Int(_flintSelf, _flintSelf$isMem, _source, _source$isMem, _amount) (Slither line:1576)
    { (Slither line:1576)
        switch lt(Wei_getRawValue(_source, _source$isMem), _amount) (Slither line:1576)
        case 1 { (Slither line:1576)
            Flint$Global_fatalError() (Slither line:1576)
        } (Slither line:1576)
        flint$store(flint$computeOffset(_source, 0, _source$isMem), flint$sub(flint$load(flint$computeOffset(_source, 0, _source$isMem), _source$isMem), _amount), _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), flint$add(flint$load(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _flintSelf$isMem), _amount), _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_transfer_$inoutWei(_flintSelf, _flintSelf$isMem, _source, _source$isMem) (Slither line:1576)
    { (Slither line:1576)
        Wei_transfer_$inoutWei_Int(_flintSelf, _flintSelf$isMem, _source, _source$isMem, Wei_getRawValue(_source, _source$isMem)) (Slither line:1576)
    } (Slither line:1576)
    function Wei_getRawValue(_flintSelf, _flintSelf$isMem) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := flint$load(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function FlightInformation_init_String_Int(_flintSelf, _flintSelf$isMem, _flightID, _numTotalSeats) (Slither line:1576)
    { (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 1, _flintSelf$isMem), 0, _flintSelf$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 2, _flintSelf$isMem), 0, _flintSelf$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _flightID, _flintSelf$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 2, _flintSelf$isMem), _numTotalSeats, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function FlightInformation_cancelFlight(_flintSelf, _flintSelf$isMem) (Slither line:1576)
    { (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 1, _flintSelf$isMem), 0, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function FlightInformation_getNumTotalSeat(_flintSelf, _flintSelf$isMem) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := flint$load(flint$computeOffset(_flintSelf, 2, _flintSelf$isMem), _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function flint$selector() -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000) (Slither line:1576)
    } (Slither line:1576)
    function flint$decodeAsAddress(offset) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := flint$decodeAsUInt(offset) (Slither line:1576)
    } (Slither line:1576)
    function flint$decodeAsUInt(offset) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := calldataload(add(4, mul(offset, 0x20))) (Slither line:1576)
    } (Slither line:1576)
    function flint$store(ptr, val, mem) (Slither line:1576)
    { (Slither line:1576)
        switch iszero(mem) (Slither line:1576)
        case 0 { (Slither line:1576)
            mstore(ptr, val) (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            sstore(ptr, val) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$load(ptr, mem) -> ret (Slither line:1576)
    { (Slither line:1576)
        switch iszero(mem) (Slither line:1576)
        case 0 { (Slither line:1576)
            ret := mload(ptr) (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            ret := sload(ptr) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$computeOffset(base, offset, mem) -> ret (Slither line:1576)
    { (Slither line:1576)
        switch iszero(mem) (Slither line:1576)
        case 0 { (Slither line:1576)
            ret := add(base, mul(offset, 32)) (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            ret := add(base, offset) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$allocateMemory(size) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := mload(0x40) (Slither line:1576)
        mstore(0x40, add(ret, size)) (Slither line:1576)
    } (Slither line:1576)
    function flint$isValidCallerCapability(_address) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := eq(_address, caller()) (Slither line:1576)
    } (Slither line:1576)
    function flint$isCallerCapabilityInArray(arrayOffset) -> ret (Slither line:1576)
    { (Slither line:1576)
        let size := sload(arrayOffset) (Slither line:1576)
        let found := 0 (Slither line:1576)
        let _caller := caller() (Slither line:1576)
        let arrayStart := flint$add(arrayOffset, 1) (Slither line:1576)
        for { (Slither line:1576)
            let i := 0 (Slither line:1576)
        } (Slither line:1576)
        and(lt(i, size), iszero(found)) (Slither line:1576)
        { (Slither line:1576)
            i := add(i, 1) (Slither line:1576)
        } (Slither line:1576)
        { (Slither line:1576)
            if eq(sload(flint$storageArrayOffset(arrayOffset, i)), _caller) (Slither line:1576)
            { (Slither line:1576)
                found := 1 (Slither line:1576)
            } (Slither line:1576)
        } (Slither line:1576)
        ret := found (Slither line:1576)
    } (Slither line:1576)
    function flint$return32Bytes(v) (Slither line:1576)
    { (Slither line:1576)
        mstore(0, v) (Slither line:1576)
        return(0, 0x20) (Slither line:1576)
    } (Slither line:1576)
    function flint$isInvalidSubscriptExpression(index, arraySize) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := or(iszero(arraySize), or(lt(index, 0), gt(index, flint$sub(arraySize, 1)))) (Slither line:1576)
    } (Slither line:1576)
    function flint$storageArrayOffset(arrayOffset, index) -> ret (Slither line:1576)
    { (Slither line:1576)
        let arraySize := sload(arrayOffset) (Slither line:1576)
        switch eq(arraySize, index) (Slither line:1576)
        case 0 { (Slither line:1576)
            if flint$isInvalidSubscriptExpression(index, arraySize) (Slither line:1576)
            { (Slither line:1576)
                revert(0, 0) (Slither line:1576)
            } (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            sstore(arrayOffset, flint$add(arraySize, 1)) (Slither line:1576)
        } (Slither line:1576)
        ret := flint$storageDictionaryOffsetForKey(arrayOffset, index) (Slither line:1576)
    } (Slither line:1576)
    function flint$storageFixedSizeArrayOffset(arrayOffset, index, arraySize) -> ret (Slither line:1576)
    { (Slither line:1576)
        if flint$isInvalidSubscriptExpression(index, arraySize) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        ret := flint$add(arrayOffset, index) (Slither line:1576)
    } (Slither line:1576)
    function flint$storageDictionaryOffsetForKey(dictionaryOffset, key) -> ret (Slither line:1576)
    { (Slither line:1576)
        mstore(0, key) (Slither line:1576)
        mstore(32, dictionaryOffset) (Slither line:1576)
        ret := keccak256(0, 64) (Slither line:1576)
    } (Slither line:1576)
    function flint$send(_value, _address) (Slither line:1576)
    { (Slither line:1576)
        let ret := call(gas(), _address, _value, 0, 0, 0, 0) (Slither line:1576)
        if iszero(ret) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$fatalError() (Slither line:1576)
    { (Slither line:1576)
        revert(0, 0) (Slither line:1576)
    } (Slither line:1576)
    function flint$add(a, b) -> ret (Slither line:1576)
    { (Slither line:1576)
        let c := add(a, b) (Slither line:1576)
        if lt(c, a) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        ret := c (Slither line:1576)
    } (Slither line:1576)
    function flint$sub(a, b) -> ret (Slither line:1576)
    { (Slither line:1576)
        if gt(b, a) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        ret := sub(a, b) (Slither line:1576)
    } (Slither line:1576)
    function flint$mul(a, b) -> ret (Slither line:1576)
    { (Slither line:1576)
        switch iszero(a) (Slither line:1576)
        case 1 { (Slither line:1576)
            ret := 0 (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            let c := mul(a, b) (Slither line:1576)
            if iszero(eq(div(c, a), b)) (Slither line:1576)
            { (Slither line:1576)
                revert(0, 0) (Slither line:1576)
            } (Slither line:1576)
            ret := c (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$div(a, b) -> ret (Slither line:1576)
    { (Slither line:1576)
        if eq(b, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        ret := div(a, b) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End FlightManager.find_delegatecall_in_asm (Slither line:1637)


Begin FlightManager.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    mstore(0x40, 0x60) (Slither line:1576)
    switch flint$selector() (Slither line:1576)
    case 0xa6f2ae3a { (Slither line:1576)
        buy() (Slither line:1576)
    } (Slither line:1576)
    case 0x32b4d74c { (Slither line:1576)
        flint$return32Bytes(getNumRemainingSeats()) (Slither line:1576)
    } (Slither line:1576)
    case 0x09aa69c2 { (Slither line:1576)
        let _flintCallerCheck := 0 (Slither line:1576)
        _flintCallerCheck := add(_flintCallerCheck, flint$isValidCallerCapability(sload(3))) (Slither line:1576)
        if eq(_flintCallerCheck, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        cancelFlight() (Slither line:1576)
    } (Slither line:1576)
    case 0x15981650 { (Slither line:1576)
        let _flintCallerCheck := 0 (Slither line:1576)
        _flintCallerCheck := add(_flintCallerCheck, flint$isValidCallerCapability(sload(3))) (Slither line:1576)
        if eq(_flintCallerCheck, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        setTicketPrice(flint$decodeAsUInt(0)) (Slither line:1576)
    } (Slither line:1576)
    case 0x54ddd5d6 { (Slither line:1576)
        let _flintCallerCheck := 0 (Slither line:1576)
        _flintCallerCheck := add(_flintCallerCheck, flint$isCallerCapabilityInArray(6)) (Slither line:1576)
        if eq(_flintCallerCheck, 0) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        retrieveRefund() (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        revert(0, 0) (Slither line:1576)
    } (Slither line:1576)
    function buy() (Slither line:1576)
    { (Slither line:1576)
        let _caller := caller() (Slither line:1576)
        let _value := flint$allocateMemory(32) (Slither line:1576)
        Wei_init_Int(_value, 1, callvalue()) (Slither line:1576)
        let _amountGiven := Wei_getRawValue(_value, 1) (Slither line:1576)
        Flint$Global_assert_Bool(eq(_amountGiven, sload(add(0, 4)))) (Slither line:1576)
        Flint$Global_assert_Bool(gt(sload(add(0, 5)), 0)) (Slither line:1576)
        Flint$Global_assert_Bool(eq(sload(add(0, 1)), 0)) (Slither line:1576)
        Wei_transfer_$inoutWei(flint$storageDictionaryOffsetForKey(8, _caller), 0, _value, 1) (Slither line:1576)
        sstore(flint$storageArrayOffset(6, sload(add(0, 7))), _caller) (Slither line:1576)
        sstore(add(0, 7), flint$add(sload(add(0, 7)), 1)) (Slither line:1576)
        sstore(add(0, 5), flint$sub(sload(add(0, 5)), 1)) (Slither line:1576)
    } (Slither line:1576)
    function getNumRemainingSeats() -> ret (Slither line:1576)
    { (Slither line:1576)
        let _caller := caller() (Slither line:1576)
        ret := sload(add(0, 5)) (Slither line:1576)
    } (Slither line:1576)
    function cancelFlight() (Slither line:1576)
    { (Slither line:1576)
        FlightInformation_cancelFlight(add(0, 0), 0) (Slither line:1576)
    } (Slither line:1576)
    function setTicketPrice(_ticketPrice) (Slither line:1576)
    { (Slither line:1576)
        sstore(add(0, 4), _ticketPrice) (Slither line:1576)
    } (Slither line:1576)
    function retrieveRefund() (Slither line:1576)
    { (Slither line:1576)
        let _passenger := caller() (Slither line:1576)
        Flint$Global_assert_Bool(sload(add(0, 1))) (Slither line:1576)
        refund(_passenger) (Slither line:1576)
    } (Slither line:1576)
    function refund(_passenger) (Slither line:1576)
    { (Slither line:1576)
        let _refund := flint$allocateMemory(32) (Slither line:1576)
        Wei_init_$inoutWei(_refund, 1, flint$storageDictionaryOffsetForKey(8, _passenger), 0) (Slither line:1576)
        sstore(add(0, 5), flint$add(sload(add(0, 5)), 1)) (Slither line:1576)
        Flint$Global_send_Address_$inoutWei(_passenger, _refund, 1) (Slither line:1576)
    } (Slither line:1576)
    function Flint$Global_send_Address_$inoutWei(_address, _value, _value$isMem) (Slither line:1576)
    { (Slither line:1576)
        let _w := flint$allocateMemory(32) (Slither line:1576)
        Wei_init_$inoutWei(_w, 1, _value, _value$isMem) (Slither line:1576)
        flint$send(Wei_getRawValue(_w, 1), _address) (Slither line:1576)
    } (Slither line:1576)
    function Flint$Global_fatalError() (Slither line:1576)
    { (Slither line:1576)
        flint$fatalError() (Slither line:1576)
    } (Slither line:1576)
    function Flint$Global_assert_Bool(_condition) (Slither line:1576)
    { (Slither line:1576)
        switch eq(_condition, 0) (Slither line:1576)
        case 1 { (Slither line:1576)
            Flint$Global_fatalError() (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function Wei_init_Int(_flintSelf, _flintSelf$isMem, _unsafeRawValue) (Slither line:1576)
    { (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _unsafeRawValue, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_init_$inoutWei_Int(_flintSelf, _flintSelf$isMem, _source, _source$isMem, _amount) (Slither line:1576)
    { (Slither line:1576)
        switch lt(Wei_getRawValue(_source, _source$isMem), _amount) (Slither line:1576)
        case 1 { (Slither line:1576)
            Flint$Global_fatalError() (Slither line:1576)
        } (Slither line:1576)
        flint$store(flint$computeOffset(_source, 0, _source$isMem), flint$sub(flint$load(flint$computeOffset(_source, 0, _source$isMem), _source$isMem), _amount), _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _amount, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_init_$inoutWei(_flintSelf, _flintSelf$isMem, _source, _source$isMem) (Slither line:1576)
    { (Slither line:1576)
        let _value := Wei_getRawValue(_source, _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_source, 0, _source$isMem), flint$sub(flint$load(flint$computeOffset(_source, 0, _source$isMem), _source$isMem), _value), _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _value, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_transfer_$inoutWei_Int(_flintSelf, _flintSelf$isMem, _source, _source$isMem, _amount) (Slither line:1576)
    { (Slither line:1576)
        switch lt(Wei_getRawValue(_source, _source$isMem), _amount) (Slither line:1576)
        case 1 { (Slither line:1576)
            Flint$Global_fatalError() (Slither line:1576)
        } (Slither line:1576)
        flint$store(flint$computeOffset(_source, 0, _source$isMem), flint$sub(flint$load(flint$computeOffset(_source, 0, _source$isMem), _source$isMem), _amount), _source$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), flint$add(flint$load(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _flintSelf$isMem), _amount), _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function Wei_transfer_$inoutWei(_flintSelf, _flintSelf$isMem, _source, _source$isMem) (Slither line:1576)
    { (Slither line:1576)
        Wei_transfer_$inoutWei_Int(_flintSelf, _flintSelf$isMem, _source, _source$isMem, Wei_getRawValue(_source, _source$isMem)) (Slither line:1576)
    } (Slither line:1576)
    function Wei_getRawValue(_flintSelf, _flintSelf$isMem) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := flint$load(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function FlightInformation_init_String_Int(_flintSelf, _flintSelf$isMem, _flightID, _numTotalSeats) (Slither line:1576)
    { (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 1, _flintSelf$isMem), 0, _flintSelf$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 2, _flintSelf$isMem), 0, _flintSelf$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 0, _flintSelf$isMem), _flightID, _flintSelf$isMem) (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 2, _flintSelf$isMem), _numTotalSeats, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function FlightInformation_cancelFlight(_flintSelf, _flintSelf$isMem) (Slither line:1576)
    { (Slither line:1576)
        flint$store(flint$computeOffset(_flintSelf, 1, _flintSelf$isMem), 0, _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function FlightInformation_getNumTotalSeat(_flintSelf, _flintSelf$isMem) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := flint$load(flint$computeOffset(_flintSelf, 2, _flintSelf$isMem), _flintSelf$isMem) (Slither line:1576)
    } (Slither line:1576)
    function flint$selector() -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := div(calldataload(0), 0x100000000000000000000000000000000000000000000000000000000) (Slither line:1576)
    } (Slither line:1576)
    function flint$decodeAsAddress(offset) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := flint$decodeAsUInt(offset) (Slither line:1576)
    } (Slither line:1576)
    function flint$decodeAsUInt(offset) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := calldataload(add(4, mul(offset, 0x20))) (Slither line:1576)
    } (Slither line:1576)
    function flint$store(ptr, val, mem) (Slither line:1576)
    { (Slither line:1576)
        switch iszero(mem) (Slither line:1576)
        case 0 { (Slither line:1576)
            mstore(ptr, val) (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            sstore(ptr, val) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$load(ptr, mem) -> ret (Slither line:1576)
    { (Slither line:1576)
        switch iszero(mem) (Slither line:1576)
        case 0 { (Slither line:1576)
            ret := mload(ptr) (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            ret := sload(ptr) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$computeOffset(base, offset, mem) -> ret (Slither line:1576)
    { (Slither line:1576)
        switch iszero(mem) (Slither line:1576)
        case 0 { (Slither line:1576)
            ret := add(base, mul(offset, 32)) (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            ret := add(base, offset) (Slither line:1576)
        } (Slither line:1576)
    } (Slither line:1576)
    function flint$allocateMemory(size) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := mload(0x40) (Slither line:1576)
        mstore(0x40, add(ret, size)) (Slither line:1576)
    } (Slither line:1576)
    function flint$isValidCallerCapability(_address) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := eq(_address, caller()) (Slither line:1576)
    } (Slither line:1576)
    function flint$isCallerCapabilityInArray(arrayOffset) -> ret (Slither line:1576)
    { (Slither line:1576)
        let size := sload(arrayOffset) (Slither line:1576)
        let found := 0 (Slither line:1576)
        let _caller := caller() (Slither line:1576)
        let arrayStart := flint$add(arrayOffset, 1) (Slither line:1576)
        for { (Slither line:1576)
            let i := 0 (Slither line:1576)
        } (Slither line:1576)
        and(lt(i, size), iszero(found)) (Slither line:1576)
        { (Slither line:1576)
            i := add(i, 1) (Slither line:1576)
        } (Slither line:1576)
        { (Slither line:1576)
            if eq(sload(flint$storageArrayOffset(arrayOffset, i)), _caller) (Slither line:1576)
            { (Slither line:1576)
                found := 1 (Slither line:1576)
            } (Slither line:1576)
        } (Slither line:1576)
        ret := found (Slither line:1576)
    } (Slither line:1576)
    function flint$return32Bytes(v) (Slither line:1576)
    { (Slither line:1576)
        mstore(0, v) (Slither line:1576)
        return(0, 0x20) (Slither line:1576)
    } (Slither line:1576)
    function flint$isInvalidSubscriptExpression(index, arraySize) -> ret (Slither line:1576)
    { (Slither line:1576)
        ret := or(iszero(arraySize), or(lt(index, 0), gt(index, flint$sub(arraySize, 1)))) (Slither line:1576)
    } (Slither line:1576)
    function flint$storageArrayOffset(arrayOffset, index) -> ret (Slither line:1576)
    { (Slither line:1576)
        let arraySize := sload(arrayOffset) (Slither line:1576)
        switch eq(arraySize, index) (Slither line:1576)
        case 0 { (Slither line:1576)
            if flint$isInvalidSubscriptExpression(index, arraySize) (Slither line:1576)
            { (Slither line:1576)
                revert(0, 0) (Slither line:1576)
            } (Slither line:1576)
        } (Slither line:1576)
        default { (Slither line:1576)
            sstore(arrayOffset, flint$add(arraySize, 1)) (Slither line:1576)
        } (Slither line:1576)
        ret := flint$storageDictionaryOffsetForKey(arrayOffset, index) (Slither line:1576)
    } (Slither line:1576)
    function flint$storageFixedSizeArrayOffset(arrayOffset, index, arraySize) -> ret (Slither line:1576)
    { (Slither line:1576)
        if flint$isInvalidSubscriptExpression(index, arraySize) (Slither line:1576)
        { (Slither line:1576)
            revert(0, 0) (Slither line:1576)
        } (Slither line:1576)
        ret := flint$add(arrayOffset, index) (Slither line:1576)
    } (Slither line:1576)
    function flint$storageDictionaryOffsetForKey(dictionaryOffset, key) -> ret (Slither line:1576)
    { (Slither line:1576)
        mstore(0, key) (Slither line:1576)
        mstore(32, dictionaryOffset) (Slither line:1576)
        ret := keccak256(0, 64) (Slither line:1576)
    } (Slither line:1576)
    function flint$send(_value, _address) (Slither line:1576)
    { (Slither line:1576)
        let ret := call(gas(), _address, _value, 0, 0, 0, 0) (Slither line:1576)

Found call in inline asm (Slither line:1622)
Destination param is called '_address'
Looking for corresponding Variable
Current function: fallback

Begin FlightManager.find_delegate_variable_from_name
Searching for _address (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
fallback contains assembly, searching for sload (Slither line:1875)

End FlightManager.find_delegate_variable_from_name (Slither line:1947)


Begin FlightManager.find_delegate_sloaded_from_hardcoded_slot (Slither line:2681)


End FlightManager.find_delegate_sloaded_from_hardcoded_slot (Slither line:2708)


End FlightManager.find_delegatecall_in_asm (Slither line:1637)


End FlightManager.is_proxy (Slither line:1476)


Begin FlightManager.is_upgradeable_proxy (Slither line:1136)

Checking contract: FlightManager 

End FlightManager.is_upgradeable_proxy (Slither line:1407)


Begin _InterfaceFlightManager.is_proxy (Slither line:1425)


End _InterfaceFlightManager.is_proxy (Slither line:1428)


Begin _InterfaceFlightManager.is_upgradeable_proxy (Slither line:1136)

Checking contract: _InterfaceFlightManager 

End _InterfaceFlightManager.is_upgradeable_proxy (Slither line:1407)

