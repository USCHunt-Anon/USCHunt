
Begin Proxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(_impl != address(0),implementation contract not set) (Slither line:2792)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2807)
Args:
_impl != address(0)
implementation contract not set

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking _implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: _implementation (Slither line:1719)
Identifier value: _implementation (Slither line:1725)
_implementation is a State Variable in contract Proxy (Slither line:1730)

End Proxy.find_delegate_variable_by_name


End Proxy.find_delegatecall_in_asm (Slither line:1637)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 
Proxy is delegating to _implementation
Looking for setter (Slither line:1200)


Begin Proxy.find_setter_in_contract (Slither line:3109)

Checking function: constructor() returns() (Slither line:3117)
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(msg.sender == owner,Not owner)
require(bool,string)(impl != address(0),Cannot upgrade to invalid address)
Upgraded(impl)
require(bool,string)(impl != _implementation,Cannot upgrade to the same implementation)
onlyOwner()
_implementation = impl
is an Assignment Operation (Slither line:3206)

End Proxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Proxy.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
impl
Checking function: constructor (Slither line:2978)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End Proxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: Proxy (Slither line:1285)

End Proxy.is_upgradeable_proxy (Slither line:1293)

Checking public function implementation
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Not owner)
Checking external function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function Proxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.upgradeTo (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(impl != address(0),Cannot upgrade to invalid address) (proxy_features line:904)
functions_writing_to_variable: exp = require(bool,string)(impl != _implementation,Cannot upgrade to the same implementation) (proxy_features line:904)
functions_writing_to_variable: exp = _implementation = impl (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = impl (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = impl
functions_writing_to_variable: exp = Upgraded(impl) (proxy_features line:904)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == owner,Not owner) (proxy_features line:904)
functions_writing_to_variable: upgradeTo writes impl to _implementation (proxy_features line:924)
functions_writing_to_variable: checking function Proxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.fallback (proxy_features line:893)
has_compatibility_checks: dependencies: ['impl']
has_compatibility_checks: checking public function upgradeTo
require(bool,string)(msg.sender == owner,Not owner)
has_compatibility_checks: condition msg.sender == owner
require(bool,string)(impl != address(0),Cannot upgrade to invalid address)
has_compatibility_checks: condition impl != address(0)
check_condition_from_expression: modifier calls: ['onlyOwner()']
check_condition_from_expression: condition impl != address(0)
require(bool,string)(impl != _implementation,Cannot upgrade to the same implementation)
has_compatibility_checks: condition impl != _implementation
check_condition_from_expression: modifier calls: ['onlyOwner()']
check_condition_from_expression: condition impl != _implementation
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = _implementation
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(_impl != address(0),implementation contract not set)
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found public function: implementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == owner,Not owner)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(impl != address(0),Cannot upgrade to invalid address)
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(impl)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(impl != _implementation,Cannot upgrade to the same implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = impl
