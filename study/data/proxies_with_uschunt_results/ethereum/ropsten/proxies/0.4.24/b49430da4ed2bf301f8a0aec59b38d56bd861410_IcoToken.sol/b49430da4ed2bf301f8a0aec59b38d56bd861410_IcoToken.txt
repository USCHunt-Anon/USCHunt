
Begin EternalStorage.is_proxy (Slither line:1425)


End EternalStorage.is_proxy (Slither line:1428)


Begin EternalStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: EternalStorage 

End EternalStorage.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2792)
Expression called: require(bool)
Type of call: tuple() (Slither line:2807)
Args:
_impl != address(0)

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin Proxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Got abstract function, looking for overriding function (Slither line:2015)
Failure (Slither line:2023)
implementation returns a variable of type address   (Slither line:2183)
Return value is LocalVariable:  (Slither line:2256)
has no expression (Slither line:2316)

End Proxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End Proxy.find_delegate_variable_by_name (Slither line:1739)


Begin Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2673)


End Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2700)


End Proxy.find_delegatecall_in_asm (Slither line:1637)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityStorage.is_proxy (Slither line:1425)


End UpgradeabilityStorage.is_proxy (Slither line:1428)


Begin UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityStorage 

End UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityProxy.is_proxy (Slither line:1425)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin UpgradeabilityProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2792)
Expression called: require(bool)
Type of call: tuple() (Slither line:2807)
Args:
_impl != address(0)

End UpgradeabilityProxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin UpgradeabilityProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _version (Slither line:1689)
Checking _implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in UpgradeabilityProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin UpgradeabilityProxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2031)
_implementation (Slither line:2038)
implementation returns a variable of type address   called _implementation (Slither line:2183)

End UpgradeabilityProxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End UpgradeabilityProxy.find_delegate_variable_by_name (Slither line:1739)


End UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1637)


End UpgradeabilityProxy.is_proxy (Slither line:1476)


Begin UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityProxy 
UpgradeabilityProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3109)

Checking function: version() returns(string) (Slither line:3117)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradeabilityStorage 
Looking in UpgradeabilityProxy (Slither line:1213)

Begin UpgradeabilityProxy.find_setter_in_contract (Slither line:3109)

Checking function: _upgradeTo(string,address) returns() (Slither line:3117)
Visibility: internal
Checking function: version() returns(string) (Slither line:3117)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
Checking function: fallback() returns() (Slither line:3117)

End UpgradeabilityProxy.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradeabilityProxy (Slither line:1220)

Begin UpgradeabilityProxy.find_setter_in_contract (Slither line:3109)

Checking function: _upgradeTo(string,address) returns() (Slither line:3117)
Visibility: internal
Checking function: version() returns(string) (Slither line:3117)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
Checking function: fallback() returns() (Slither line:3117)

End UpgradeabilityProxy.find_setter_in_contract (Slither line:3315)


Could not find implementation setter in UpgradeabilityProxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
Checking function: version (Slither line:2978)
version returns string variable  (Slither line:2998)
RETURN node expression: _version (Slither line:3018)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

Begin UpgradeabilityProxy.getter_return_is_non_constant (Slither line:2873)

Found getter function but not setter
Checking if getter calls any other function
RETURN: _implementation (Slither line:2878)
ENTRY_POINT: None (Slither line:2878)

End UpgradeabilityProxy.getter_return_is_non_constant (Slither line:2932)


End UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1293)


Begin UpgradeabilityOwnerStorage.is_proxy (Slither line:1425)


End UpgradeabilityOwnerStorage.is_proxy (Slither line:1428)


Begin UpgradeabilityOwnerStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityOwnerStorage 

End UpgradeabilityOwnerStorage.is_upgradeable_proxy (Slither line:1407)


Begin OwnedUpgradeabilityProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin OwnedUpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin OwnedUpgradeabilityProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _upgradeabilityOwner (Slither line:1689)
Checking _version (Slither line:1689)
Checking _implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in OwnedUpgradeabilityProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin OwnedUpgradeabilityProxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2031)
_implementation (Slither line:2038)
implementation returns a variable of type address   called _implementation (Slither line:2183)

End OwnedUpgradeabilityProxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End OwnedUpgradeabilityProxy.find_delegate_variable_by_name (Slither line:1739)


End OwnedUpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1637)


End OwnedUpgradeabilityProxy.is_proxy (Slither line:1476)


Begin OwnedUpgradeabilityProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnedUpgradeabilityProxy 
OwnedUpgradeabilityProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3109)

Checking function: version() returns(string) (Slither line:3117)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradeabilityStorage 
Looking in OwnedUpgradeabilityProxy (Slither line:1213)

Begin OwnedUpgradeabilityProxy.find_setter_in_contract (Slither line:3109)

Checking function: constructor() returns() (Slither line:3117)
Checking function: proxyOwner() returns(address) (Slither line:3117)
Visibility: public
_upgradeabilityOwner
upgradeabilityOwner()
Checking function: transferProxyOwnership(address) returns() (Slither line:3117)
Visibility: public
_upgradeabilityOwner = newUpgradeabilityOwner
is an Assignment Operation (Slither line:3206)
setUpgradeabilityOwner(newOwner)
onlyProxyOwner()
require(bool)(newOwner != address(0))
require(bool)(msg.sender == proxyOwner())
_upgradeabilityOwner
ProxyOwnershipTransferred(proxyOwner(),newOwner)
upgradeabilityOwner()
Checking function: upgradeTo(string,address) returns() (Slither line:3117)
Visibility: public
Upgraded(version,implementation)
require(bool)(_implementation != implementation)
upgradeabilityOwner()
_upgradeTo(version,implementation)
_version = version
is an Assignment Operation (Slither line:3206)
require(bool)(msg.sender == proxyOwner())
_upgradeabilityOwner
onlyProxyOwner()
_implementation = implementation
is an Assignment Operation (Slither line:3206)

End OwnedUpgradeabilityProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: OwnedUpgradeabilityProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
implementation
Checking function: version (Slither line:2978)
version returns string variable  (Slither line:2998)
RETURN node expression: _version (Slither line:3018)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End OwnedUpgradeabilityProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: implementation
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
Checking public function version
Checking public function implementation
Checking public function implementation
Checking public function upgradeabilityOwner
Checking public function proxyOwner
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeToAndCall
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.setUpgradeabilityOwner (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.upgradeToAndCall (proxy_features line:893)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeToAndCall writes implementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.proxyOwner (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.version (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.upgradeTo (proxy_features line:893)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeTo writes implementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.transferProxyOwnership (proxy_features line:893)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy._upgradeTo (proxy_features line:893)
functions_writing_to_variable: exp = require(bool)(_implementation != implementation) (proxy_features line:904)
functions_writing_to_variable: exp = _version = version (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _version = version (proxy_features line:907)
functions_writing_to_variable: exp = _implementation = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = implementation (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: exp = Upgraded(version,implementation) (proxy_features line:904)
functions_writing_to_variable: _upgradeTo writes implementation to _implementation (proxy_features line:924)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.upgradeabilityOwner (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation', 'implementation', 'implementation']
has_compatibility_checks: checking public function upgradeToAndCall
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(address(this).call.value(msg.value)(data))
has_compatibility_checks: condition address(this).call.value(msg.value)(data)
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
has_compatibility_checks: checking public function upgradeTo
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
has_compatibility_checks: skipping internal function _upgradeTo
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: version
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_implementation != implementation)
has_time_delay: (node.type) RETURN
(Expression) upgradeabilityOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _version = version
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner())
has_time_delay: (node.type) RETURN
(Expression) _upgradeabilityOwner
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = implementation

Begin EternalStorageProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin EternalStorageProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin EternalStorageProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking uintStorage (Slither line:1689)
Checking stringStorage (Slither line:1689)
Checking addressStorage (Slither line:1689)
Checking bytesStorage (Slither line:1689)
Checking boolStorage (Slither line:1689)
Checking intStorage (Slither line:1689)
Checking _upgradeabilityOwner (Slither line:1689)
Checking _version (Slither line:1689)
Checking _implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in EternalStorageProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin EternalStorageProxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2031)
_implementation (Slither line:2038)
implementation returns a variable of type address   called _implementation (Slither line:2183)

End EternalStorageProxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End EternalStorageProxy.find_delegate_variable_by_name (Slither line:1739)


End EternalStorageProxy.find_delegatecall_in_asm (Slither line:1637)


End EternalStorageProxy.is_proxy (Slither line:1476)


Begin EternalStorageProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: EternalStorageProxy 
EternalStorageProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3109)

Expression: implementation (Slither line:3112)
Checking function: version() returns(string) (Slither line:3117)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradeabilityStorage 
Looking in EternalStorageProxy (Slither line:1213)

Begin EternalStorageProxy.find_setter_in_contract (Slither line:3109)

Expression: implementation (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: proxyOwner() returns(address) (Slither line:3117)
Visibility: public
_upgradeabilityOwner
upgradeabilityOwner()
Checking function: transferProxyOwnership(address) returns() (Slither line:3117)
Visibility: public
_upgradeabilityOwner = newUpgradeabilityOwner
is an Assignment Operation (Slither line:3206)
implementation
onlyProxyOwner()
require(bool)(msg.sender == proxyOwner())
require(bool)(newOwner != address(0))
ProxyOwnershipTransferred(proxyOwner(),newOwner)
upgradeabilityOwner()
_upgradeabilityOwner
setUpgradeabilityOwner(newOwner)
Checking function: upgradeTo(string,address) returns() (Slither line:3117)
Visibility: public
Upgraded(version,implementation)
_upgradeTo(version,implementation)
require(bool)(msg.sender == proxyOwner())
require(bool)(_implementation != implementation)
_version = version
is an Assignment Operation (Slither line:3206)
implementation
onlyProxyOwner()
upgradeabilityOwner()
_upgradeabilityOwner
_implementation = implementation
is an Assignment Operation (Slither line:3206)
implementation

End EternalStorageProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: EternalStorageProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
implementation
Checking function: version (Slither line:2978)
version returns string variable  (Slither line:2998)
RETURN node expression: _version (Slither line:3018)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End EternalStorageProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: implementation
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
Checking public function proxyOwner
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeToAndCall
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function version
Checking public function implementation
Checking public function implementation
Checking public function upgradeabilityOwner
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function EternalStorageProxy.upgradeabilityOwner (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy._upgradeTo (proxy_features line:893)
functions_writing_to_variable: exp = require(bool)(_implementation != implementation) (proxy_features line:904)
functions_writing_to_variable: exp = _version = version (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _version = version (proxy_features line:907)
functions_writing_to_variable: exp = _implementation = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = implementation (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: exp = Upgraded(version,implementation) (proxy_features line:904)
functions_writing_to_variable: _upgradeTo writes implementation to _implementation (proxy_features line:924)
functions_writing_to_variable: checking function EternalStorageProxy.proxyOwner (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.setUpgradeabilityOwner (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.upgradeToAndCall (proxy_features line:893)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeToAndCall writes implementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function EternalStorageProxy.transferProxyOwnership (proxy_features line:893)
functions_writing_to_variable: checking function EternalStorageProxy.upgradeTo (proxy_features line:893)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeTo writes implementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function EternalStorageProxy.version (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation', 'implementation', 'implementation']
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: checking public function upgradeToAndCall
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(address(this).call.value(msg.value)(data))
has_compatibility_checks: condition address(this).call.value(msg.value)(data)
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
has_compatibility_checks: checking public function upgradeTo
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: constructor
Found public function: proxyOwner
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner())
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_implementation != implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _version = version
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) RETURN
(Expression) upgradeabilityOwner()
has_time_delay: (node.type) RETURN
(Expression) _upgradeabilityOwner
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = implementation

Begin ERC20Basic.is_proxy (Slither line:1425)


End ERC20Basic.is_proxy (Slither line:1428)


Begin ERC20Basic.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20Basic 

End ERC20Basic.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin BasicToken.is_proxy (Slither line:1425)


End BasicToken.is_proxy (Slither line:1428)


Begin BasicToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: BasicToken 

End BasicToken.is_upgradeable_proxy (Slither line:1407)


Begin ERC20.is_proxy (Slither line:1425)


End ERC20.is_proxy (Slither line:1428)


Begin ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20 

End ERC20.is_upgradeable_proxy (Slither line:1407)


Begin StandardToken.is_proxy (Slither line:1425)


End StandardToken.is_proxy (Slither line:1428)


Begin StandardToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: StandardToken 

End StandardToken.is_upgradeable_proxy (Slither line:1407)


Begin DetailedERC20.is_proxy (Slither line:1425)


End DetailedERC20.is_proxy (Slither line:1428)


Begin DetailedERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: DetailedERC20 

End DetailedERC20.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin IcoToken.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin IcoToken.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2792)
Expression called: require(bool)
Type of call: tuple() (Slither line:2807)
Args:
_impl != address(0)

End IcoToken.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin IcoToken.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin IcoToken.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking balances (Slither line:1689)
Checking totalSupply_ (Slither line:1689)
Checking allowed (Slither line:1689)
Checking name (Slither line:1689)
Checking symbol (Slither line:1689)
Checking decimals (Slither line:1689)
Checking uintStorage (Slither line:1689)
Checking stringStorage (Slither line:1689)
Checking addressStorage (Slither line:1689)
Checking bytesStorage (Slither line:1689)
Checking boolStorage (Slither line:1689)
Checking intStorage (Slither line:1689)
Checking _upgradeabilityOwner (Slither line:1689)
Checking _version (Slither line:1689)
Checking _implementation (Slither line:1689)
Checking devContract (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in IcoToken.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin IcoToken.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2031)
_implementation (Slither line:2038)
implementation returns a variable of type address   called _implementation (Slither line:2183)

End IcoToken.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End IcoToken.find_delegate_variable_by_name (Slither line:1739)


End IcoToken.find_delegatecall_in_asm (Slither line:1637)


End IcoToken.is_proxy (Slither line:1476)


Begin IcoToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: IcoToken 
IcoToken is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3109)

Expression: implementation (Slither line:3112)
Checking function: version() returns(string) (Slither line:3117)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradeabilityStorage 
Looking in IcoToken (Slither line:1213)

Begin IcoToken.find_setter_in_contract (Slither line:3109)

Expression: implementation (Slither line:3112)
Checking function: constructor(string,string,uint8) returns() (Slither line:3117)
Checking function: set_devContract(address) returns() (Slither line:3117)
Visibility: public
Set_devContract(devContract,_devContract)
require(bool)(msg.sender == owner)
devContract = _devContract
is an Assignment Operation (Slither line:3206)
implementation
onlyOwner()
Checking function: slitherConstructorVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor() returns() (Slither line:3117)
Checking function: proxyOwner() returns(address) (Slither line:3117)
Visibility: public
upgradeabilityOwner()
_upgradeabilityOwner
Checking function: transferProxyOwnership(address) returns() (Slither line:3117)
Visibility: public
setUpgradeabilityOwner(newOwner)
_upgradeabilityOwner = newUpgradeabilityOwner
is an Assignment Operation (Slither line:3206)
implementation
onlyProxyOwner()
require(bool)(newOwner != address(0))
upgradeabilityOwner()
require(bool)(msg.sender == proxyOwner())
_upgradeabilityOwner
ProxyOwnershipTransferred(proxyOwner(),newOwner)
Checking function: upgradeTo(string,address) returns() (Slither line:3117)
Visibility: public
Upgraded(version,implementation)
require(bool)(_implementation != implementation)
_upgradeTo(version,implementation)
_version = version
is an Assignment Operation (Slither line:3206)
implementation
onlyProxyOwner()
upgradeabilityOwner()
require(bool)(msg.sender == proxyOwner())
_upgradeabilityOwner
_implementation = implementation
is an Assignment Operation (Slither line:3206)
implementation

End IcoToken.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: IcoToken (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
implementation
Checking function: version (Slither line:2978)
version returns string variable  (Slither line:2998)
RETURN node expression: _version (Slither line:3018)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End IcoToken.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: implementation
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
library call: SafeMath.add
library call: SafeMath.sub
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
impl_address_from_contract_call: CallExpression implementation()
Checking public function proxyOwner
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeToAndCall
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function version
Checking public function implementation
Checking public function implementation
Checking public function upgradeabilityOwner
Checking public function allowance
Checking public function transferFrom
Checking public function approve
Checking public function totalSupply
Checking public function balanceOf
Checking public function transfer
Checking public function transferFrom
Checking public function approve
Checking public function allowance
Checking public function increaseApproval
Checking public function decreaseApproval
Checking public function totalSupply
Checking public function transfer
Checking public function balanceOf
Checking public function renounceOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function set_devContract
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function IcoToken.decreaseApproval (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.upgradeTo (proxy_features line:893)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeTo writes implementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function IcoToken.constructor (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.version (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.balanceOf (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.upgradeabilityOwner (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.totalSupply (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.allowance (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.transferFrom (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.transferFrom (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.set_devContract (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.setUpgradeabilityOwner (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.upgradeToAndCall (proxy_features line:893)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeToAndCall writes implementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function IcoToken.implementation (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.totalSupply (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.constructor (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.constructor (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.balanceOf (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.increaseApproval (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.approve (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken._upgradeTo (proxy_features line:893)
functions_writing_to_variable: exp = require(bool)(_implementation != implementation) (proxy_features line:904)
functions_writing_to_variable: exp = _version = version (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _version = version (proxy_features line:907)
functions_writing_to_variable: exp = _implementation = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = implementation (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: exp = Upgraded(version,implementation) (proxy_features line:904)
functions_writing_to_variable: _upgradeTo writes implementation to _implementation (proxy_features line:924)
functions_writing_to_variable: checking function IcoToken.approve (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.proxyOwner (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.implementation (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.allowance (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.constructor (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.transferProxyOwnership (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.transfer (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.transfer (proxy_features line:893)
functions_writing_to_variable: checking function IcoToken.fallback (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation', 'implementation', 'implementation']
has_compatibility_checks: checking public function upgradeTo
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
has_compatibility_checks: checking public function upgradeToAndCall
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(address(this).call.value(msg.value)(data))
has_compatibility_checks: condition address(this).call.value(msg.value)(data)
has_compatibility_checks: skipping internal function _upgradeTo
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: constructor
Found public function: proxyOwner
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_implementation != implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _version = version
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) RETURN
(Expression) upgradeabilityOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner())
has_time_delay: (node.type) RETURN
(Expression) _upgradeabilityOwner
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = implementation
