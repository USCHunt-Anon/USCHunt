
Begin IRegistry.is_proxy (Slither line:1425)


End IRegistry.is_proxy (Slither line:1428)


Begin IRegistry.is_upgradeable_proxy (Slither line:1136)

Checking contract: IRegistry 

End IRegistry.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2792)
Expression called: require(bool)
Type of call: tuple() (Slither line:2807)
Args:
_impl != address(0)

End Proxy.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin Proxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Got abstract function, looking for overriding function (Slither line:2015)
Failure (Slither line:2023)
implementation returns a variable of type address   (Slither line:2183)
Return value is LocalVariable:  (Slither line:2256)
has no expression (Slither line:2316)

End Proxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End Proxy.find_delegate_variable_by_name (Slither line:1739)


Begin Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2673)


End Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2700)


End Proxy.find_delegatecall_in_asm (Slither line:1637)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityStorage.is_proxy (Slither line:1425)


End UpgradeabilityStorage.is_proxy (Slither line:1428)


Begin UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityStorage 

End UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin Upgradeable.is_proxy (Slither line:1425)


End Upgradeable.is_proxy (Slither line:1428)


Begin Upgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Upgradeable 

End Upgradeable.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin UpgradeabilityProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking registry (Slither line:1689)
Checking _implementation (Slither line:1689)
Checking owner (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in UpgradeabilityProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin UpgradeabilityProxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2031)
_implementation (Slither line:2038)
implementation returns a variable of type address   called _implementation (Slither line:2183)

End UpgradeabilityProxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End UpgradeabilityProxy.find_delegate_variable_by_name (Slither line:1739)


End UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1637)


End UpgradeabilityProxy.is_proxy (Slither line:1476)


Begin UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityProxy 
UpgradeabilityProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3109)

Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3315)


Could not find setter in UpgradeabilityStorage 
Looking in UpgradeabilityProxy (Slither line:1213)

Begin UpgradeabilityProxy.find_setter_in_contract (Slither line:3109)

Checking function: constructor(string) returns() (Slither line:3117)
Checking function: upgradeTo(string) returns() (Slither line:3117)
Visibility: public
_implementation = registry.getVersion(_version)
is an Assignment Operation (Slither line:3206)

End UpgradeabilityProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: UpgradeabilityProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2964)

_implementation is a Variable object
registry.getVersion(_version)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: _implementation (Slither line:3018)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: registry.getVersion(_version)
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
called: registry.getVersion
found MemberAccess: registry.getVersion
Identifier: registry
value is StateVariable: registry
Type: IRegistry
find_registry_address_source: registry.getVersion(_version)
MemberAccess: registry.getVersion
Identifier: registry
Checking public function renounceOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function renounceOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function transferOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function implementation
Checking public function implementation
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function UpgradeabilityProxy.upgradeTo (proxy_features line:893)
functions_writing_to_variable: exp = _implementation = registry.getVersion(_version) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = registry.getVersion(_version) (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = registry.getVersion(_version)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:904)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:893)
get_value_assigned: _implementation = registry.getVersion(_version)
functions_writing_to_variable: constructor writes TMP_33 to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function UpgradeabilityProxy.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.transferOwnership (proxy_features line:893)
has_compatibility_checks: dependencies: ['TMP_33', '', '_version', '_version', 'registry', 'versions', 'version']
functions_writing_to_variable: registry
functions_writing_to_variable: checking function UpgradeabilityProxy.upgradeTo (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityStorage.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:893)
functions_writing_to_variable: exp = registry = IRegistry(msg.sender) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: registry = IRegistry(msg.sender) (proxy_features line:907)
functions_writing_to_variable: Identifier: registry (proxy_features line:919)
get_value_assigned: registry = IRegistry(msg.sender)
functions_writing_to_variable: exp = upgradeTo(_version) (proxy_features line:904)
functions_writing_to_variable: exp = _implementation = registry.getVersion(_version) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = registry.getVersion(_version) (proxy_features line:907)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:904)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:904)
functions_writing_to_variable: checking function UpgradeabilityProxy.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: versions
functions_writing_to_variable: checking function Registry._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function Registry.addVersion (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.upgradeTo (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function Registry.constructor (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getVersion (proxy_features line:893)
functions_writing_to_variable: checking function Registry.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function Registry.createProxy (proxy_features line:893)
functions_writing_to_variable: checking function Registry.addVersion (proxy_features line:893)
functions_writing_to_variable: exp = require(bool)(versions[version] == 0x0) (proxy_features line:904)
functions_writing_to_variable: exp = versions[version] = implementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: versions[version] = implementation (proxy_features line:907)
functions_writing_to_variable: IndexAccess: versions[version] (proxy_features line:915)
functions_writing_to_variable: Identifier: versions (proxy_features line:919)
get_value_assigned: versions[version] = implementation
functions_writing_to_variable: exp = VersionAdded(version,implementation) (proxy_features line:904)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:904)
functions_writing_to_variable: addVersion writes implementation to versions (proxy_features line:924)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeabilityProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function Registry.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getVersion (proxy_features line:893)
has_compatibility_checks: checking public function constructor
require(bool)(msg.sender == owner)
has_compatibility_checks: condition msg.sender == owner
has_compatibility_checks: checking external function addVersion
require(bool)(versions[version] == 0x0)
has_compatibility_checks: condition versions[version] == 0x0
require(bool)(msg.sender == owner)
has_compatibility_checks: condition msg.sender == owner
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: constructor
Found public function: renounceOwnership
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = registry.getVersion(_version)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == owner)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()

Begin Registry.is_proxy (Slither line:1425)


End Registry.is_proxy (Slither line:1428)


Begin Registry.is_upgradeable_proxy (Slither line:1136)

Checking contract: Registry 

End Registry.is_upgradeable_proxy (Slither line:1407)

