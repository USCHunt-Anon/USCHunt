
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin console.is_proxy (Slither line:1425)


End console.is_proxy (Slither line:1428)


Begin console.is_upgradeable_proxy (Slither line:1136)

Checking contract: console 

End console.is_upgradeable_proxy (Slither line:1407)


Begin TrustFundSolver.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin TrustFundSolver.find_delegatecall_in_exp_node

Found Expression Node: _sendLogPayload(abi.encodeWithSignature(log(string),p0)) (Slither line:2792)
Expression called: _sendLogPayload
Type of call: tuple() (Slither line:2807)
Args:
abi.encodeWithSignature(log(string),p0)

End TrustFundSolver.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin TrustFundSolver.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let payloadStart := add(payload, 32) (Slither line:1576)
    let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0) (Slither line:1576)
} (Slither line:1576)

End TrustFundSolver.find_delegatecall_in_asm (Slither line:1637)


Begin TrustFundSolver.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let payloadStart := add(payload, 32) (Slither line:1576)
    let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0) (Slither line:1576)

Found call in inline asm (Slither line:1622)
Destination param is called 'consoleAddress'
Looking for corresponding Variable
Current function: _sendLogPayload

Begin TrustFundSolver.find_delegate_variable_from_name
Searching for consoleAddress (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking target (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking consoleAddress (Slither line:1703)
consoleAddress is a Local Variable in console._sendLogPayload (Slither line:1707)
Expression: CONSOLE_ADDRESS (Slither line:1719)
Identifier value: CONSOLE_ADDRESS (Slither line:1725)
CONSOLE_ADDRESS is a State Variable in contract console (Slither line:1730)

End TrustFundSolver.find_delegate_variable_by_name


End TrustFundSolver.find_delegatecall_in_asm (Slither line:1637)


End TrustFundSolver.is_proxy (Slither line:1476)


Begin TrustFundSolver.is_upgradeable_proxy (Slither line:1136)

Checking contract: TrustFundSolver 
Call destination CONSOLE_ADDRESS is constant (Slither line:1146)


End TrustFundSolver.is_upgradeable_proxy (Slither line:1153)


Begin I.is_proxy (Slither line:1425)


End I.is_proxy (Slither line:1428)


Begin I.is_upgradeable_proxy (Slither line:1136)

Checking contract: I 

End I.is_upgradeable_proxy (Slither line:1407)

