
Begin AddressUpgradeable.is_proxy (Slither line:1425)


End AddressUpgradeable.is_proxy (Slither line:1428)


Begin AddressUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: AddressUpgradeable 

End AddressUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin Initializable.is_proxy (Slither line:1425)


End Initializable.is_proxy (Slither line:1428)


Begin Initializable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Initializable 

End Initializable.is_upgradeable_proxy (Slither line:1407)


Begin ContextUpgradeable.is_proxy (Slither line:1425)


End ContextUpgradeable.is_proxy (Slither line:1428)


Begin ContextUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ContextUpgradeable 

End ContextUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin OwnableUpgradeable.is_proxy (Slither line:1425)


End OwnableUpgradeable.is_proxy (Slither line:1428)


Begin OwnableUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnableUpgradeable 

End OwnableUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin IBeacon.is_proxy (Slither line:1425)


End IBeacon.is_proxy (Slither line:1428)


Begin IBeacon.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBeacon 

End IBeacon.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeableBeacon.is_proxy (Slither line:1425)


End UpgradeableBeacon.is_proxy (Slither line:1428)


Begin UpgradeableBeacon.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeableBeacon 

End UpgradeableBeacon.is_upgradeable_proxy (Slither line:1407)


Begin IToken.is_proxy (Slither line:1425)


End IToken.is_proxy (Slither line:1428)


Begin IToken.is_upgradeable_proxy (Slither line:1136)

Checking contract: IToken 

End IToken.is_upgradeable_proxy (Slither line:1407)


Begin IERC165Upgradeable.is_proxy (Slither line:1425)


End IERC165Upgradeable.is_proxy (Slither line:1428)


Begin IERC165Upgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165Upgradeable 

End IERC165Upgradeable.is_upgradeable_proxy (Slither line:1407)


Begin IERC721Upgradeable.is_proxy (Slither line:1425)


End IERC721Upgradeable.is_proxy (Slither line:1428)


Begin IERC721Upgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Upgradeable 

End IERC721Upgradeable.is_upgradeable_proxy (Slither line:1407)


Begin IERC721ReceiverUpgradeable.is_proxy (Slither line:1425)


End IERC721ReceiverUpgradeable.is_proxy (Slither line:1428)


Begin IERC721ReceiverUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721ReceiverUpgradeable 

End IERC721ReceiverUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin IERC721MetadataUpgradeable.is_proxy (Slither line:1425)


End IERC721MetadataUpgradeable.is_proxy (Slither line:1428)


Begin IERC721MetadataUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721MetadataUpgradeable 

End IERC721MetadataUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin StringsUpgradeable.is_proxy (Slither line:1425)


End StringsUpgradeable.is_proxy (Slither line:1428)


Begin StringsUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: StringsUpgradeable 

End StringsUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin ERC165Upgradeable.is_proxy (Slither line:1425)


End ERC165Upgradeable.is_proxy (Slither line:1428)


Begin ERC165Upgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165Upgradeable 

End ERC165Upgradeable.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Upgradeable.is_proxy (Slither line:1425)


End ERC721Upgradeable.is_proxy (Slither line:1428)


Begin ERC721Upgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Upgradeable 

End ERC721Upgradeable.is_upgradeable_proxy (Slither line:1407)


Begin ERC165StorageUpgradeable.is_proxy (Slither line:1425)


End ERC165StorageUpgradeable.is_proxy (Slither line:1428)


Begin ERC165StorageUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165StorageUpgradeable 

End ERC165StorageUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin console.is_proxy (Slither line:1425)


End console.is_proxy (Slither line:1428)


Begin console.is_upgradeable_proxy (Slither line:1136)

Checking contract: console 

End console.is_upgradeable_proxy (Slither line:1407)


Begin Token.is_proxy (Slither line:1425)


End Token.is_proxy (Slither line:1428)


Begin Token.is_upgradeable_proxy (Slither line:1136)

Checking contract: Token 

End Token.is_upgradeable_proxy (Slither line:1407)


Begin IBeaconUpgradeable.is_proxy (Slither line:1425)


End IBeaconUpgradeable.is_proxy (Slither line:1428)


Begin IBeaconUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBeaconUpgradeable 

End IBeaconUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin IERC1822ProxiableUpgradeable.is_proxy (Slither line:1425)


End IERC1822ProxiableUpgradeable.is_proxy (Slither line:1428)


Begin IERC1822ProxiableUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC1822ProxiableUpgradeable 

End IERC1822ProxiableUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin StorageSlotUpgradeable.is_proxy (Slither line:1425)


End StorageSlotUpgradeable.is_proxy (Slither line:1428)


Begin StorageSlotUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: StorageSlotUpgradeable 

End StorageSlotUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin ERC1967UpgradeUpgradeable.is_proxy (Slither line:1425)


End ERC1967UpgradeUpgradeable.is_proxy (Slither line:1428)


Begin ERC1967UpgradeUpgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC1967UpgradeUpgradeable 

End ERC1967UpgradeUpgradeable.is_upgradeable_proxy (Slither line:1407)


Begin TokenProxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin TokenProxy.find_delegatecall_in_asm (Slither line:1541)


End TokenProxy.find_delegatecall_in_asm (Slither line:1637)


Begin TokenProxy.find_delegatecall_in_asm (Slither line:1541)


End TokenProxy.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin TokenProxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2792)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
returndatasize()()

End TokenProxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin TokenProxy.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_140571_178_0__delegate_asm_0 = result__delegate_asm_0 (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End TokenProxy.find_delegatecall_in_exp_node (Slither line:2848)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin TokenProxy.find_delegatecall_in_exp_node

Found Expression Node: r = slot (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End TokenProxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin TokenProxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End TokenProxy.find_delegatecall_in_exp_node (Slither line:2848)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin TokenProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: _delegate

Begin TokenProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking _initialized (Slither line:1689)
Checking _initializing (Slither line:1689)
Checking _ROLLBACK_SLOT (Slither line:1689)
Checking _IMPLEMENTATION_SLOT (Slither line:1689)
Checking _ADMIN_SLOT (Slither line:1689)
Checking _BEACON_SLOT (Slither line:1689)
Checking __gap (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _impl (Slither line:1800)
_impl is a Parameter in TokenProxy._delegate (Slither line:1805)
CallExpression: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:1819)
AssignmentOperation: result__delegate_asm_0 (Slither line:1811)
AssignmentOperation: slot (Slither line:1811)
CallExpression: revert(uint256,uint256)(0,returndatasize()()) (Slither line:1819)
CallExpression: _delegate(IBeaconUpgradeable(_getBeacon()).implementation()) (Slither line:1819)
Found where _delegate is called: _delegate(IBeaconUpgradeable(_getBeacon()).implementation()) (Slither line:1832)
The value passed to parameter #0 is IBeaconUpgradeable(_getBeacon()).implementation() (Slither line:1835)

Begin TokenProxy.find_delegate_from_call_exp

IBeaconUpgradeable(_getBeacon()).implementation() (Slither line:1993)
called = IBeaconUpgradeable(_getBeacon()).implementation (Slither line:2000)
Called member of IBeaconUpgradeable(_getBeacon()) (Slither line:2007)

Begin TokenProxy.find_delegate_from_member_access

Expression: IBeaconUpgradeable(_getBeacon()).implementation() (Slither line:2348)
IBeaconUpgradeable(_getBeacon()) (Slither line:2361)
implementation is a member of the contract type: IBeaconUpgradeable (Slither line:2406)
Which is an interface (Slither line:2410)
UpgradeableBeacon inherits IBeaconUpgradeable (Slither line:2417)
Looking for implementation in UpgradeableBeacon (Slither line:2513)
Found the function called implementation (Slither line:2517)
Returns a variable of type address (Slither line:2522)
Found the function called implementation (Slither line:2517)
Returns a variable of type address (Slither line:2522)
Found RETURN node: _implementation (Slither line:2534)
Returns an Identifier (Slither line:2537)
Found the return value from implementation
It's a state variable in UpgradeableBeacon called _implementation (Slither line:2598)

End TokenProxy.find_delegate_from_member_access (Slither line:2635)


End TokenProxy.find_delegate_from_call_exp (Slither line:2009)


End TokenProxy.find_delegate_variable_from_name (Slither line:1939)


End TokenProxy.find_delegatecall_in_asm (Slither line:1637)


End TokenProxy.is_proxy (Slither line:1476)


Begin TokenProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: TokenProxy 
TokenProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeableBeacon (Slither line:1204)


Begin UpgradeableBeacon.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address) returns() (Slither line:3117)
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
_implementation
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(Address.isContract(newImplementation),UpgradeableBeacon: implementation is not a contract)
account.code.length > 0
_owner
msg.sender
_setImplementation(newImplementation)
_implementation = newImplementation
is an Assignment Operation (Slither line:3206)

End UpgradeableBeacon.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: UpgradeableBeacon (Slither line:1264)
Looking for getter (Slither line:1273)


Implementation retrieved by function: implementation in contract: UpgradeableBeacon (Slither line:1285)

End TokenProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: newImplementation
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
library call: StorageSlotUpgradeable.getAddressSlot
library call: StorageSlotUpgradeable.getBooleanSlot
library call: AddressUpgradeable.isContract
library call: AddressUpgradeable.verifyCallResult
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression _delegate(IBeaconUpgradeable(_getBeacon()).implementation())
impl_address_from_contract_call: arg is IBeaconUpgradeable(_getBeacon()).implementation()
impl_address_from_contract_call: CallExpression IBeaconUpgradeable(_getBeacon()).implementation()
found MemberAccess calling getter in another contract: IBeaconUpgradeable(_getBeacon()).implementation()
called: IBeaconUpgradeable(_getBeacon()).implementation
found MemberAccess: IBeaconUpgradeable(_getBeacon()).implementation
TypeConversion: IBeaconUpgradeable(_getBeacon())
find_registry_address_source: IBeaconUpgradeable(_getBeacon()).implementation()
MemberAccess: IBeaconUpgradeable(_getBeacon()).implementation
TypeConversion: IBeaconUpgradeable(_getBeacon())
CallExpression: _getBeacon()
Identifier: _getBeacon
Checking public function initialize
Checking external function changeAdmin
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == _getAdmin(),TokenProxy: only admin)
Checking public function getImplOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == _getAdmin(),TokenProxy: only admin)
Checking external function fallback
Found 'msg.sender !=' in expression: msg.sender != _getAdmin()
Checking public function initialize
Checking external function changeAdmin
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == _getAdmin(),TokenProxy: only admin)
Checking public function getImplOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == _getAdmin(),TokenProxy: only admin)
Found public function: initialize
Checking external function fallback
Found 'msg.sender !=' in expression: msg.sender != _getAdmin()
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function TokenProxy._disableInitializers (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.implementation (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._setBeacon (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.initialize (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.upgradeTo (proxy_features line:893)
get_value_assigned: _implementation = newImplementation
functions_writing_to_variable: upgradeTo writes newImplementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function TokenProxy._upgradeToAndCall (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._upgradeBeaconToAndCall (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon._setImplementation (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(Address.isContract(newImplementation),UpgradeableBeacon: implementation is not a contract) (proxy_features line:904)
functions_writing_to_variable: exp = _implementation = newImplementation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: _implementation = newImplementation (proxy_features line:907)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:919)
get_value_assigned: _implementation = newImplementation
functions_writing_to_variable: _setImplementation writes newImplementation to _implementation (proxy_features line:924)
functions_writing_to_variable: checking function TokenProxy._setAdmin (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.__ERC1967Upgrade_init (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.getImplOwner (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._setInitializedVersion (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._upgradeToAndCallUUPS (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.__ERC1967Upgrade_init_unchained (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon._msgSender (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._functionDelegateCall (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._delegate (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.constructor (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._getImplementation (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._changeAdmin (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.owner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon._msgData (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._setImplementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.constructor (proxy_features line:893)
get_value_assigned: _implementation = newImplementation
functions_writing_to_variable: constructor writes newImplementation to _implementation (proxy_features line:1008)
functions_writing_to_variable: checking function TokenProxy._getBeacon (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._getAdmin (proxy_features line:893)
functions_writing_to_variable: checking function UpgradeableBeacon.implementation (proxy_features line:893)
functions_writing_to_variable: checking function TokenProxy._upgradeTo (proxy_features line:893)
has_compatibility_checks: dependencies: ['implementation_', 'newImplementation', 'newImplementation']
has_compatibility_checks: checking public function upgradeTo
require(bool,string)(Address.isContract(newImplementation),UpgradeableBeacon: implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: modifier calls: ['onlyOwner()']
check_condition_from_expression: condition account.code.length > 0
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
has_compatibility_checks: condition owner() == _msgSender()
has_compatibility_checks: skipping private function _setImplementation
has_compatibility_checks: checking public function constructor
require(bool,string)(Address.isContract(newImplementation),UpgradeableBeacon: implementation is not a contract)
has_compatibility_checks: condition Address.isContract(newImplementation)
check_condition_from_expression: condition account.code.length > 0
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result__delegate_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_impl,0,calldatasize()(),0,0)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(Address.isContract(newImplementation),UpgradeableBeacon: implementation is not a contract)
has_time_delay: (node.type) RETURN
(Expression) account.code.length > 0
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) RETURN
(Expression) msg.sender
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()

Begin TokenFactory.is_proxy (Slither line:1425)


End TokenFactory.is_proxy (Slither line:1428)


Begin TokenFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: TokenFactory 

End TokenFactory.is_upgradeable_proxy (Slither line:1407)

