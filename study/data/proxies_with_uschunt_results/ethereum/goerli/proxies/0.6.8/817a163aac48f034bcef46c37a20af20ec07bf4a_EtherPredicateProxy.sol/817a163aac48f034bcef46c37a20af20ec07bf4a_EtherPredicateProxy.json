{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/goerli/sorted/0.6.8/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol#65-163)",
        "elements": [],
        "description": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/goerli/sorted/0.6.8/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol#65-163) is an upgradeable proxy.\nIMPLEMENTATION_SLOT is declared in the proxy.\n uses Unstructured Storage\n uses non-standard slot: keccak256(bytes)(bridge.network.proxy.implementation)\nMissing compatibility check in UpgradableProxy.constructor(address)\nFound compatibility check in UpgradableProxy.updateImplementation(address)\nFound compatibility check in UpgradableProxy.updateAndCall(address,bytes)\n",
        "id": "e860c699a53958a782bd90af9c15244ec5c850fe99918459e532a5ae2884176c",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "UpgradableProxy.IMPLEMENTATION_SLOT",
          "impl_address_setter": "UpgradableProxy.updateImplementation(address)",
          "impl_address_getter": "UpgradableProxy.loadImplementation()",
          "impl_address_location": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/goerli/sorted/0.6.8/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol#65-163)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "bytes32 constant storage slot",
          "impl_address_slot": "keccak256(bytes)(bridge.network.proxy.implementation)",
          "unstructured_storage": true,
          "eip_1967": false,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "UpgradableProxy.constructor(address)": "missing",
              "UpgradableProxy.updateImplementation(address)": "require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)",
              "UpgradableProxy.updateAndCall(address,bytes)": "require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "proxyType()",
              "implementation()",
              "proxyType()",
              "implementation()",
              "proxyOwner()",
              "implementation()",
              "transferProxyOwnership(address)",
              "updateImplementation(address)",
              "updateAndCall(address,bytes)"
            ]
          }
        }
      },
      {
        "contract": "EtherPredicateProxy (../../smart-contract-sanctuary/ethereum/contracts/goerli/sorted/0.6.8/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol#170-176)",
        "elements": [],
        "description": "EtherPredicateProxy (../../smart-contract-sanctuary/ethereum/contracts/goerli/sorted/0.6.8/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol#170-176) is an upgradeable proxy.\nIMPLEMENTATION_SLOT was found in a different contract.\n uses Unstructured Storage\n uses non-standard slot: keccak256(bytes)(bridge.network.proxy.implementation)\nMissing compatibility check in EtherPredicateProxy.constructor(address)\nMissing compatibility check in UpgradableProxy.constructor(address)\nMissing compatibility check in UpgradableProxy.constructor(address)\nFound compatibility check in UpgradableProxy.updateImplementation(address)\nFound compatibility check in UpgradableProxy.updateImplementation(address)\nFound compatibility check in UpgradableProxy.updateAndCall(address,bytes)\nFound compatibility check in UpgradableProxy.updateAndCall(address,bytes)\nFound compatibility check in UpgradableProxy.updateImplementation(address)\nFound compatibility check in UpgradableProxy.updateAndCall(address,bytes)\n",
        "id": "d82ff7c02198e927e8486d0089218515b8a3f331eed376f325a05af61d0c807a",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "UpgradableProxy.IMPLEMENTATION_SLOT",
          "impl_address_setter": "UpgradableProxy.updateImplementation(address)",
          "impl_address_getter": "UpgradableProxy.loadImplementation()",
          "impl_address_location": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/goerli/sorted/0.6.8/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol/817a163aac48f034bcef46c37a20af20ec07bf4a_EtherPredicateProxy.sol#65-163)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "bytes32 constant storage slot",
          "impl_address_slot": "keccak256(bytes)(bridge.network.proxy.implementation)",
          "unstructured_storage": true,
          "eip_1967": false,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "EtherPredicateProxy.constructor(address)": "missing",
              "UpgradableProxy.constructor(address)": "missing",
              "UpgradableProxy.updateImplementation(address)": "require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)",
              "UpgradableProxy.updateAndCall(address,bytes)": "require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "proxyOwner()",
              "implementation()",
              "transferProxyOwnership(address)",
              "updateImplementation(address)",
              "updateAndCall(address,bytes)",
              "proxyType()",
              "implementation()",
              "proxyType()",
              "implementation()"
            ]
          }
        }
      }
    ]
  }
}