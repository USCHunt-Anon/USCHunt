
Begin IOwnable.is_proxy (Slither line:1425)


End IOwnable.is_proxy (Slither line:1428)


Begin IOwnable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IOwnable 

End IOwnable.is_upgradeable_proxy (Slither line:1407)


Begin IErc20.is_proxy (Slither line:1425)


End IErc20.is_proxy (Slither line:1428)


Begin IErc20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IErc20 

End IErc20.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin AStorage.is_proxy (Slither line:1425)


End AStorage.is_proxy (Slither line:1428)


Begin AStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: AStorage 

End AStorage.is_upgradeable_proxy (Slither line:1407)


Begin IBase.is_proxy (Slither line:1425)


End IBase.is_proxy (Slither line:1428)


Begin IBase.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBase 

End IBase.is_upgradeable_proxy (Slither line:1407)


Begin IProxy.is_proxy (Slither line:1425)


End IProxy.is_proxy (Slither line:1428)


Begin IProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: IProxy 

End IProxy.is_upgradeable_proxy (Slither line:1407)


Begin IVErc20.is_proxy (Slither line:1425)


End IVErc20.is_proxy (Slither line:1428)


Begin IVErc20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IVErc20 

End IVErc20.is_upgradeable_proxy (Slither line:1407)


Begin IVStore.is_proxy (Slither line:1425)


End IVStore.is_proxy (Slither line:1428)


Begin IVStore.is_upgradeable_proxy (Slither line:1136)

Checking contract: IVStore 

End IVStore.is_upgradeable_proxy (Slither line:1407)


Begin ABase.is_proxy (Slither line:1425)


End ABase.is_proxy (Slither line:1428)


Begin ABase.is_upgradeable_proxy (Slither line:1136)

Checking contract: ABase 

End ABase.is_upgradeable_proxy (Slither line:1407)


Begin AProxy.is_proxy (Slither line:1425)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin AProxy.find_delegatecall_in_exp_node

Found Expression Node: ptr_fallback_asm_0 = mload(uint256)(0x40) (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)
Expression called: mload(uint256)
Type of call: uint256 (Slither line:2807)
Args:
0x40

End AProxy.find_delegatecall_in_exp_node (Slither line:2848)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin AProxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
ptr_fallback_asm_0
returndatasize()()

End AProxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin AProxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
ptr_fallback_asm_0
returndatasize()()

End AProxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin AProxy.find_delegatecall_in_exp_node

Found Expression Node: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()()) (Slither line:2792)
Expression called: calldatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
ptr_fallback_asm_0
0
calldatasize()()

End AProxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin AProxy.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_implementationAddress,ptr_fallback_asm_0,calldatasize()(),0,0) (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2807)
Args:
gas()()
_implementationAddress
ptr_fallback_asm_0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2814)

Destination is _implementationAddress (Slither line:2818)
dest.value: _implementationAddress (Slither line:2821)
Expression: implementationAddress() (Slither line:2826)

Begin AProxy.find_delegate_from_call_exp

implementationAddress() (Slither line:1993)
called = implementationAddress (Slither line:2000)
Return node of function AProxy.implementationAddress(): RETURN vStore().getAddress(implementationAddressKey()) (Slither line:2031)
Encountered call expression at RETURN node: vStore().getAddress(implementationAddressKey()) (Slither line:2043)
Encountered member access expression: vStore().getAddress (Slither line:2047)

Begin AProxy.find_delegate_from_member_access

Expression: vStore().getAddress (Slither line:2348)
vStore() (Slither line:2361)
Member of call expression result: vStore (Slither line:2364)
Call to function vStore returns IVStore(addressStorage[VSTORE_PROXY_ADDRESS]) (Slither line:2375)
getAddress is a member of the contract type: IVStore (Slither line:2406)
Which is an interface (Slither line:2410)
Could not find a contract that inherits IVStore (Slither line:2431)

End AProxy.find_delegate_from_call_exp (Slither line:2094)


End AProxy.find_delegatecall_in_exp_node (Slither line:2848)


End AProxy.is_proxy (Slither line:1476)


Begin AProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: AProxy 
Local Variable: _implementationAddress (Slither line:1164)
AProxy is delegating to _implementationAddress
Looking for setter (Slither line:1200)


Begin AProxy.find_setter_in_contract (Slither line:3109)

Expression: implementationAddress() (Slither line:3112)
Checking function: constructor(address,address,address,bytes32,address) returns() (Slither line:3117)
Checking function: implementationAddressKey() returns(bytes32) (Slither line:3117)
Visibility: internal
Checking function: implementationAddress() returns(address) (Slither line:3117)
Visibility: public
bytes32Storage[IMPLEMENTATION_ADDRESS_KEY]
vStore().getAddress(implementationAddressKey())
IVStore(addressStorage[VSTORE_PROXY_ADDRESS])
Checking function: receive() returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: isEthereum() returns(bool) (Slither line:3117)
Visibility: internal
Checking function: isPolygon() returns(bool) (Slither line:3117)
Visibility: internal
Checking function: version() returns(string) (Slither line:3117)
Visibility: public
1.0
Checking function: institutionId() returns(string) (Slither line:3117)
Visibility: public
stringStorage[INSTITUTION_ID]
Checking function: vStore() returns(IVStore) (Slither line:3117)
Visibility: internal
Checking function: vAddress() returns(address) (Slither line:3117)
Visibility: internal
Checking function: userAddress() returns(address) (Slither line:3117)
Visibility: internal
Checking function: recoveryAddress() returns(address) (Slither line:3117)
Visibility: internal
Checking function: setVAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: public
result = result * 10 + (b - 48)
is an Assignment Operation (Slither line:3206)
implementationAddress()
addresses[i] = ecrecover(bytes32,uint8,bytes32,bytes32)(signatures.hash,csv,signatures.R[i],signatures.S[i])
is an Assignment Operation (Slither line:3206)
implementationAddress()
bytes32ToBoolStorage[NONCES][key(nonce)]
require(bool,string)(isOwnerAddress(addresses[i]),VBase::validateSignatures - invalid signature)
addressStorage[VADDRESS] = _address
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[VADDRESS]
end = result % 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
onlyUserAndRecovery(Signatures(nonce,keccak256(bytes)(abi.encodePacked(address(this),setVAddress,_address,nonce)),V,R,S))
require(bool,string)((signedBy[0] == userAddress() && signedBy[1] == recoveryAddress()) || (signedBy[0] == recoveryAddress() && signedBy[1] == userAddress()),VBase::onlyUserAndRecovery - must include user's and recovery's signatures)
require(bool,string)(addresses[0] != addresses[1],VBase::validateSignatures - signatures must be from different accounts)
flagThisNonce(signatures.nonce)
addresses
addressStorage[USER_ADDRESS]
bytes32ToBoolStorage[NONCES][key(nonce)] = true
is an Assignment Operation (Slither line:3206)
implementationAddress()
i ++
i ++
keccak256(bytes)(abi.encodePacked(_key))
(begin,end) = spliceTimestamps(signatures.nonce)
is an Assignment Operation (Slither line:3206)
implementationAddress()
_address == vAddress() || _address == userAddress() || _address == recoveryAddress()
addressStorage[RECOVERY_ADDRESS]
require(bool,string)((end >= block.timestamp) && (begin < block.timestamp),VBase::validateSignatures - invalid timestamps)
require(bool,string)(csv == 27 || csv == 28,VBase::validateSignatures - invalid signature version)
require(bool,string)(! isThisNonceUsed(signatures.nonce),VBase::validateSignatures - possible replay attack)
begin = result / 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
csv += 27
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(_bytes.length == 56,VBase::spliceTimestamps - invalid nonce length)
Checking function: setUserAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: public
result = result * 10 + (b - 48)
is an Assignment Operation (Slither line:3206)
implementationAddress()
addresses[i] = ecrecover(bytes32,uint8,bytes32,bytes32)(signatures.hash,csv,signatures.R[i],signatures.S[i])
is an Assignment Operation (Slither line:3206)
implementationAddress()
bytes32ToBoolStorage[NONCES][key(nonce)]
require(bool,string)(isOwnerAddress(addresses[i]),VBase::validateSignatures - invalid signature)
addressStorage[VADDRESS]
end = result % 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(addresses[0] != addresses[1],VBase::validateSignatures - signatures must be from different accounts)
flagThisNonce(signatures.nonce)
addresses
bytes32ToBoolStorage[NONCES][key(nonce)] = true
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[USER_ADDRESS]
i ++
i ++
addressStorage[USER_ADDRESS] = _address
is an Assignment Operation (Slither line:3206)
implementationAddress()
keccak256(bytes)(abi.encodePacked(_key))
(begin,end) = spliceTimestamps(signatures.nonce)
is an Assignment Operation (Slither line:3206)
implementationAddress()
onlyRecoveryAndVesto(Signatures(nonce,keccak256(bytes)(abi.encodePacked(address(this),setUserAddress,_address,nonce)),V,R,S))
_address == vAddress() || _address == userAddress() || _address == recoveryAddress()
addressStorage[RECOVERY_ADDRESS]
require(bool,string)((end >= block.timestamp) && (begin < block.timestamp),VBase::validateSignatures - invalid timestamps)
require(bool,string)(csv == 27 || csv == 28,VBase::validateSignatures - invalid signature version)
require(bool,string)(! isThisNonceUsed(signatures.nonce),VBase::validateSignatures - possible replay attack)
require(bool,string)((signedBy[0] == recoveryAddress() && signedBy[1] == vAddress()) || (signedBy[0] == vAddress() && signedBy[1] == recoveryAddress()),VBase::onlyRecoveryAndVesto - must include recovery's and Vesto's signatures)
begin = result / 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
csv += 27
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(_bytes.length == 56,VBase::spliceTimestamps - invalid nonce length)
Checking function: setRecoveryAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: public
result = result * 10 + (b - 48)
is an Assignment Operation (Slither line:3206)
implementationAddress()
addresses[i] = ecrecover(bytes32,uint8,bytes32,bytes32)(signatures.hash,csv,signatures.R[i],signatures.S[i])
is an Assignment Operation (Slither line:3206)
implementationAddress()
bytes32ToBoolStorage[NONCES][key(nonce)]
require(bool,string)(isOwnerAddress(addresses[i]),VBase::validateSignatures - invalid signature)
addressStorage[VADDRESS]
end = result % 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[RECOVERY_ADDRESS] = _address
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(addresses[0] != addresses[1],VBase::validateSignatures - signatures must be from different accounts)
onlyUserAndVesto(Signatures(nonce,keccak256(bytes)(abi.encodePacked(address(this),setRecoveryAddress,_address,nonce)),V,R,S))
flagThisNonce(signatures.nonce)
addresses
addressStorage[USER_ADDRESS]
bytes32ToBoolStorage[NONCES][key(nonce)] = true
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)((signedBy[0] == userAddress() && signedBy[1] == vAddress()) || (signedBy[0] == vAddress() && signedBy[1] == userAddress()),VBase::onlyUserAndVesto - must include user's and Vesto's signatures)
i ++
i ++
keccak256(bytes)(abi.encodePacked(_key))
(begin,end) = spliceTimestamps(signatures.nonce)
is an Assignment Operation (Slither line:3206)
implementationAddress()
_address == vAddress() || _address == userAddress() || _address == recoveryAddress()
require(bool,string)((end >= block.timestamp) && (begin < block.timestamp),VBase::validateSignatures - invalid timestamps)
addressStorage[RECOVERY_ADDRESS]
require(bool,string)(csv == 27 || csv == 28,VBase::validateSignatures - invalid signature version)
require(bool,string)(! isThisNonceUsed(signatures.nonce),VBase::validateSignatures - possible replay attack)
begin = result / 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
csv += 27
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(_bytes.length == 56,VBase::spliceTimestamps - invalid nonce length)
Checking function: isOwnerAddress(address) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: validateSignatures(AStorage.Signatures) returns(address[2]) (Slither line:3117)
Visibility: internal
Checking function: spliceTimestamps(string) returns(uint256,uint256) (Slither line:3117)
Visibility: private
Checking function: flagThisNonce(string) returns() (Slither line:3117)
Visibility: private
Checking function: isThisNonceUsed(string) returns(bool) (Slither line:3117)
Visibility: private
Checking function: encodePackedAddressArray(address[]) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: encodePackedByte32Array(bytes32[]) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: encodePackedUint32Array(uint256[]) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: convert(IErc20,IErc20,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: key(string) returns(bytes32) (Slither line:3117)
Visibility: internal
Checking function: name() returns(string) (Slither line:3117)
Visibility: external
Checking function: version() returns(string) (Slither line:3117)
Visibility: external
Checking function: institutionId() returns(string) (Slither line:3117)
Visibility: external
Checking function: setVAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: external
Checking function: setUserAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: external
Checking function: setRecoveryAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: external
Checking function: implementationAddress() returns(address) (Slither line:3117)
Visibility: external

End AProxy.find_setter_in_contract (Slither line:3315)


Could not find implementation setter in AProxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin AProxy.find_getter_in_contract (Slither line:2964)

_implementationAddress is a Variable object
implementationAddress()
Checking function: isEthereum (Slither line:2978)
isEthereum returns bool variable  (Slither line:2998)
RETURN node expression: (vStore().chainId() == ETHEREUM_MAINNET || vStore().chainId() == ETHEREUM_KOVAN || vStore().chainId() == ETHEREUM_GOERLI) (Slither line:3018)
Checking function: isPolygon (Slither line:2978)
isPolygon returns bool variable  (Slither line:2998)
RETURN node expression: (vStore().chainId() == POLYGON_MUMBAI || vStore().chainId() == POLYGON_MAINNET) (Slither line:3018)
Checking function: version (Slither line:2978)
version returns string variable  (Slither line:2998)
RETURN node expression: 1.0 (Slither line:3018)
Checking function: institutionId (Slither line:2978)
institutionId returns string variable  (Slither line:2998)
RETURN node expression: stringStorage[INSTITUTION_ID] (Slither line:3018)
Checking function: vStore (Slither line:2978)
vStore returns IVStore variable  (Slither line:2998)
Checking function: vAddress (Slither line:2978)
vAddress returns address variable  (Slither line:2998)
RETURN node expression: addressStorage[VADDRESS] (Slither line:3018)
Checking function: userAddress (Slither line:2978)
userAddress returns address variable  (Slither line:2998)
RETURN node expression: addressStorage[USER_ADDRESS] (Slither line:3018)
Checking function: recoveryAddress (Slither line:2978)
recoveryAddress returns address variable  (Slither line:2998)
RETURN node expression: addressStorage[RECOVERY_ADDRESS] (Slither line:3018)
Checking function: setVAddress (Slither line:2978)
Checking function: setUserAddress (Slither line:2978)
Checking function: setRecoveryAddress (Slither line:2978)
Checking function: isOwnerAddress (Slither line:2978)
isOwnerAddress returns bool variable  (Slither line:2998)
RETURN node expression: _address == vAddress() || _address == userAddress() || _address == recoveryAddress() (Slither line:3018)
Checking function: validateSignatures (Slither line:2978)
validateSignatures returns address[2] variable called signedBy (Slither line:2998)
RETURN node expression: addresses (Slither line:3018)
Checking function: spliceTimestamps (Slither line:2978)
spliceTimestamps returns uint256 variable called begin (Slither line:2998)
spliceTimestamps returns uint256 variable called end (Slither line:2998)
Checking function: flagThisNonce (Slither line:2978)
Checking function: isThisNonceUsed (Slither line:2978)
isThisNonceUsed returns bool variable  (Slither line:2998)
RETURN node expression: bytes32ToBoolStorage[NONCES][key(nonce)] (Slither line:3018)
Checking function: encodePackedAddressArray (Slither line:2978)
encodePackedAddressArray returns bytes variable  (Slither line:2998)
RETURN node expression: data (Slither line:3018)
Checking function: encodePackedByte32Array (Slither line:2978)
encodePackedByte32Array returns bytes variable  (Slither line:2998)
RETURN node expression: data (Slither line:3018)
Checking function: encodePackedUint32Array (Slither line:2978)
encodePackedUint32Array returns bytes variable  (Slither line:2998)
RETURN node expression: data (Slither line:3018)
Checking function: convert (Slither line:2978)
convert returns uint256 variable  (Slither line:2998)
RETURN node expression: convertedTokens (Slither line:3018)
Checking function: key (Slither line:2978)
key returns bytes32 variable  (Slither line:2998)
RETURN node expression: keccak256(bytes)(abi.encodePacked(_key)) (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: implementationAddressKey (Slither line:2978)
implementationAddressKey returns bytes32 variable  (Slither line:2998)
RETURN node expression: bytes32Storage[IMPLEMENTATION_ADDRESS_KEY] (Slither line:3018)
Checking function: implementationAddress (Slither line:2978)

implementationAddress appears to be the implementation getter (Slither line:2983)


End AProxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementationAddress in contract: AProxy (Slither line:1285)

Begin AProxy.getter_return_is_non_constant (Slither line:2873)

Found getter function but not setter
Checking if getter calls any other function
ENTRY_POINT: None (Slither line:2878)
RETURN: bytes32Storage[IMPLEMENTATION_ADDRESS_KEY] (Slither line:2878)
ENTRY_POINT: None (Slither line:2878)
RETURN: vStore().getAddress(implementationAddressKey()) (Slither line:2878)

End AProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: AProxy
_implementationAddress is dependent on addressStorage
_implementationAddress is dependent on bytes32Storage
_implementationAddress is dependent on VERC20_ADDRESS
Expression for _implementationAddress: implementationAddress()
Called: implementationAddress
impl_address_from_contract_call: implementationAddress()
called: implementationAddress
implementationAddress returns vStore().getAddress(implementationAddressKey())
called: vStore().getAddress
found MemberAccess: vStore().getAddress
TypeConversion: IVStore(addressStorage[VSTORE_PROXY_ADDRESS])
find_registry_address_source: vStore().getAddress(implementationAddressKey())
MemberAccess: vStore().getAddress
CallExpression: vStore()
Identifier: vStore
Checking public function version
Checking public function institutionId
Checking public function setVAddress
Checking public function setUserAddress
Checking public function setRecoveryAddress
Checking external function name
Checking external function version
Checking external function institutionId
Checking external function setVAddress
Checking external function setUserAddress
Checking external function setRecoveryAddress
Checking external function implementationAddress
Checking public function implementationAddress
Checking external function receive
Checking external function fallback
functions_writing_to_variable: _implementationAddress
functions_writing_to_variable: checking function AProxy.encodePackedUint32Array (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.institutionId (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.isThisNonceUsed (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.spliceTimestamps (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.userAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.version (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.setVAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.encodePackedAddressArray (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.recoveryAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.convert (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.institutionId (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.name (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.implementationAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.setRecoveryAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.setUserAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.implementationAddressKey (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.flagThisNonce (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.setVAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.isEthereum (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.encodePackedByte32Array (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.vStore (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.implementationAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.key (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.version (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.validateSignatures (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.isOwnerAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.receive (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.setRecoveryAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.setUserAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.vAddress (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function AProxy.isPolygon (proxy_features line:893)
has_compatibility_checks: dependencies: ['IMPLEMENTATION_ADDRESS_KEY', '', '', 'TMP_418', 'TMP_422', 'TMP_420', 'TMP_419', 'REF_146', 'TMP_330', 'vAddress', 'REF_201', 'userAddress', 'vAddress', 'userAddress', 'recoveryAddress', 'recoveryAddress', 'VERC20_ADDRESS', '_implementationAddressKey', 'vStoreProxyAddress', 'addressStorage', '_address', 'vStoreProxyAddress', '_address', 'bytes32Storage', '_address', '']
functions_writing_to_variable: IMPLEMENTATION_ADDRESS_KEY
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = VSTORE_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VSTORE_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VSTORE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VSTORE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VFINANCE_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VFINANCE_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VFINANCE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VFINANCE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VERC20_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VERC20_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VERC20_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VERC20_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = VDISTRIBUTION_ADDRESS = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VDISTRIBUTION_ADDRESS = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VDISTRIBUTION_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VDISTRIBUTION_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = VWALLET_ADDRESS = keccak256(bytes)(abi.encodePacked(VWALLET_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VWALLET_ADDRESS = keccak256(bytes)(abi.encodePacked(VWALLET_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VWALLET_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VWALLET_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VWALLET_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VWALLET_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_ADDRESS_KEY (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY))
functions_writing_to_variable: exp = VADDRESS = keccak256(bytes)(abi.encodePacked(VADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VADDRESS = keccak256(bytes)(abi.encodePacked(VADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = USER_ADDRESS = keccak256(bytes)(abi.encodePacked(USER_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: USER_ADDRESS = keccak256(bytes)(abi.encodePacked(USER_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RECOVERY_ADDRESS = keccak256(bytes)(abi.encodePacked(RECOVERY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RECOVERY_ADDRESS = keccak256(bytes)(abi.encodePacked(RECOVERY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = INSTITUTION_ID = keccak256(bytes)(abi.encodePacked(INSTITUTION_ID)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: INSTITUTION_ID = keccak256(bytes)(abi.encodePacked(INSTITUTION_ID)) (proxy_features line:907)
functions_writing_to_variable: exp = WITHDRAWALS = keccak256(bytes)(abi.encodePacked(WITHDRAWALS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: WITHDRAWALS = keccak256(bytes)(abi.encodePacked(WITHDRAWALS)) (proxy_features line:907)
functions_writing_to_variable: exp = NAME = keccak256(bytes)(abi.encodePacked(NAME)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: NAME = keccak256(bytes)(abi.encodePacked(NAME)) (proxy_features line:907)
functions_writing_to_variable: exp = SYMBOL = keccak256(bytes)(abi.encodePacked(SYMBOL)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: SYMBOL = keccak256(bytes)(abi.encodePacked(SYMBOL)) (proxy_features line:907)
functions_writing_to_variable: exp = SUPPLY = keccak256(bytes)(abi.encodePacked(SUPPLY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: SUPPLY = keccak256(bytes)(abi.encodePacked(SUPPLY)) (proxy_features line:907)
functions_writing_to_variable: exp = BALANCES = keccak256(bytes)(abi.encodePacked(BALANCES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: BALANCES = keccak256(bytes)(abi.encodePacked(BALANCES)) (proxy_features line:907)
functions_writing_to_variable: exp = UNDERLYING = keccak256(bytes)(abi.encodePacked(UNDERLYING)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UNDERLYING = keccak256(bytes)(abi.encodePacked(UNDERLYING)) (proxy_features line:907)
functions_writing_to_variable: exp = ALLOWANCES = keccak256(bytes)(abi.encodePacked(ALLOWANCES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ALLOWANCES = keccak256(bytes)(abi.encodePacked(ALLOWANCES)) (proxy_features line:907)
functions_writing_to_variable: exp = NONCES = keccak256(bytes)(abi.encodePacked(abi.encodePacked(NONCES))) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: NONCES = keccak256(bytes)(abi.encodePacked(abi.encodePacked(NONCES))) (proxy_features line:907)
functions_writing_to_variable: exp = UNDERLYING_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(UNDERLYING_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UNDERLYING_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(UNDERLYING_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = REDEEM_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(REDEEM_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: REDEEM_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(REDEEM_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYUSDC_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYUSDC_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYUSDC_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYUSDC_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYDAI_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYDAI_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYDAI_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYDAI_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYETH_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYETH_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYETH_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYETH_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = USDC_ADDRESS = keccak256(bytes)(abi.encodePacked(USDC_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: USDC_ADDRESS = keccak256(bytes)(abi.encodePacked(USDC_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = DAI_ADDRESS = keccak256(bytes)(abi.encodePacked(DAI_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: DAI_ADDRESS = keccak256(bytes)(abi.encodePacked(DAI_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = CHAIN_ID = keccak256(bytes)(abi.encodePacked(CHAIN_ID)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: CHAIN_ID = keccak256(bytes)(abi.encodePacked(CHAIN_ID)) (proxy_features line:907)
functions_writing_to_variable: exp = DAILY_LIMIT = keccak256(bytes)(abi.encodePacked(DAILY_LIMIT)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: DAILY_LIMIT = keccak256(bytes)(abi.encodePacked(DAILY_LIMIT)) (proxy_features line:907)
functions_writing_to_variable: exp = ERC20_PREDICATE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ERC20_PREDICATE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ERC20_PREDICATE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ERC20_PREDICATE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = ROOT_CHAIN_MANAGER_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ROOT_CHAIN_MANAGER_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ROOT_CHAIN_MANAGER_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ROOT_CHAIN_MANAGER_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: VERC20_ADDRESS
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = VSTORE_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VSTORE_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VSTORE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VSTORE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VFINANCE_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VFINANCE_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VFINANCE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VFINANCE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: Identifier: VERC20_ADDRESS (proxy_features line:919)
get_value_assigned: VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS))
functions_writing_to_variable: exp = VERC20_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VERC20_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VERC20_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VERC20_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = VDISTRIBUTION_ADDRESS = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VDISTRIBUTION_ADDRESS = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VDISTRIBUTION_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VDISTRIBUTION_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = VWALLET_ADDRESS = keccak256(bytes)(abi.encodePacked(VWALLET_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VWALLET_ADDRESS = keccak256(bytes)(abi.encodePacked(VWALLET_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VWALLET_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VWALLET_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VWALLET_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VWALLET_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = VADDRESS = keccak256(bytes)(abi.encodePacked(VADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VADDRESS = keccak256(bytes)(abi.encodePacked(VADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = USER_ADDRESS = keccak256(bytes)(abi.encodePacked(USER_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: USER_ADDRESS = keccak256(bytes)(abi.encodePacked(USER_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RECOVERY_ADDRESS = keccak256(bytes)(abi.encodePacked(RECOVERY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RECOVERY_ADDRESS = keccak256(bytes)(abi.encodePacked(RECOVERY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = INSTITUTION_ID = keccak256(bytes)(abi.encodePacked(INSTITUTION_ID)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: INSTITUTION_ID = keccak256(bytes)(abi.encodePacked(INSTITUTION_ID)) (proxy_features line:907)
functions_writing_to_variable: exp = WITHDRAWALS = keccak256(bytes)(abi.encodePacked(WITHDRAWALS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: WITHDRAWALS = keccak256(bytes)(abi.encodePacked(WITHDRAWALS)) (proxy_features line:907)
functions_writing_to_variable: exp = NAME = keccak256(bytes)(abi.encodePacked(NAME)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: NAME = keccak256(bytes)(abi.encodePacked(NAME)) (proxy_features line:907)
functions_writing_to_variable: exp = SYMBOL = keccak256(bytes)(abi.encodePacked(SYMBOL)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: SYMBOL = keccak256(bytes)(abi.encodePacked(SYMBOL)) (proxy_features line:907)
functions_writing_to_variable: exp = SUPPLY = keccak256(bytes)(abi.encodePacked(SUPPLY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: SUPPLY = keccak256(bytes)(abi.encodePacked(SUPPLY)) (proxy_features line:907)
functions_writing_to_variable: exp = BALANCES = keccak256(bytes)(abi.encodePacked(BALANCES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: BALANCES = keccak256(bytes)(abi.encodePacked(BALANCES)) (proxy_features line:907)
functions_writing_to_variable: exp = UNDERLYING = keccak256(bytes)(abi.encodePacked(UNDERLYING)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UNDERLYING = keccak256(bytes)(abi.encodePacked(UNDERLYING)) (proxy_features line:907)
functions_writing_to_variable: exp = ALLOWANCES = keccak256(bytes)(abi.encodePacked(ALLOWANCES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ALLOWANCES = keccak256(bytes)(abi.encodePacked(ALLOWANCES)) (proxy_features line:907)
functions_writing_to_variable: exp = NONCES = keccak256(bytes)(abi.encodePacked(abi.encodePacked(NONCES))) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: NONCES = keccak256(bytes)(abi.encodePacked(abi.encodePacked(NONCES))) (proxy_features line:907)
functions_writing_to_variable: exp = UNDERLYING_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(UNDERLYING_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UNDERLYING_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(UNDERLYING_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = REDEEM_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(REDEEM_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: REDEEM_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(REDEEM_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYUSDC_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYUSDC_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYUSDC_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYUSDC_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYDAI_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYDAI_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYDAI_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYDAI_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYETH_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYETH_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYETH_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYETH_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = USDC_ADDRESS = keccak256(bytes)(abi.encodePacked(USDC_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: USDC_ADDRESS = keccak256(bytes)(abi.encodePacked(USDC_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = DAI_ADDRESS = keccak256(bytes)(abi.encodePacked(DAI_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: DAI_ADDRESS = keccak256(bytes)(abi.encodePacked(DAI_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = CHAIN_ID = keccak256(bytes)(abi.encodePacked(CHAIN_ID)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: CHAIN_ID = keccak256(bytes)(abi.encodePacked(CHAIN_ID)) (proxy_features line:907)
functions_writing_to_variable: exp = DAILY_LIMIT = keccak256(bytes)(abi.encodePacked(DAILY_LIMIT)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: DAILY_LIMIT = keccak256(bytes)(abi.encodePacked(DAILY_LIMIT)) (proxy_features line:907)
functions_writing_to_variable: exp = ERC20_PREDICATE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ERC20_PREDICATE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ERC20_PREDICATE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ERC20_PREDICATE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = ROOT_CHAIN_MANAGER_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ROOT_CHAIN_MANAGER_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ROOT_CHAIN_MANAGER_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ROOT_CHAIN_MANAGER_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: addressStorage
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: bytes32Storage
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _implementationAddress = implementationAddress()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ptr_fallback_asm_0 = mload(uint256)(0x40)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(_implementationAddress != address(0),VProxy::fallback - invalid implementation address)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_implementationAddress,ptr_fallback_asm_0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: version

Begin VErc20Proxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin VErc20Proxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
ptr_fallback_asm_0
returndatasize()()

End VErc20Proxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin VErc20Proxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(ptr_fallback_asm_0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
ptr_fallback_asm_0
returndatasize()()

End VErc20Proxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin VErc20Proxy.find_delegatecall_in_exp_node

Found Expression Node: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()()) (Slither line:2792)
Expression called: calldatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
ptr_fallback_asm_0
0
calldatasize()()

End VErc20Proxy.find_delegatecall_in_exp_node (Slither line:2848)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin VErc20Proxy.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_implementationAddress,ptr_fallback_asm_0,calldatasize()(),0,0) (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2807)
Args:
gas()()
_implementationAddress
ptr_fallback_asm_0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2814)

Destination is _implementationAddress (Slither line:2818)
dest.value: _implementationAddress (Slither line:2821)
Expression: implementationAddress() (Slither line:2826)

Begin VErc20Proxy.find_delegate_from_call_exp

implementationAddress() (Slither line:1993)
called = implementationAddress (Slither line:2000)
Return node of function AProxy.implementationAddress(): RETURN vStore().getAddress(implementationAddressKey()) (Slither line:2031)
Encountered call expression at RETURN node: vStore().getAddress(implementationAddressKey()) (Slither line:2043)
Encountered member access expression: vStore().getAddress (Slither line:2047)

Begin VErc20Proxy.find_delegate_from_member_access

Expression: vStore().getAddress (Slither line:2348)
vStore() (Slither line:2361)
Member of call expression result: vStore (Slither line:2364)
Call to function vStore returns IVStore(addressStorage[VSTORE_PROXY_ADDRESS]) (Slither line:2375)
getAddress is a member of the contract type: IVStore (Slither line:2406)
Which is an interface (Slither line:2410)
Could not find a contract that inherits IVStore (Slither line:2431)

End VErc20Proxy.find_delegate_from_call_exp (Slither line:2094)


End VErc20Proxy.find_delegatecall_in_exp_node (Slither line:2848)


End VErc20Proxy.is_proxy (Slither line:1476)


Begin VErc20Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: VErc20Proxy 
Local Variable: _implementationAddress (Slither line:1164)
VErc20Proxy is delegating to _implementationAddress
Looking for setter (Slither line:1200)


Begin VErc20Proxy.find_setter_in_contract (Slither line:3109)

Expression: implementationAddress() (Slither line:3112)
Checking function: constructor(address,address,address,address,string,string,string,string,string) returns() (Slither line:3117)
Checking function: name() returns(string) (Slither line:3117)
Visibility: public
stringStorage[NAME]
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal
Checking function: constructor(address,address,address,bytes32,address) returns() (Slither line:3117)
Checking function: implementationAddressKey() returns(bytes32) (Slither line:3117)
Visibility: internal
Checking function: implementationAddress() returns(address) (Slither line:3117)
Visibility: public
bytes32Storage[IMPLEMENTATION_ADDRESS_KEY]
vStore().getAddress(implementationAddressKey())
IVStore(addressStorage[VSTORE_PROXY_ADDRESS])
Checking function: receive() returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: isEthereum() returns(bool) (Slither line:3117)
Visibility: internal
Checking function: isPolygon() returns(bool) (Slither line:3117)
Visibility: internal
Checking function: version() returns(string) (Slither line:3117)
Visibility: public
1.0
Checking function: institutionId() returns(string) (Slither line:3117)
Visibility: public
stringStorage[INSTITUTION_ID]
Checking function: vStore() returns(IVStore) (Slither line:3117)
Visibility: internal
Checking function: vAddress() returns(address) (Slither line:3117)
Visibility: internal
Checking function: userAddress() returns(address) (Slither line:3117)
Visibility: internal
Checking function: recoveryAddress() returns(address) (Slither line:3117)
Visibility: internal
Checking function: setVAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: public
require(bool,string)(addresses[0] != addresses[1],VBase::validateSignatures - signatures must be from different accounts)
flagThisNonce(signatures.nonce)
addresses
addressStorage[USER_ADDRESS]
bytes32ToBoolStorage[NONCES][key(nonce)] = true
is an Assignment Operation (Slither line:3206)
implementationAddress()
i ++
i ++
(begin,end) = spliceTimestamps(signatures.nonce)
is an Assignment Operation (Slither line:3206)
implementationAddress()
keccak256(bytes)(abi.encodePacked(_key))
require(bool,string)((signedBy[0] == userAddress() && signedBy[1] == recoveryAddress()) || (signedBy[0] == recoveryAddress() && signedBy[1] == userAddress()),VBase::onlyUserAndRecovery - must include user's and recovery's signatures)
addressStorage[RECOVERY_ADDRESS]
_address == vAddress() || _address == userAddress() || _address == recoveryAddress()
require(bool,string)((end >= block.timestamp) && (begin < block.timestamp),VBase::validateSignatures - invalid timestamps)
require(bool,string)(csv == 27 || csv == 28,VBase::validateSignatures - invalid signature version)
require(bool,string)(! isThisNonceUsed(signatures.nonce),VBase::validateSignatures - possible replay attack)
begin = result / 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
csv += 27
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(_bytes.length == 56,VBase::spliceTimestamps - invalid nonce length)
result = result * 10 + (b - 48)
is an Assignment Operation (Slither line:3206)
implementationAddress()
bytes32ToBoolStorage[NONCES][key(nonce)]
addresses[i] = ecrecover(bytes32,uint8,bytes32,bytes32)(signatures.hash,csv,signatures.R[i],signatures.S[i])
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[VADDRESS] = _address
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[VADDRESS]
require(bool,string)(isOwnerAddress(addresses[i]),VBase::validateSignatures - invalid signature)
end = result % 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
onlyUserAndRecovery(Signatures(nonce,keccak256(bytes)(abi.encodePacked(address(this),setVAddress,_address,nonce)),V,R,S))
Checking function: setUserAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: public
require(bool,string)(addresses[0] != addresses[1],VBase::validateSignatures - signatures must be from different accounts)
flagThisNonce(signatures.nonce)
addresses
require(bool,string)((signedBy[0] == recoveryAddress() && signedBy[1] == vAddress()) || (signedBy[0] == vAddress() && signedBy[1] == recoveryAddress()),VBase::onlyRecoveryAndVesto - must include recovery's and Vesto's signatures)
addressStorage[USER_ADDRESS]
bytes32ToBoolStorage[NONCES][key(nonce)] = true
is an Assignment Operation (Slither line:3206)
implementationAddress()
i ++
i ++
addressStorage[USER_ADDRESS] = _address
is an Assignment Operation (Slither line:3206)
implementationAddress()
onlyRecoveryAndVesto(Signatures(nonce,keccak256(bytes)(abi.encodePacked(address(this),setUserAddress,_address,nonce)),V,R,S))
(begin,end) = spliceTimestamps(signatures.nonce)
is an Assignment Operation (Slither line:3206)
implementationAddress()
keccak256(bytes)(abi.encodePacked(_key))
_address == vAddress() || _address == userAddress() || _address == recoveryAddress()
addressStorage[RECOVERY_ADDRESS]
require(bool,string)((end >= block.timestamp) && (begin < block.timestamp),VBase::validateSignatures - invalid timestamps)
require(bool,string)(csv == 27 || csv == 28,VBase::validateSignatures - invalid signature version)
require(bool,string)(! isThisNonceUsed(signatures.nonce),VBase::validateSignatures - possible replay attack)
begin = result / 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
csv += 27
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(_bytes.length == 56,VBase::spliceTimestamps - invalid nonce length)
result = result * 10 + (b - 48)
is an Assignment Operation (Slither line:3206)
implementationAddress()
bytes32ToBoolStorage[NONCES][key(nonce)]
addresses[i] = ecrecover(bytes32,uint8,bytes32,bytes32)(signatures.hash,csv,signatures.R[i],signatures.S[i])
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[VADDRESS]
require(bool,string)(isOwnerAddress(addresses[i]),VBase::validateSignatures - invalid signature)
end = result % 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
Checking function: setRecoveryAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: public
addressStorage[RECOVERY_ADDRESS] = _address
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(addresses[0] != addresses[1],VBase::validateSignatures - signatures must be from different accounts)
onlyUserAndVesto(Signatures(nonce,keccak256(bytes)(abi.encodePacked(address(this),setRecoveryAddress,_address,nonce)),V,R,S))
flagThisNonce(signatures.nonce)
addresses
addressStorage[USER_ADDRESS]
bytes32ToBoolStorage[NONCES][key(nonce)] = true
is an Assignment Operation (Slither line:3206)
implementationAddress()
i ++
i ++
(begin,end) = spliceTimestamps(signatures.nonce)
is an Assignment Operation (Slither line:3206)
implementationAddress()
keccak256(bytes)(abi.encodePacked(_key))
_address == vAddress() || _address == userAddress() || _address == recoveryAddress()
addressStorage[RECOVERY_ADDRESS]
require(bool,string)((end >= block.timestamp) && (begin < block.timestamp),VBase::validateSignatures - invalid timestamps)
require(bool,string)(csv == 27 || csv == 28,VBase::validateSignatures - invalid signature version)
require(bool,string)(! isThisNonceUsed(signatures.nonce),VBase::validateSignatures - possible replay attack)
begin = result / 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
csv += 27
is an Assignment Operation (Slither line:3206)
implementationAddress()
require(bool,string)(_bytes.length == 56,VBase::spliceTimestamps - invalid nonce length)
require(bool,string)((signedBy[0] == userAddress() && signedBy[1] == vAddress()) || (signedBy[0] == vAddress() && signedBy[1] == userAddress()),VBase::onlyUserAndVesto - must include user's and Vesto's signatures)
result = result * 10 + (b - 48)
is an Assignment Operation (Slither line:3206)
implementationAddress()
bytes32ToBoolStorage[NONCES][key(nonce)]
addresses[i] = ecrecover(bytes32,uint8,bytes32,bytes32)(signatures.hash,csv,signatures.R[i],signatures.S[i])
is an Assignment Operation (Slither line:3206)
implementationAddress()
addressStorage[VADDRESS]
require(bool,string)(isOwnerAddress(addresses[i]),VBase::validateSignatures - invalid signature)
end = result % 1e10
is an Assignment Operation (Slither line:3206)
implementationAddress()
Checking function: isOwnerAddress(address) returns(bool) (Slither line:3117)
Visibility: internal
Checking function: validateSignatures(AStorage.Signatures) returns(address[2]) (Slither line:3117)
Visibility: internal
Checking function: spliceTimestamps(string) returns(uint256,uint256) (Slither line:3117)
Visibility: private
Checking function: flagThisNonce(string) returns() (Slither line:3117)
Visibility: private
Checking function: isThisNonceUsed(string) returns(bool) (Slither line:3117)
Visibility: private
Checking function: encodePackedAddressArray(address[]) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: encodePackedByte32Array(bytes32[]) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: encodePackedUint32Array(uint256[]) returns(bytes) (Slither line:3117)
Visibility: internal
Checking function: convert(IErc20,IErc20,uint256,uint256) returns(uint256) (Slither line:3117)
Visibility: internal
Checking function: key(string) returns(bytes32) (Slither line:3117)
Visibility: internal
Checking function: name() returns(string) (Slither line:3117)
Visibility: external
Checking function: version() returns(string) (Slither line:3117)
Visibility: external
Checking function: institutionId() returns(string) (Slither line:3117)
Visibility: external
Checking function: setVAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: external
Checking function: setUserAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: external
Checking function: setRecoveryAddress(address,string,uint8[2],bytes32[2],bytes32[2]) returns() (Slither line:3117)
Visibility: external
Checking function: implementationAddress() returns(address) (Slither line:3117)
Visibility: external

End VErc20Proxy.find_setter_in_contract (Slither line:3315)


Could not find implementation setter in VErc20Proxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin VErc20Proxy.find_getter_in_contract (Slither line:2964)

_implementationAddress is a Variable object
implementationAddress()
Checking function: constructor (Slither line:2978)
Checking function: implementationAddressKey (Slither line:2978)
implementationAddressKey returns bytes32 variable  (Slither line:2998)
RETURN node expression: bytes32Storage[IMPLEMENTATION_ADDRESS_KEY] (Slither line:3018)
Checking function: implementationAddress (Slither line:2978)

implementationAddress appears to be the implementation getter (Slither line:2983)


End VErc20Proxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementationAddress in contract: VErc20Proxy (Slither line:1285)

Begin VErc20Proxy.getter_return_is_non_constant (Slither line:2873)

Found getter function but not setter
Checking if getter calls any other function
ENTRY_POINT: None (Slither line:2878)
RETURN: bytes32Storage[IMPLEMENTATION_ADDRESS_KEY] (Slither line:2878)
ENTRY_POINT: None (Slither line:2878)
ENTRY_POINT: None (Slither line:2878)
RETURN: vStore().getAddress(implementationAddressKey()) (Slither line:2878)

End VErc20Proxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: VErc20Proxy
_implementationAddress is dependent on addressStorage
_implementationAddress is dependent on bytes32Storage
Expression for _implementationAddress: implementationAddress()
Called: implementationAddress
impl_address_from_contract_call: implementationAddress()
called: implementationAddress
implementationAddress returns vStore().getAddress(implementationAddressKey())
called: vStore().getAddress
found MemberAccess: vStore().getAddress
TypeConversion: IVStore(addressStorage[VSTORE_PROXY_ADDRESS])
find_registry_address_source: vStore().getAddress(implementationAddressKey())
MemberAccess: vStore().getAddress
CallExpression: vStore()
Identifier: vStore
Checking public function implementationAddress
Checking public function version
Checking public function institutionId
Checking public function setVAddress
Checking public function setUserAddress
Checking public function setRecoveryAddress
Checking external function name
Checking external function version
Checking external function institutionId
Checking external function setVAddress
Checking external function setUserAddress
Checking external function setRecoveryAddress
Checking external function implementationAddress
Checking public function name
Checking external function receive
Checking external function fallback
functions_writing_to_variable: _implementationAddress
functions_writing_to_variable: checking function VErc20Proxy.encodePackedUint32Array (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.isThisNonceUsed (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.institutionId (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.spliceTimestamps (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.userAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.version (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.implementationAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.name (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.setVAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.encodePackedAddressArray (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.recoveryAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.convert (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.institutionId (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.receive (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.name (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.implementationAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.setRecoveryAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.setUserAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.implementationAddressKey (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.flagThisNonce (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.setVAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.encodePackedByte32Array (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.vStore (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.version (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.key (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.validateSignatures (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.isEthereum (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.isOwnerAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.setRecoveryAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.setUserAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.vAddress (proxy_features line:893)
functions_writing_to_variable: checking function VErc20Proxy.isPolygon (proxy_features line:893)
has_compatibility_checks: dependencies: ['signatures', 'TMP_605', 'V', 'IMPLEMENTATION_ADDRESS_KEY', 'TMP_599', 'V', 'V', 'TMP_612', 'underlyingAddressKey', 'TMP_685', 'TMP_613', 'nonce', 'R', 'R', 'R', 'redeemAddressKey', 'vStoreProxyAddress', 'TMP_687', 'REF_275', 'signatures', '', 'S', 'S', 'S', 'nonce', '_address', 'TMP_561', 'TMP_611', 'TMP_610', '_key', '', 'TMP_602', 'TMP_603', 'TMP_559', 'TMP_688', 'TMP_558', '', 'nonce', 'vAddress', 'REF_287', 'signatures', 'userAddress', 'TMP_601', 'TMP_600', 'TMP_606', 'signatures', 'recoveryAddress', 'TMP_607', 'TMP_608', 'addressStorage', 'TMP_686', '_implementationAddressKey', 'bytes32Storage', '_address', '_address', 'TMP_557', 'nonce', 'nonce', 'REF_256', '', 'REF_264']
functions_writing_to_variable: IMPLEMENTATION_ADDRESS_KEY
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = VSTORE_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VSTORE_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VSTORE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VSTORE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VSTORE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VFINANCE_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VFINANCE_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VFINANCE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VFINANCE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(VFINANCE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VERC20_ADDRESS = keccak256(bytes)(abi.encodePacked(VERC20_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VERC20_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VERC20_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VERC20_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VERC20_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = VDISTRIBUTION_ADDRESS = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VDISTRIBUTION_ADDRESS = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VDISTRIBUTION_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VDISTRIBUTION_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VDISTRIBUTION_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = VWALLET_ADDRESS = keccak256(bytes)(abi.encodePacked(VWALLET_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VWALLET_ADDRESS = keccak256(bytes)(abi.encodePacked(VWALLET_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = VWALLET_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VWALLET_PROXY_ADDRESSES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VWALLET_PROXY_ADDRESSES = keccak256(bytes)(abi.encodePacked(VWALLET_PROXY_ADDRESSES)) (proxy_features line:907)
functions_writing_to_variable: exp = IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_ADDRESS_KEY (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_ADDRESS_KEY))
functions_writing_to_variable: exp = VADDRESS = keccak256(bytes)(abi.encodePacked(VADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: VADDRESS = keccak256(bytes)(abi.encodePacked(VADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = USER_ADDRESS = keccak256(bytes)(abi.encodePacked(USER_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: USER_ADDRESS = keccak256(bytes)(abi.encodePacked(USER_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RECOVERY_ADDRESS = keccak256(bytes)(abi.encodePacked(RECOVERY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RECOVERY_ADDRESS = keccak256(bytes)(abi.encodePacked(RECOVERY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = INSTITUTION_ID = keccak256(bytes)(abi.encodePacked(INSTITUTION_ID)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: INSTITUTION_ID = keccak256(bytes)(abi.encodePacked(INSTITUTION_ID)) (proxy_features line:907)
functions_writing_to_variable: exp = WITHDRAWALS = keccak256(bytes)(abi.encodePacked(WITHDRAWALS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: WITHDRAWALS = keccak256(bytes)(abi.encodePacked(WITHDRAWALS)) (proxy_features line:907)
functions_writing_to_variable: exp = NAME = keccak256(bytes)(abi.encodePacked(NAME)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: NAME = keccak256(bytes)(abi.encodePacked(NAME)) (proxy_features line:907)
functions_writing_to_variable: exp = SYMBOL = keccak256(bytes)(abi.encodePacked(SYMBOL)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: SYMBOL = keccak256(bytes)(abi.encodePacked(SYMBOL)) (proxy_features line:907)
functions_writing_to_variable: exp = SUPPLY = keccak256(bytes)(abi.encodePacked(SUPPLY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: SUPPLY = keccak256(bytes)(abi.encodePacked(SUPPLY)) (proxy_features line:907)
functions_writing_to_variable: exp = BALANCES = keccak256(bytes)(abi.encodePacked(BALANCES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: BALANCES = keccak256(bytes)(abi.encodePacked(BALANCES)) (proxy_features line:907)
functions_writing_to_variable: exp = UNDERLYING = keccak256(bytes)(abi.encodePacked(UNDERLYING)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UNDERLYING = keccak256(bytes)(abi.encodePacked(UNDERLYING)) (proxy_features line:907)
functions_writing_to_variable: exp = ALLOWANCES = keccak256(bytes)(abi.encodePacked(ALLOWANCES)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ALLOWANCES = keccak256(bytes)(abi.encodePacked(ALLOWANCES)) (proxy_features line:907)
functions_writing_to_variable: exp = NONCES = keccak256(bytes)(abi.encodePacked(abi.encodePacked(NONCES))) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: NONCES = keccak256(bytes)(abi.encodePacked(abi.encodePacked(NONCES))) (proxy_features line:907)
functions_writing_to_variable: exp = UNDERLYING_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(UNDERLYING_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UNDERLYING_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(UNDERLYING_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = REDEEM_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(REDEEM_ADDRESS_KEY)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: REDEEM_ADDRESS_KEY = keccak256(bytes)(abi.encodePacked(REDEEM_ADDRESS_KEY)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYUSDC_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYUSDC_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYUSDC_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYUSDC_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYDAI_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYDAI_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYDAI_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYDAI_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = RAYETH_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYETH_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: RAYETH_ADDRESS = keccak256(bytes)(abi.encodePacked(RAYETH_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = USDC_ADDRESS = keccak256(bytes)(abi.encodePacked(USDC_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: USDC_ADDRESS = keccak256(bytes)(abi.encodePacked(USDC_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = DAI_ADDRESS = keccak256(bytes)(abi.encodePacked(DAI_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: DAI_ADDRESS = keccak256(bytes)(abi.encodePacked(DAI_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = CHAIN_ID = keccak256(bytes)(abi.encodePacked(CHAIN_ID)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: CHAIN_ID = keccak256(bytes)(abi.encodePacked(CHAIN_ID)) (proxy_features line:907)
functions_writing_to_variable: exp = DAILY_LIMIT = keccak256(bytes)(abi.encodePacked(DAILY_LIMIT)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: DAILY_LIMIT = keccak256(bytes)(abi.encodePacked(DAILY_LIMIT)) (proxy_features line:907)
functions_writing_to_variable: exp = ERC20_PREDICATE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ERC20_PREDICATE_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ERC20_PREDICATE_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ERC20_PREDICATE_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: exp = ROOT_CHAIN_MANAGER_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ROOT_CHAIN_MANAGER_PROXY_ADDRESS)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: ROOT_CHAIN_MANAGER_PROXY_ADDRESS = keccak256(bytes)(abi.encodePacked(ROOT_CHAIN_MANAGER_PROXY_ADDRESS)) (proxy_features line:907)
functions_writing_to_variable: addressStorage
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: bytes32Storage
functions_writing_to_variable: checking function AStorage.key (proxy_features line:893)
functions_writing_to_variable: checking function AStorage.slitherConstructorConstantVariables (proxy_features line:893)
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _implementationAddress = implementationAddress()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ptr_fallback_asm_0 = mload(uint256)(0x40)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(_implementationAddress != address(0),VProxy::fallback - invalid implementation address)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_implementationAddress,ptr_fallback_asm_0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
Found public function: implementationAddress
