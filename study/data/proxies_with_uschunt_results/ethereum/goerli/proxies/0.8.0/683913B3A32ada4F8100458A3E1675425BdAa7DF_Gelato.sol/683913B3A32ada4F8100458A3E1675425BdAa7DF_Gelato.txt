
Begin Gelato.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Gelato.find_delegatecall_in_exp_node

Found Expression Node: ds = position (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)

End Gelato.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Gelato.find_delegatecall_in_exp_node

Found Expression Node: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()()) (Slither line:2792)
Expression called: calldatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
calldatasize()()

End Gelato.find_delegatecall_in_exp_node (Slither line:2848)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Gelato.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End Gelato.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Gelato.find_delegatecall_in_asm (Slither line:1541)


End Gelato.find_delegatecall_in_asm (Slither line:1637)


Begin Gelato.find_delegatecall_in_asm (Slither line:1541)


End Gelato.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Gelato.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(facet != address(0),Gelato: Function does not exist) (Slither line:2792)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2807)
Args:
facet != address(0)
Gelato: Function does not exist

End Gelato.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Gelato.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2792)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
0
returndatasize()()

End Gelato.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin Gelato.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0) (Slither line:2792)
Expression Type: = (Slither line:2795)
Checking right side of assignment expression... (Slither line:2803)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2807)
Args:
gas()()
facet
0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2814)

Destination is facet (Slither line:2818)
dest.value: facet (Slither line:2821)
Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:2826)

End Gelato.find_delegatecall_in_exp_node (Slither line:2848)


End Gelato.is_proxy (Slither line:1476)


Begin Gelato.is_upgradeable_proxy (Slither line:1136)

Checking contract: Gelato 
Local Variable: facet (Slither line:1164)
Gelato is delegating to facet
Looking for setter (Slither line:1200)


Begin Gelato.find_setter_in_contract (Slither line:3109)

Expression: ds.selectorToFacetAndPosition[msg.sig].facetAddress (Slither line:3112)
Checking function: constructor(IDiamondCut.FacetCut[],Gelato.DiamondArgs) returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: receive() returns() (Slither line:3117)

Begin DiamondCut corner case handling (Slither line:3277)

Expression: addFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) (Slither line:3284)
addFunctions
Expression: selectorIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: initializeDiamondCut(_init,_calldata) (Slither line:3284)
initializeDiamondCut
Expression: ds = position (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: replaceFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) (Slither line:3284)
replaceFunctions
Expression: require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function) (Slither line:3284)
require(bool,string)
Expression: GelatoBytes.revertWithError(error,LibDiamondCut:_init:) (Slither line:3284)
GelatoBytes.revertWithError
Expression: removeFunction(oldFacetAddress,selector) (Slither line:3284)
removeFunction
Expression: ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector) (Slither line:3284)
ds.facetFunctionSelectors[_facetAddress].functionSelectors.push
Expression: revert(string)(LibDiamondCut: _init function reverted) (Slither line:3284)
revert(string)
Expression: removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) (Slither line:3284)
removeFunctions
Expression: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: selectorPosition ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut) (Slither line:3284)
require(bool,string)
Expression: revert(string)(LibDiamondCut: Incorrect FacetCutAction) (Slither line:3284)
revert(string)
Expression: ds.contractOwner = _newOwner (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: OwnershipTransferred(previousOwner,_newOwner) (Slither line:3284)
OwnershipTransferred
Expression: require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0)) (Slither line:3284)
require(bool,string)
Expression: enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code) (Slither line:3284)
enforceHasContractCode
Expression: ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetAddresses.push(_facetAddress) (Slither line:3284)
ds.facetAddresses.push
Expression: require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut) (Slither line:3284)
require(bool,string)
Expression: facetIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0)) (Slither line:3284)
require(bool,string)
Expression: DiamondCut(_diamondCut,_init,_calldata) (Slither line:3284)
DiamondCut
Expression: require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut) (Slither line:3284)
require(bool,string)
Expression: revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector))) (Slither line:3284)
revert(string)
Expression: revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata))) (Slither line:3284)
revert(string)
Expression: require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0)) (Slither line:3284)
require(bool,string)
Expression: selectorIndex ++ (Slither line:3284)
Expression type: ++ (Slither line:3286)
Expression: ds.facetAddresses.pop() (Slither line:3284)
ds.facetAddresses.pop
Expression: enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code) (Slither line:3284)
enforceHasContractCode
Expression: removeFunction(oldFacetAddress,selector) (Slither line:3284)
removeFunction
Expression: ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetAddresses.push(_facetAddress) (Slither line:3284)
ds.facetAddresses.push
Expression: ds.facetAddresses[facetAddressPosition] = lastFacetAddress (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition) (Slither line:3284)
Expression type: = (Slither line:3286)
Expression: LibDiamond.diamondCut(_diamondCut,address(0),new bytes(0)) (Slither line:3284)
LibDiamond.diamondCut

End DiamondCut corner case handling (Slither line:3313)


End Gelato.find_setter_in_contract (Slither line:3315)


Implementation set by function: diamondCut in contract: LibDiamond (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Gelato.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking function: constructor (Slither line:2978)
Checking function: fallback (Slither line:2978)
Checking function: receive (Slither line:2978)

End Gelato.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in Gelato (Slither line:1305)

Begin IDiamondCut.find_getter_in_contract (Slither line:2964)

facet is a Variable object
ds.selectorToFacetAndPosition[msg.sig].facetAddress

End IDiamondCut.find_getter_in_contract (Slither line:3073)

Looking for Loupe functions in LibDiamond
diamondStorage() returns(LibDiamond.DiamondStorage)
setContractOwner(address) returns()
contractOwner() returns(address)
isContractOwner(address) returns(bool)
enforceIsContractOwner() returns()
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
addFunctions(address,bytes4[]) returns()
replaceFunctions(address,bytes4[]) returns()
removeFunctions(address,bytes4[]) returns()
removeFunction(address,bytes4) returns()
initializeDiamondCut(address,bytes) returns()
enforceHasContractCode(address,string) returns()
slitherConstructorConstantVariables() returns()
Looking for Loupe functions in GelatoBytes
calldataSliceSelector(bytes) returns(bytes4)
memorySliceSelector(bytes) returns(bytes4)
revertWithError(bytes,string) returns()
returnError(bytes,string) returns(string)
impl_address_from_contract_call: ds.selectorToFacetAndPosition[msg.sig].facetAddress
Checking external function fallback
Checking external function receive
functions_writing_to_variable: facet
functions_writing_to_variable: checking function LibDiamond.removeFunction (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.enforceIsContractOwner (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.enforceHasContractCode (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.setContractOwner (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.diamondCut (proxy_features line:893)
get_value_assigned: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
functions_writing_to_variable: diamondCut writes _facetAddress to ds.selectorToFacetAndPosition[selector].facetAddress (proxy_features line:1033)
functions_writing_to_variable: checking function LibDiamond.addFunctions (proxy_features line:893)
get_value_assigned: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
functions_writing_to_variable: addFunctions writes _facetAddress to ds.selectorToFacetAndPosition[selector].facetAddress (proxy_features line:1033)
functions_writing_to_variable: checking function LibDiamond.diamondStorage (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.removeFunctions (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.isContractOwner (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.initializeDiamondCut (proxy_features line:893)
functions_writing_to_variable: checking function Gelato.constructor (proxy_features line:893)
get_value_assigned: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
functions_writing_to_variable: constructor writes _facetAddress to ds.selectorToFacetAndPosition[selector].facetAddress (proxy_features line:1033)
functions_writing_to_variable: checking function Gelato.receive (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.contractOwner (proxy_features line:893)
functions_writing_to_variable: checking function LibDiamond.replaceFunctions (proxy_features line:893)
get_value_assigned: ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
functions_writing_to_variable: replaceFunctions writes _facetAddress to ds.selectorToFacetAndPosition[selector].facetAddress (proxy_features line:1033)
has_compatibility_checks: dependencies: ['REF_17', 'ds', 'REF_19', 'REF_18']
has_compatibility_checks: checking internal function diamondCut
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Replace
has_compatibility_checks: IF node exp = error.length > 0
has_compatibility_checks: IF node can lead to revert ['GelatoBytes.revertWithError(error,LibDiamondCut:_init:)', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: IF node can lead to revert ['GelatoBytes.revertWithError(error,LibDiamondCut:_init:)', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: ConditionalExpression if error.length > 0 then GelatoBytes.revertWithError(error,LibDiamondCut:_init:) else revert(string)(LibDiamondCut: _init function reverted)
require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
has_compatibility_checks: condition oldFacetAddress != _facetAddress
check_condition_from_expression: condition ds.selectorToFacetAndPosition[selector].facetAddress != _facetAddress
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Remove
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: ConditionalExpression if action == IDiamondCut.FacetCutAction.Remove then removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) else revert(string)(LibDiamondCut: Incorrect FacetCutAction)
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = selectorPosition == 0
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_compatibility_checks: condition _facetAddress == address(0)
check_condition_from_expression: condition _facetAddress == address(0)
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Add
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
has_compatibility_checks: IF node exp = lastSelectorPosition == 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = selectorPosition == 0
has_compatibility_checks: IF node exp = facetAddressPosition != lastFacetAddressPosition
has_compatibility_checks: IF node exp = _init == address(0)
has_compatibility_checks: IF node exp = _bytes.length % 32 == 4
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))']
has_compatibility_checks: ConditionalExpression if _bytes.length % 32 == 4 then selector = mload(uint256)(0x20 + _bytes) else revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function)
has_compatibility_checks: condition _facetAddress != address(this)
check_condition_from_expression: condition _facetAddress != address(this)
require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_compatibility_checks: condition _calldata.length == 0
require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_compatibility_checks: condition _calldata.length > 0
require(bool,string)(contractSize > 0,_errorMessage)
has_compatibility_checks: condition contractSize > 0
has_compatibility_checks: IF node exp = _init != address(this)
has_compatibility_checks: IF node exp = selector == 0x08c379a0
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))']
has_compatibility_checks: ConditionalExpression if selector == 0x08c379a0 then _bytes = _bytes + 68 else revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))
has_compatibility_checks: IF node exp = selectorPosition != lastSelectorPosition
has_compatibility_checks: IF node exp = ! success
require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_compatibility_checks: condition oldFacetAddress == address(0)
has_compatibility_checks: skipping internal function addFunctions
has_compatibility_checks: checking public function constructor
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Replace
has_compatibility_checks: IF node exp = error.length > 0
has_compatibility_checks: IF node can lead to revert ['GelatoBytes.revertWithError(error,LibDiamondCut:_init:)', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: IF node can lead to revert ['GelatoBytes.revertWithError(error,LibDiamondCut:_init:)', 'revert(string)(LibDiamondCut: _init function reverted)']
has_compatibility_checks: ConditionalExpression if error.length > 0 then GelatoBytes.revertWithError(error,LibDiamondCut:_init:) else revert(string)(LibDiamondCut: _init function reverted)
require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
has_compatibility_checks: condition oldFacetAddress != _facetAddress
check_condition_from_expression: condition ds.selectorToFacetAndPosition[selector].facetAddress != _facetAddress
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Remove
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: IF node can lead to revert ['removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)', 'revert(string)(LibDiamondCut: Incorrect FacetCutAction)']
has_compatibility_checks: ConditionalExpression if action == IDiamondCut.FacetCutAction.Remove then removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors) else revert(string)(LibDiamondCut: Incorrect FacetCutAction)
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = selectorPosition == 0
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_compatibility_checks: condition _facetAddress == address(0)
check_condition_from_expression: condition _facetAddress == address(0)
has_compatibility_checks: IF node exp = action == IDiamondCut.FacetCutAction.Add
require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_compatibility_checks: condition _functionSelectors.length > 0
has_compatibility_checks: IF node exp = lastSelectorPosition == 0
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
has_compatibility_checks: IF node exp = selectorPosition == 0
has_compatibility_checks: IF node exp = facetAddressPosition != lastFacetAddressPosition
has_compatibility_checks: IF node exp = _init == address(0)
has_compatibility_checks: IF node exp = _bytes.length % 32 == 4
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))']
has_compatibility_checks: ConditionalExpression if _bytes.length % 32 == 4 then selector = mload(uint256)(0x20 + _bytes) else revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))
require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_compatibility_checks: condition _facetAddress != address(0)
check_condition_from_expression: condition _facetAddress != address(0)
require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function)
has_compatibility_checks: condition _facetAddress != address(this)
check_condition_from_expression: condition _facetAddress != address(this)
require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_compatibility_checks: condition _calldata.length == 0
require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_compatibility_checks: condition _calldata.length > 0
require(bool,string)(contractSize > 0,_errorMessage)
has_compatibility_checks: condition contractSize > 0
has_compatibility_checks: IF node exp = _init != address(this)
has_compatibility_checks: IF node exp = selector == 0x08c379a0
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))']
has_compatibility_checks: IF node can lead to revert ['revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))']
has_compatibility_checks: ConditionalExpression if selector == 0x08c379a0 then _bytes = _bytes + 68 else revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))
has_compatibility_checks: IF node exp = selectorPosition != lastSelectorPosition
has_compatibility_checks: IF node exp = ! success
require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_compatibility_checks: condition oldFacetAddress == address(0)
has_compatibility_checks: skipping internal function replaceFunctions
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(facet != address(0),Gelato: Function does not exist)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ds = position
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: position = LibDiamond.DIAMOND_STORAGE_POSITION
Found public function: constructor
Found fallback
Found external function: receive
has_time_delay: (node.type) EXPRESSION
(Expression) addFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) EXPRESSION
(Expression) initializeDiamondCut(_init,_calldata)
has_time_delay: (node.type) IF
(Expression) action == IDiamondCut.FacetCutAction.Replace
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _functionSelectors[selectorIndex]
has_time_delay: (node.type) EXPRESSION
(Expression) ds = position
has_time_delay: (node.type) IF
(Expression) error.length > 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress
has_time_delay: (node.type) EXPRESSION
(Expression) replaceFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
has_time_delay: (node.type) EXPRESSION
(Expression) GelatoBytes.revertWithError(error,LibDiamondCut:_init:)
has_time_delay: (node.type) EXPRESSION
(Expression) removeFunction(oldFacetAddress,selector)
has_time_delay: (node.type) IF
(Expression) action == IDiamondCut.FacetCutAction.Remove
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: _init function reverted)
has_time_delay: (node.type) EXPRESSION
(Expression) removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
has_time_delay: (node.type) EXPRESSION
(Expression) selectorPosition ++
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: Incorrect FacetCutAction)
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length)
has_time_delay: (node.type) IF
(Expression) selectorPosition == 0
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses.push(_facetAddress)
has_time_delay: (node.type) IF_LOOP
(Expression) facetIndex < _diamondCut.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) EXPRESSION
(Expression) facetIndex ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) NEW VARIABLE
(Expression) action = _diamondCut[facetIndex].action
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_time_delay: (node.type) IF
(Expression) action == IDiamondCut.FacetCutAction.Add
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _functionSelectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) DiamondCut(_diamondCut,_init,_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) IF
(Expression) lastSelectorPosition == 0
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(string(abi.encodePacked(_tracingInfo,NoErrorSelector)))
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _functionSelectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(string(abi.encodePacked(_tracingInfo,UnexpectedReturndata)))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastFacetAddressPosition = ds.facetAddresses.length - 1
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition
has_time_delay: (node.type) IF
(Expression) selectorPosition == 0
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _functionSelectors[selectorIndex]
has_time_delay: (node.type) IF
(Expression) facetAddressPosition != lastFacetAddressPosition
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses.pop()
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_facetAddress,LibDiamondCut: New facet has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) removeFunction(oldFacetAddress,selector)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length)
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition]
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses.push(_facetAddress)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddresses[facetAddressPosition] = lastFacetAddress
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition)
has_time_delay: (node.type) IF
(Expression) _init == address(0)
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition
has_time_delay: (node.type) IF
(Expression) _bytes.length % 32 == 4
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress != address(this),LibDiamondCut: Can't remove immutable function)
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _functionSelectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(contractSize > 0,_errorMessage)
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _functionSelectors[selectorIndex]
has_time_delay: (node.type) IF
(Expression) _init != address(this)
has_time_delay: (node.type) IF
(Expression) selector == 0x08c379a0
has_time_delay: (node.type) EXPRESSION
(Expression) contractSize = extcodesize(uint256)(_contract)
has_time_delay: (node.type) IF
(Expression) selectorPosition != lastSelectorPosition
has_time_delay: (node.type) IF
(Expression) ! success
has_time_delay: (node.type) EXPRESSION
(Expression) selector = mload(uint256)(0x20 + _bytes)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop()
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_init,LibDiamondCut: _init address has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(selector)
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition]
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[selector].facetAddress = _facetAddress
has_time_delay: (node.type) EXPRESSION
(Expression) (success,error) = _init.delegatecall(_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(string(abi.encodePacked(_tracingInfo,string(_bytes))))
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[selector].functionSelectorPosition = selectorPosition
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition)
has_time_delay: (node.type) EXPRESSION
(Expression) _bytes = _bytes + 68
has_time_delay: (node.type) EXPRESSION
(Expression) selectorPosition ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = DIAMOND_STORAGE_POSITION
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.selectorToFacetAndPosition[_selector]

Begin IDiamondCut.is_proxy (Slither line:1425)


End IDiamondCut.is_proxy (Slither line:1428)


Begin IDiamondCut.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondCut 

End IDiamondCut.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondLoupe.is_proxy (Slither line:1425)


End IDiamondLoupe.is_proxy (Slither line:1428)


Begin IDiamondLoupe.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondLoupe 

End IDiamondLoupe.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin IERC173.is_proxy (Slither line:1425)


End IERC173.is_proxy (Slither line:1428)


Begin IERC173.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC173 

End IERC173.is_upgradeable_proxy (Slither line:1407)


Begin LibDiamond.is_proxy (Slither line:1425)


End LibDiamond.is_proxy (Slither line:1428)


Begin LibDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibDiamond 

End LibDiamond.is_upgradeable_proxy (Slither line:1407)


Begin GelatoBytes.is_proxy (Slither line:1425)


End GelatoBytes.is_proxy (Slither line:1428)


Begin GelatoBytes.is_upgradeable_proxy (Slither line:1136)

Checking contract: GelatoBytes 

End GelatoBytes.is_upgradeable_proxy (Slither line:1407)

