
Begin MGovernance.is_proxy (Slither line:1425)


End MGovernance.is_proxy (Slither line:1428)


Begin MGovernance.is_upgradeable_proxy (Slither line:1136)

Checking contract: MGovernance 

End MGovernance.is_upgradeable_proxy (Slither line:1407)


Begin GovernanceStorage.is_proxy (Slither line:1425)


End GovernanceStorage.is_proxy (Slither line:1428)


Begin GovernanceStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernanceStorage 

End GovernanceStorage.is_upgradeable_proxy (Slither line:1407)


Begin Governance.is_proxy (Slither line:1425)


End Governance.is_proxy (Slither line:1428)


Begin Governance.is_upgradeable_proxy (Slither line:1136)

Checking contract: Governance 

End Governance.is_upgradeable_proxy (Slither line:1407)


Begin ProxyGovernance.is_proxy (Slither line:1425)


End ProxyGovernance.is_proxy (Slither line:1428)


Begin ProxyGovernance.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyGovernance 

End ProxyGovernance.is_upgradeable_proxy (Slither line:1407)


Begin StorageSlots.is_proxy (Slither line:1425)


End StorageSlots.is_proxy (Slither line:1428)


Begin StorageSlots.is_upgradeable_proxy (Slither line:1136)

Checking contract: StorageSlots 

End StorageSlots.is_upgradeable_proxy (Slither line:1407)


Begin Addresses.is_proxy (Slither line:1425)


End Addresses.is_proxy (Slither line:1428)


Begin Addresses.is_upgradeable_proxy (Slither line:1136)

Checking contract: Addresses 

End Addresses.is_upgradeable_proxy (Slither line:1407)


Begin StarkExTypes.is_proxy (Slither line:1425)


End StarkExTypes.is_proxy (Slither line:1428)


Begin StarkExTypes.is_upgradeable_proxy (Slither line:1136)

Checking contract: StarkExTypes 

End StarkExTypes.is_upgradeable_proxy (Slither line:1407)


Begin ProxyStorage.is_proxy (Slither line:1425)


End ProxyStorage.is_proxy (Slither line:1428)


Begin ProxyStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyStorage 

End ProxyStorage.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called '_implementation'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for _implementation (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking governanceInfo (Slither line:1689)
Checking initializationHash_DEPRECATED (Slither line:1689)
Checking enabledTime (Slither line:1689)
Checking initialized (Slither line:1689)
Checking PROXY_GOVERNANCE_TAG (Slither line:1689)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking CALL_PROXY_IMPL_SLOT (Slither line:1689)
Checking FINALIZED_STATE_SLOT (Slither line:1689)
Checking UPGRADE_DELAY_SLOT (Slither line:1689)
Checking PROXY_VERSION (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _implementation (Slither line:1703)
_implementation is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin Proxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
AssignmentOperation: _implementation = sload(uint256)(slot) (Slither line:2107)
CallExpression: sload(uint256) (Slither line:2113)
Found storage slot: IMPLEMENTATION_SLOT (Slither line:2130)
implementation returns a variable of type address   called _implementation (Slither line:2183)
implementation contains assembly - looking for sload (Slither line:2189)

End Proxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End Proxy.find_delegate_variable_by_name (Slither line:1739)


End Proxy.find_delegatecall_in_asm (Slither line:1637)

Setting Proxy._delegate_variable = Proxy._proxy_impl_slot: IMPLEMENTATION_SLOT (Slither line:1473)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 
Call destination IMPLEMENTATION_SLOT is constant (Slither line:1146)

IMPLEMENTATION_SLOT is the implementation storage slot (Slither line:1149)

Proxy is delegating to IMPLEMENTATION_SLOT
Looking for setter (Slither line:1200)

Looking for setter in StorageSlots (Slither line:1204)


Begin StorageSlots.find_setter_in_contract (Slither line:3109)

Expression: 0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24 (Slither line:3112)
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3117)
Visibility: internal

End StorageSlots.find_setter_in_contract (Slither line:3315)


Could not find setter in StorageSlots 
Looking in Proxy (Slither line:1213)

Begin Proxy.find_setter_in_contract (Slither line:3109)

Expression: 0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24 (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: setUpgradeActivationDelay(uint256) returns() (Slither line:3117)
Visibility: private
Checking function: getUpgradeActivationDelay() returns(uint256) (Slither line:3117)
Visibility: public
getUpgradeActivationDelay contains assembly (Slither line:3143)
delay
delay = sload(uint256)(slot)
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: public
implementation contains assembly (Slither line:3143)
_implementation = sload(uint256)(slot)
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
Checking function: implementationIsFrozen() returns(bool) (Slither line:3117)
Visibility: private
Checking function: initialize(bytes) returns() (Slither line:3117)
Checking function: receive() returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: setImplementation(address) returns() (Slither line:3117)
Visibility: private
Checking function: isNotFinalized() returns(bool) (Slither line:3117)
Visibility: public
isNotFinalized contains assembly (Slither line:3143)
notFinal = (slotValue == 0)
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
slotValue = sload(uint256)(slot)
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
Checking function: setFinalizedFlag() returns() (Slither line:3117)
Visibility: private
Checking function: addImplementation(address,bytes,bool) returns() (Slither line:3117)
Visibility: external
enabledTime[implVectorHash] = activationTime
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
ImplementationAdded(newImplementation,data,finalize)
delay = sload(uint256)(slot)
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
onlyGovernance()
require(bool,string)(newImplementation.isContract(),ADDRESS_NOT_CONTRACT)
gub.effectiveGovernors[testGovernor]
governanceInfo[PROXY_GOVERNANCE_TAG]
delay
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3206)
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
require(bool,string)(_isGovernor(msg.sender),ONLY_GOVERNANCE)
Checking function: removeImplementation(address,bytes,bool) returns() (Slither line:3117)
Visibility: external
delete enabledTime[implVectorHash]
governanceInfo[PROXY_GOVERNANCE_TAG]
ImplementationRemoved(removedImplementation,data,finalize)
gub.effectiveGovernors[testGovernor]
require(bool,string)(activationTime > 0,UNKNOWN_UPGRADE_INFORMATION)
onlyGovernance()
require(bool,string)(_isGovernor(msg.sender),ONLY_GOVERNANCE)
Checking function: upgradeTo(address,bytes,bool) returns() (Slither line:3117)
Visibility: external
setImplementation(newImplementation)
sstore(uint256,uint256)(slot,newImplementation)
sstore(uint256,uint256)

End Proxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin StorageSlots.find_getter_in_contract (Slither line:2964)

IMPLEMENTATION_SLOT is a Variable object
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End StorageSlots.find_getter_in_contract (Slither line:3073)


Begin Proxy.find_getter_in_contract (Slither line:2964)

IMPLEMENTATION_SLOT is a Variable object
0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
Checking function: getGovernanceInfo (Slither line:2978)
getGovernanceInfo returns GovernanceInfoStruct variable  (Slither line:2998)
RETURN node expression: governanceInfo[PROXY_GOVERNANCE_TAG] (Slither line:3018)
Checking function: proxyIsGovernor (Slither line:2978)
proxyIsGovernor returns bool variable  (Slither line:2998)
RETURN node expression: _isGovernor(testGovernor) (Slither line:3018)
Checking function: proxyNominateNewGovernor (Slither line:2978)
Checking function: proxyRemoveGovernor (Slither line:2978)
Checking function: proxyAcceptGovernance (Slither line:2978)
Checking function: proxyCancelNomination (Slither line:2978)
Checking function: initGovernance (Slither line:2978)
Checking function: _isGovernor (Slither line:2978)
_isGovernor returns bool variable  (Slither line:2998)
RETURN node expression: gub.effectiveGovernors[testGovernor] (Slither line:3018)
Checking function: _cancelNomination (Slither line:2978)
Checking function: _nominateNewGovernor (Slither line:2978)
Checking function: addGovernor (Slither line:2978)
Checking function: _acceptGovernance (Slither line:2978)
Checking function: _removeGovernor (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: setUpgradeActivationDelay (Slither line:2978)
Checking function: getUpgradeActivationDelay (Slither line:2978)
getUpgradeActivationDelay returns uint256 variable called delay (Slither line:2998)
getUpgradeActivationDelay contains assembly (Slither line:3041)
RETURN node expression: delay (Slither line:3018)
getUpgradeActivationDelay contains assembly (Slither line:3041)
getUpgradeActivationDelay contains assembly (Slither line:3041)
getUpgradeActivationDelay contains assembly (Slither line:3041)
getUpgradeActivationDelay contains assembly (Slither line:3041)
Checking function: implementation (Slither line:2978)
implementation returns address variable called _implementation (Slither line:2998)
implementation contains assembly (Slither line:3041)
implementation contains assembly (Slither line:3041)
implementation contains assembly (Slither line:3041)

End Proxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: Proxy (Slither line:1285)

End Proxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: Proxy
Setter found in contract Proxy
impl_address_from_contract_call: 0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
impl_address_from_contract_call: StateVariable IMPLEMENTATION_SLOT
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
library call: Addresses.isContract
impl_address_from_contract_call: CallExpression return(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is calldatasize()()
impl_address_from_contract_call: CallExpression calldatasize()()
impl_address_from_contract_call: CallExpression sload(uint256)(slot)
impl_address_from_contract_call: arg is slot
impl_address_from_contract_call: CallExpression require(bool,string)(_implementation != address(0x0),MISSING_IMPLEMENTATION)
impl_address_from_contract_call: arg is _implementation != address(0x0)
impl_address_from_contract_call: arg is MISSING_IMPLEMENTATION
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_implementation,0,calldatasize()(),0,0)
impl_address_from_contract_call: arg is gas()()
impl_address_from_contract_call: CallExpression gas()()
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
Checking external function proxyIsGovernor
Checking external function proxyNominateNewGovernor
Checking external function proxyRemoveGovernor
Checking external function proxyAcceptGovernance
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == gub.candidateGovernor,ONLY_CANDIDATE_GOVERNOR)
Checking external function proxyCancelNomination
Checking public function getUpgradeActivationDelay
Checking public function implementation
Checking external function initialize
Checking public function isNotFinalized
Checking external function addImplementation
Checking external function removeImplementation
Checking external function upgradeTo
Checking external function receive
Checking external function fallback
functions_writing_to_variable: IMPLEMENTATION_SLOT
functions_writing_to_variable: checking function Proxy.initialize (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.getGovernanceInfo (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.removeImplementation (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.addGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.proxyNominateNewGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.initGovernance (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.receive (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.upgradeTo (proxy_features line:893)
get_value_assigned: sstore(uint256,uint256)(slot,newImplementation)
functions_writing_to_variable: upgradeTo writes newImplementation to IMPLEMENTATION_SLOT using sstore (proxy_features line:993)
functions_writing_to_variable: checking function Proxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function Proxy._acceptGovernance (proxy_features line:893)
functions_writing_to_variable: checking function Proxy._isGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.setUpgradeActivationDelay (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.proxyRemoveGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.setImplementation (proxy_features line:893)
get_value_assigned: sstore(uint256,uint256)(slot,newImplementation)
functions_writing_to_variable: setImplementation writes newImplementation to IMPLEMENTATION_SLOT using sstore (proxy_features line:993)
functions_writing_to_variable: checking function Proxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = PROXY_GOVERNANCE_TAG = StarkEx.Proxy.2019.GovernorsInformation (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: PROXY_GOVERNANCE_TAG = StarkEx.Proxy.2019.GovernorsInformation (proxy_features line:907)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = 0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24 (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = 0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24 (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_SLOT = 0x177667240aeeea7e35eabe3a35e18306f336219e1386f7710a6bf8783f761b24
functions_writing_to_variable: exp = CALL_PROXY_IMPL_SLOT = 0x7184681641399eb4ad2fdb92114857ee6ff239f94ad635a1779978947b8843be (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: CALL_PROXY_IMPL_SLOT = 0x7184681641399eb4ad2fdb92114857ee6ff239f94ad635a1779978947b8843be (proxy_features line:907)
functions_writing_to_variable: exp = FINALIZED_STATE_SLOT = 0x7d433c6f837e8f93009937c466c82efbb5ba621fae36886d0cac433c5d0aa7d2 (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: FINALIZED_STATE_SLOT = 0x7d433c6f837e8f93009937c466c82efbb5ba621fae36886d0cac433c5d0aa7d2 (proxy_features line:907)
functions_writing_to_variable: exp = UPGRADE_DELAY_SLOT = 0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: UPGRADE_DELAY_SLOT = 0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f (proxy_features line:907)
functions_writing_to_variable: exp = PROXY_VERSION = 3.0.1 (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: PROXY_VERSION = 3.0.1 (proxy_features line:907)
functions_writing_to_variable: checking function Proxy._cancelNomination (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.getUpgradeActivationDelay (proxy_features line:893)
functions_writing_to_variable: checking function Proxy._removeGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.isNotFinalized (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.proxyAcceptGovernance (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.getGovernanceInfo (proxy_features line:893)
functions_writing_to_variable: checking function Proxy._isGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.setFinalizedFlag (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.proxyIsGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.implementationIsFrozen (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.proxyCancelNomination (proxy_features line:893)
functions_writing_to_variable: checking function Proxy._nominateNewGovernor (proxy_features line:893)
functions_writing_to_variable: checking function Proxy.addImplementation (proxy_features line:893)
has_compatibility_checks: dependencies: []
has_compatibility_checks: checking external function upgradeTo
require(bool,string)(success,string(returndata))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(! implementationIsFrozen(),STATE_IS_FROZEN)
has_compatibility_checks: condition ! implementationIsFrozen()
require(bool,string)(success,CALL_TO_ISFROZEN_REVERTED)
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(! abi.decode(returndata,(bool)),NEW_IMPLEMENTATION_FROZEN)
has_compatibility_checks: condition ! abi.decode(returndata,(bool))
has_compatibility_checks: IF node exp = finalize
has_compatibility_checks: IF node exp = _implementation == address(0x0)
require(bool,string)(activationTime > 0,UNKNOWN_UPGRADE_INFORMATION)
has_compatibility_checks: condition activationTime > 0
require(bool,string)(success,string(returndata))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
require(bool,string)(newImplementation.isContract(),ADDRESS_NOT_CONTRACT)
has_compatibility_checks: condition newImplementation.isContract()
check_condition_from_expression: modifier calls: ['onlyGovernance()', 'notFinalized()', 'notFrozen()']
require(bool,string)(isNotFinalized(),IMPLEMENTATION_FINALIZED)
has_compatibility_checks: condition isNotFinalized()
require(bool,string)(activationTime <= block.timestamp || implementation() == address(0x0),UPGRADE_NOT_ENABLED_YET)
has_compatibility_checks: condition activationTime <= block.timestamp || implementation() == address(0x0)
require(bool,string)(_isGovernor(msg.sender),ONLY_GOVERNANCE)
has_compatibility_checks: condition _isGovernor(msg.sender)
has_compatibility_checks: skipping private function setImplementation
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(_implementation != address(0x0),MISSING_IMPLEMENTATION)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_implementation,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _implementation = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
Found external function: proxyIsGovernor
has_time_delay: (node.type) EXPRESSION
(Expression) setImplementation(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) sstore(uint256,uint256)(slot,newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returndata) = _implementation.delegatecall(abi.encodeWithSignature(isFrozen()))
has_time_delay: (node.type) NEW VARIABLE
(Expression) slot = FINALIZED_STATE_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(success,string(returndata))
has_time_delay: (node.type) EXPRESSION
(Expression) onlyGovernance()
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returndata) = newImplementation.delegatecall(abi.encodeWithSelector(this.initialize.selector,data))
has_time_delay: (node.type) EXPRESSION
(Expression) notFinalized()
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) EXPRESSION
(Expression) slotValue = sload(uint256)(slot)
has_time_delay: (node.type) EXPRESSION
(Expression) sstore(uint256,uint256)(slot,0x1)
has_time_delay: (node.type) EXPRESSION
(Expression) notFrozen()
has_time_delay: (node.type) RETURN
(Expression) abi.decode(returndata,(bool))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(! implementationIsFrozen(),STATE_IS_FROZEN)
has_time_delay: (node.type) EXPRESSION
(Expression) (success,returndata) = newImplementation.delegatecall(abi.encodeWithSignature(isFrozen()))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(success,CALL_TO_ISFROZEN_REVERTED)
has_time_delay: (node.type) NEW VARIABLE
(Expression) implVectorHash = keccak256(bytes)(abi.encode(newImplementation,data,finalize))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(! abi.decode(returndata,(bool)),NEW_IMPLEMENTATION_FROZEN)
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = sload(uint256)(slot)
has_time_delay: (node.type) NEW VARIABLE
(Expression) slot = FINALIZED_STATE_SLOT
has_time_delay: (node.type) NEW VARIABLE
(Expression) _implementation = implementation()
has_time_delay: (node.type) IF
(Expression) finalize
has_time_delay: (node.type) RETURN
(Expression) gub.effectiveGovernors[testGovernor]
has_time_delay: (node.type) IF
(Expression) _implementation == address(0x0)
has_time_delay: (node.type) NEW VARIABLE
(Expression) activationTime = enabledTime[implVectorHash]
has_time_delay: (node.type) EXPRESSION
(Expression) ImplementationUpgraded(newImplementation,data)
has_time_delay: (node.type) NEW VARIABLE
(Expression) slot = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(activationTime > 0,UNKNOWN_UPGRADE_INFORMATION)
has_time_delay: (node.type) NEW VARIABLE
(Expression) slot = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(success,string(returndata))
has_time_delay: (node.type) RETURN
(Expression) governanceInfo[PROXY_GOVERNANCE_TAG]
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(newImplementation.isContract(),ADDRESS_NOT_CONTRACT)
has_time_delay: (node.type) EXPRESSION
(Expression) setFinalizedFlag()
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isNotFinalized(),IMPLEMENTATION_FINALIZED)
has_time_delay: (node.type) EXPRESSION
(Expression) notFinal = (slotValue == 0)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(activationTime <= block.timestamp || implementation() == address(0x0),UPGRADE_NOT_ENABLED_YET)
has_time_delay: (node.type) NEW VARIABLE
(Expression) gub = getGovernanceInfo()
has_time_delay: (node.type) EXPRESSION
(Expression) FinalizedImplementation(newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(account)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_isGovernor(msg.sender),ONLY_GOVERNANCE)
