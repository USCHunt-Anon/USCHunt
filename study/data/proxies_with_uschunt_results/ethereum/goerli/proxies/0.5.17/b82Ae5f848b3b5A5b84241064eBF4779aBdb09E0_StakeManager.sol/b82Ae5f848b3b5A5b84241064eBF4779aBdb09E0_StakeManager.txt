
Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin Math.is_proxy (Slither line:1425)


End Math.is_proxy (Slither line:1428)


Begin Math.is_upgradeable_proxy (Slither line:1136)

Checking contract: Math 

End Math.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin RLPReader.is_proxy (Slither line:1425)


End RLPReader.is_proxy (Slither line:1428)


Begin RLPReader.is_upgradeable_proxy (Slither line:1136)

Checking contract: RLPReader 

End RLPReader.is_upgradeable_proxy (Slither line:1407)


Begin BytesLib.is_proxy (Slither line:1425)


End BytesLib.is_proxy (Slither line:1428)


Begin BytesLib.is_upgradeable_proxy (Slither line:1136)

Checking contract: BytesLib 

End BytesLib.is_upgradeable_proxy (Slither line:1407)


Begin ECVerify.is_proxy (Slither line:1425)


End ECVerify.is_proxy (Slither line:1428)


Begin ECVerify.is_upgradeable_proxy (Slither line:1136)

Checking contract: ECVerify 

End ECVerify.is_upgradeable_proxy (Slither line:1407)


Begin Merkle.is_proxy (Slither line:1425)


End Merkle.is_proxy (Slither line:1428)


Begin Merkle.is_upgradeable_proxy (Slither line:1136)

Checking contract: Merkle 

End Merkle.is_upgradeable_proxy (Slither line:1407)


Begin IGovernance.is_proxy (Slither line:1425)


End IGovernance.is_proxy (Slither line:1428)


Begin IGovernance.is_upgradeable_proxy (Slither line:1136)

Checking contract: IGovernance 

End IGovernance.is_upgradeable_proxy (Slither line:1407)


Begin Governable.is_proxy (Slither line:1425)


End Governable.is_proxy (Slither line:1428)


Begin Governable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Governable 

End Governable.is_upgradeable_proxy (Slither line:1407)


Begin Lockable.is_proxy (Slither line:1425)


End Lockable.is_proxy (Slither line:1428)


Begin Lockable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Lockable 

End Lockable.is_upgradeable_proxy (Slither line:1407)


Begin GovernanceLockable.is_proxy (Slither line:1425)


End GovernanceLockable.is_proxy (Slither line:1428)


Begin GovernanceLockable.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernanceLockable 

End GovernanceLockable.is_upgradeable_proxy (Slither line:1407)


Begin DelegateProxyForwarder.is_proxy (Slither line:1425)


End DelegateProxyForwarder.is_proxy (Slither line:1428)


Begin DelegateProxyForwarder.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateProxyForwarder 

End DelegateProxyForwarder.is_upgradeable_proxy (Slither line:1407)


Begin IWithdrawManager.is_proxy (Slither line:1425)


End IWithdrawManager.is_proxy (Slither line:1428)


Begin IWithdrawManager.is_upgradeable_proxy (Slither line:1136)

Checking contract: IWithdrawManager 

End IWithdrawManager.is_upgradeable_proxy (Slither line:1407)


Begin Registry.is_proxy (Slither line:1425)


End Registry.is_proxy (Slither line:1428)


Begin Registry.is_upgradeable_proxy (Slither line:1136)

Checking contract: Registry 

End Registry.is_upgradeable_proxy (Slither line:1407)


Begin IStakeManager.is_proxy (Slither line:1425)


End IStakeManager.is_proxy (Slither line:1428)


Begin IStakeManager.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeManager 

End IStakeManager.is_upgradeable_proxy (Slither line:1407)


Begin IValidatorShare.is_proxy (Slither line:1425)


End IValidatorShare.is_proxy (Slither line:1428)


Begin IValidatorShare.is_upgradeable_proxy (Slither line:1136)

Checking contract: IValidatorShare 

End IValidatorShare.is_upgradeable_proxy (Slither line:1407)


Begin ERC20.is_proxy (Slither line:1425)


End ERC20.is_proxy (Slither line:1428)


Begin ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20 

End ERC20.is_upgradeable_proxy (Slither line:1407)


Begin ERC20NonTradable.is_proxy (Slither line:1425)


End ERC20NonTradable.is_proxy (Slither line:1428)


Begin ERC20NonTradable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20NonTradable 

End ERC20NonTradable.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin IStakeManagerLocal.is_proxy (Slither line:1425)


End IStakeManagerLocal.is_proxy (Slither line:1428)


Begin IStakeManagerLocal.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeManagerLocal 

End IStakeManagerLocal.is_upgradeable_proxy (Slither line:1407)


Begin StakingInfo.is_proxy (Slither line:1425)


End StakingInfo.is_proxy (Slither line:1428)


Begin StakingInfo.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakingInfo 

End StakingInfo.is_upgradeable_proxy (Slither line:1407)


Begin Initializable.is_proxy (Slither line:1425)


End Initializable.is_proxy (Slither line:1428)


Begin Initializable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Initializable 

End Initializable.is_upgradeable_proxy (Slither line:1407)


Begin IStakeManagerEventsHub.is_proxy (Slither line:1425)


End IStakeManagerEventsHub.is_proxy (Slither line:1428)


Begin IStakeManagerEventsHub.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeManagerEventsHub 

End IStakeManagerEventsHub.is_upgradeable_proxy (Slither line:1407)


Begin EventsHub.is_proxy (Slither line:1425)


End EventsHub.is_proxy (Slither line:1428)


Begin EventsHub.is_upgradeable_proxy (Slither line:1136)

Checking contract: EventsHub 

End EventsHub.is_upgradeable_proxy (Slither line:1407)


Begin OwnableLockable.is_proxy (Slither line:1425)


End OwnableLockable.is_proxy (Slither line:1428)


Begin OwnableLockable.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnableLockable 

End OwnableLockable.is_upgradeable_proxy (Slither line:1407)


Begin ValidatorShare.is_proxy (Slither line:1425)


End ValidatorShare.is_proxy (Slither line:1428)


Begin ValidatorShare.is_upgradeable_proxy (Slither line:1136)

Checking contract: ValidatorShare 

End ValidatorShare.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin IERC721.is_proxy (Slither line:1425)


End IERC721.is_proxy (Slither line:1428)


Begin IERC721.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721 

End IERC721.is_upgradeable_proxy (Slither line:1407)


Begin IERC721Receiver.is_proxy (Slither line:1425)


End IERC721Receiver.is_proxy (Slither line:1428)


Begin IERC721Receiver.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Receiver 

End IERC721Receiver.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin Counters.is_proxy (Slither line:1425)


End Counters.is_proxy (Slither line:1428)


Begin Counters.is_upgradeable_proxy (Slither line:1136)

Checking contract: Counters 

End Counters.is_upgradeable_proxy (Slither line:1407)


Begin ERC165.is_proxy (Slither line:1425)


End ERC165.is_proxy (Slither line:1428)


Begin ERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165 

End ERC165.is_upgradeable_proxy (Slither line:1407)


Begin ERC721.is_proxy (Slither line:1425)


End ERC721.is_proxy (Slither line:1428)


Begin ERC721.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721 

End ERC721.is_upgradeable_proxy (Slither line:1407)


Begin IERC721Enumerable.is_proxy (Slither line:1425)


End IERC721Enumerable.is_proxy (Slither line:1428)


Begin IERC721Enumerable.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Enumerable 

End IERC721Enumerable.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Enumerable.is_proxy (Slither line:1425)


End ERC721Enumerable.is_proxy (Slither line:1428)


Begin ERC721Enumerable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Enumerable 

End ERC721Enumerable.is_upgradeable_proxy (Slither line:1407)


Begin IERC721Metadata.is_proxy (Slither line:1425)


End IERC721Metadata.is_proxy (Slither line:1428)


Begin IERC721Metadata.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC721Metadata 

End IERC721Metadata.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Metadata.is_proxy (Slither line:1425)


End ERC721Metadata.is_proxy (Slither line:1428)


Begin ERC721Metadata.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Metadata 

End ERC721Metadata.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Full.is_proxy (Slither line:1425)


End ERC721Full.is_proxy (Slither line:1428)


Begin ERC721Full.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Full 

End ERC721Full.is_upgradeable_proxy (Slither line:1407)


Begin StakingNFT.is_proxy (Slither line:1425)


End StakingNFT.is_proxy (Slither line:1428)


Begin StakingNFT.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakingNFT 

End StakingNFT.is_upgradeable_proxy (Slither line:1407)


Begin ERCProxy.is_proxy (Slither line:1425)


End ERCProxy.is_proxy (Slither line:1428)


Begin ERCProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERCProxy 

End ERCProxy.is_upgradeable_proxy (Slither line:1407)


Begin DelegateProxy.is_proxy (Slither line:1425)


End DelegateProxy.is_proxy (Slither line:1428)


Begin DelegateProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: DelegateProxy 

End DelegateProxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradableProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin UpgradableProxy.find_delegatecall_in_asm (Slither line:1541)

{ _impl := sload(position) } (Slither line:1576)

End UpgradableProxy.find_delegatecall_in_asm (Slither line:1637)


Begin UpgradableProxy.find_delegatecall_in_asm (Slither line:1541)

{ _impl := sload(position) } (Slither line:1576)

End UpgradableProxy.find_delegatecall_in_asm (Slither line:1637)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin UpgradableProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin UpgradableProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking OWNER_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in UpgradableProxy.delegatedFwd (Slither line:1805)
AssignmentOperation: IMPLEMENTATION_SLOT (Slither line:1811)
CallExpression: delegatedFwd(loadImplementation(),msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(loadImplementation(),msg.data) (Slither line:1832)
The value passed to parameter #0 is loadImplementation() (Slither line:1835)

Begin UpgradableProxy.find_delegate_from_call_exp

loadImplementation() (Slither line:1993)
called = loadImplementation (Slither line:2000)
Return node of function UpgradableProxy.loadImplementation(): RETURN _impl (Slither line:2031)
_impl (Slither line:2038)
loadImplementation returns a variable of type address   called _impl (Slither line:2183)
loadImplementation contains assembly - looking for sload (Slither line:2189)
Looking in ASSEMBLY node (Slither line:2196)
{ _impl := sload(position) }  (Slither line:2200)
Return value set by sload in asm (Slither line:2202)
Found storage slot: IMPLEMENTATION_SLOT (Slither line:2222)

End UpgradableProxy.find_delegate_from_call_exp (Slither line:2318)

delegatedFwd contains assembly, searching for sload (Slither line:1875)

End UpgradableProxy.find_delegate_variable_from_name (Slither line:1939)


Begin UpgradableProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2673)


End UpgradableProxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2700)


End UpgradableProxy.find_delegatecall_in_asm (Slither line:1637)

Setting UpgradableProxy._delegate_variable = UpgradableProxy._proxy_impl_slot: IMPLEMENTATION_SLOT (Slither line:1473)


End UpgradableProxy.is_proxy (Slither line:1476)


Begin UpgradableProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradableProxy 
Call destination IMPLEMENTATION_SLOT is constant (Slither line:1146)

IMPLEMENTATION_SLOT is the implementation storage slot (Slither line:1149)

UpgradableProxy is delegating to IMPLEMENTATION_SLOT
Looking for setter (Slither line:1200)


Begin UpgradableProxy.find_setter_in_contract (Slither line:3109)

Expression: keccak256(bytes)(matic.network.proxy.implementation) (Slither line:3112)
Checking function: constructor(address) returns() (Slither line:3117)
Checking function: fallback() returns() (Slither line:3117)
Checking function: owner() returns(address) (Slither line:3117)
Visibility: external
loadOwner()
_owner
Checking function: loadOwner() returns(address) (Slither line:3117)
Visibility: internal
Checking function: implementation() returns(address) (Slither line:3117)
Visibility: external
loadImplementation()
_impl
Checking function: loadImplementation() returns(address) (Slither line:3117)
Visibility: internal
Checking function: transferOwnership(address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
OwnerUpdate(newOwner,loadOwner())
setOwner(newOwner)
{ sstore(position, newOwner) } (Slither line:3153)
transferOwnership reads and/or writes to variable position (Slither line:3160)
transferOwnership reads and/or writes to variable OWNER_SLOT (Slither line:3160)
onlyProxyOwner()
_owner
require(bool,string)(newOwner != address(0),ZERO_ADDRESS)
Checking function: setOwner(address) returns() (Slither line:3117)
Visibility: private
Checking function: updateImplementation(address) returns() (Slither line:3117)
Visibility: public
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
size > 0
require(bool,string)(isAContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
ProxyUpdated(_newProxyTo,loadImplementation())
setImplementation(_newProxyTo)
onlyProxyOwner()
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
{ sstore(position, _newProxyTo) } (Slither line:3153)
updateImplementation reads and/or writes to variable position (Slither line:3160)
updateImplementation reads and/or writes to variable IMPLEMENTATION_SLOT (Slither line:3160)

End UpgradableProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: updateImplementation in contract: UpgradableProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradableProxy.find_getter_in_contract (Slither line:2964)

IMPLEMENTATION_SLOT is a Variable object
keccak256(bytes)(matic.network.proxy.implementation)
Checking function: proxyType (Slither line:2978)
proxyType returns uint256 variable called proxyTypeId (Slither line:2998)
Checking function: delegatedFwd (Slither line:2978)
Checking function: isAContract (Slither line:2978)
isAContract returns bool variable  (Slither line:2998)
isAContract contains assembly (Slither line:3041)
isAContract contains assembly (Slither line:3041)
RETURN node expression: false (Slither line:3018)
isAContract contains assembly (Slither line:3041)
RETURN node expression: size > 0 (Slither line:3018)
isAContract contains assembly (Slither line:3041)
isAContract contains assembly (Slither line:3041)
isAContract contains assembly (Slither line:3041)
isAContract contains assembly (Slither line:3041)
Checking function: constructor (Slither line:2978)
Checking function: fallback (Slither line:2978)
Checking function: owner (Slither line:2978)
owner returns address variable  (Slither line:2998)
RETURN node expression: loadOwner() (Slither line:3018)
Checking function: loadOwner (Slither line:2978)
loadOwner returns address variable  (Slither line:2998)
loadOwner contains assembly (Slither line:3041)
loadOwner contains assembly (Slither line:3041)
loadOwner contains assembly (Slither line:3041)
loadOwner contains assembly (Slither line:3041)
RETURN node expression: _owner (Slither line:3018)
loadOwner contains assembly (Slither line:3041)
Checking function: implementation (Slither line:2978)
implementation returns address variable  (Slither line:2998)
RETURN node expression: loadImplementation() (Slither line:3018)
Checking function: loadImplementation (Slither line:2978)
loadImplementation returns address variable  (Slither line:2998)
loadImplementation contains assembly (Slither line:3041)
loadImplementation contains assembly (Slither line:3041)
loadImplementation contains assembly (Slither line:3041)

End UpgradableProxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: loadImplementation in contract: UpgradableProxy (Slither line:1285)

End UpgradableProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: UpgradableProxy
Setter found in contract UpgradableProxy
Checking external function proxyType
Checking external function implementation
Checking external function proxyType
Checking external function implementation
Checking external function owner
Checking external function implementation
Checking public function transferOwnership
Checking public function updateImplementation
Checking public function updateAndCall
Checking external function fallback
functions_writing_to_variable: IMPLEMENTATION_SLOT
functions_writing_to_variable: checking function UpgradableProxy.loadImplementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.constructor (proxy_features line:893)
functions_writing_to_variable: found sstore:
{ sstore(position, _newProxyTo) }
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: constructor writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.setImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
{ sstore(position, _newProxyTo) }
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: setImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.setOwner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.isAContract (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.owner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.updateAndCall (proxy_features line:893)
functions_writing_to_variable: found sstore:
{ sstore(position, _newProxyTo) }
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateAndCall writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation) (proxy_features line:907)
functions_writing_to_variable: Identifier: IMPLEMENTATION_SLOT (proxy_features line:919)
get_value_assigned: IMPLEMENTATION_SLOT = keccak256(bytes)(matic.network.proxy.implementation)
functions_writing_to_variable: exp = OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: OWNER_SLOT = keccak256(bytes)(matic.network.proxy.owner) (proxy_features line:907)
functions_writing_to_variable: checking function UpgradableProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.loadOwner (proxy_features line:893)
functions_writing_to_variable: checking function UpgradableProxy.updateImplementation (proxy_features line:893)
functions_writing_to_variable: found sstore:
{ sstore(position, _newProxyTo) }
(proxy_features line:948)
_newProxyTo
functions_writing_to_variable: updateImplementation writes _newProxyTo to IMPLEMENTATION_SLOT w/ sstore (proxy_features line:954)
functions_writing_to_variable: checking function UpgradableProxy.implementation (proxy_features line:893)
has_compatibility_checks: dependencies: []
has_compatibility_checks: checking public function constructor
has_compatibility_checks: skipping private function setImplementation
has_compatibility_checks: checking public function updateAndCall
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(isAContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isAContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
has_compatibility_checks: IF node exp = _target == address(0)
require(bool,string)(success,string(returnData))
has_compatibility_checks: condition success
check_condition_from_expression: Identifier success
has_compatibility_checks: checking public function updateImplementation
require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_compatibility_checks: condition _newProxyTo != address(0x0)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition _newProxyTo != address(0x0)
require(bool,string)(isAContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_compatibility_checks: condition isAContract(_newProxyTo)
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_compatibility_checks: condition loadOwner() == msg.sender
has_compatibility_checks: IF node exp = _target == address(0)
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found external function: proxyType
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_newProxyTo != address(0x0),INVALID_PROXY_ADDRESS)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isAContract(_newProxyTo),DESTINATION_ADDRESS_IS_NOT_A_CONTRACT)
has_time_delay: (node.type) EXPRESSION
(Expression) ProxyUpdated(_newProxyTo,loadImplementation())
has_time_delay: (node.type) EXPRESSION
(Expression) setImplementation(_newProxyTo)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(loadOwner() == msg.sender,NOT_OWNER)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = IMPLEMENTATION_SLOT
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = OWNER_SLOT
has_time_delay: (node.type) IF
(Expression) _target == address(0)
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) RETURN
(Expression) _impl
has_time_delay: (node.type) RETURN
(Expression) false

Begin ValidatorShareProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin ValidatorShareProxy.find_delegatecall_in_exp_node

Found Expression Node: delegatedFwd(loadImplementation(),msg.data) (Slither line:2792)
Expression called: delegatedFwd
Type of call: tuple() (Slither line:2807)
Args:
loadImplementation()
msg.data

End ValidatorShareProxy.find_delegatecall_in_exp_node (Slither line:2848)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin ValidatorShareProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_dst'
Looking for corresponding Variable
Current function: delegatedFwd

Begin ValidatorShareProxy.find_delegate_variable_from_name
Searching for _dst (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking IMPLEMENTATION_SLOT (Slither line:1689)
Checking OWNER_SLOT (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)
Checking _dst (Slither line:1800)
_dst is a Parameter in ValidatorShareProxy.delegatedFwd (Slither line:1805)
CallExpression: delegatedFwd(loadImplementation(),msg.data) (Slither line:1819)
Found where delegatedFwd is called: delegatedFwd(loadImplementation(),msg.data) (Slither line:1832)
The value passed to parameter #0 is loadImplementation() (Slither line:1835)

Begin ValidatorShareProxy.find_delegate_from_call_exp

loadImplementation() (Slither line:1993)
called = loadImplementation (Slither line:2000)
Return node of function ValidatorShareProxy.loadImplementation(): RETURN Registry(super.loadImplementation()).getValidatorShareAddress() (Slither line:2031)
Encountered call expression at RETURN node: Registry(super.loadImplementation()).getValidatorShareAddress() (Slither line:2043)
Encountered member access expression: Registry(super.loadImplementation()).getValidatorShareAddress (Slither line:2047)

Begin ValidatorShareProxy.find_delegate_from_member_access

Expression: Registry(super.loadImplementation()).getValidatorShareAddress (Slither line:2348)
Registry(super.loadImplementation()) (Slither line:2361)
getValidatorShareAddress is a member of the contract type: Registry (Slither line:2406)
Looking for getValidatorShareAddress in Registry (Slither line:2513)
Found the function called getValidatorShareAddress (Slither line:2517)
Returns a variable of type address (Slither line:2522)
Found RETURN node: contractMap[VALIDATOR_SHARE] (Slither line:2534)
Return expression is an IndexAccess on variable contractMap (Slither line:2577)
contractMap is a StateVariable (Slither line:2582)

End ValidatorShareProxy.find_delegate_from_member_access (Slither line:2635)


End ValidatorShareProxy.find_delegate_from_call_exp (Slither line:2094)


End ValidatorShareProxy.find_delegate_variable_from_name (Slither line:1939)


End ValidatorShareProxy.find_delegatecall_in_asm (Slither line:1637)


End ValidatorShareProxy.is_proxy (Slither line:1476)


Begin ValidatorShareProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: ValidatorShareProxy 
ValidatorShareProxy is delegating to contractMap
Looking for setter (Slither line:1200)

Looking for setter in Registry (Slither line:1204)


Begin Registry.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address) returns() (Slither line:3117)
Checking function: updateContractMap(bytes32,address) returns() (Slither line:3117)
Visibility: external
require(bool,string)(msg.sender == address(governance),Only governance contract is authorized)
_assertGovernance()
ContractMapUpdated(_key,contractMap[_key],_address)
contractMap[_key] = _address
is an Assignment Operation (Slither line:3206)
Left side is an IndexAccess (Slither line:3235)

End Registry.find_setter_in_contract (Slither line:3315)


Implementation set by function: updateContractMap in contract: Registry (Slither line:1264)
Looking for getter (Slither line:1273)


Implementation retrieved by function: getValidatorShareAddress in contract: Registry (Slither line:1285)

End ValidatorShareProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: _address
impl_address_from_contract_call: StateVariable contractMap
impl_address_from_contract_call: getter is getValidatorShareAddress
getter.full_name = getValidatorShareAddress()
impl_address_from_contract_call: CallExpression delegatedFwd(loadImplementation(),msg.data)
impl_address_from_contract_call: arg is loadImplementation()
impl_address_from_contract_call: CallExpression loadImplementation()
impl_address_from_contract_call: CallExpression Registry(super.loadImplementation()).getValidatorShareAddress()
found MemberAccess calling getter in another contract: Registry(super.loadImplementation()).getValidatorShareAddress()
called: Registry(super.loadImplementation()).getValidatorShareAddress
found MemberAccess: Registry(super.loadImplementation()).getValidatorShareAddress
TypeConversion: Registry(super.loadImplementation())
find_registry_address_source: Registry(super.loadImplementation()).getValidatorShareAddress()
MemberAccess: Registry(super.loadImplementation()).getValidatorShareAddress
TypeConversion: Registry(super.loadImplementation())
CallExpression: super.loadImplementation()
Identifier: super.loadImplementation
Checking external function owner
Checking external function implementation
Checking public function transferOwnership
Checking public function updateImplementation
Checking public function updateAndCall
Checking external function proxyType
Checking external function implementation
Checking external function proxyType
Checking external function implementation
Checking external function fallback
functions_writing_to_variable: contractMap
functions_writing_to_variable: checking function Registry.removePredicate (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getChildChainAndStateSender (proxy_features line:893)
functions_writing_to_variable: checking function Registry.constructor (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.setImplementation (proxy_features line:893)
functions_writing_to_variable: checking function Registry.isTokenMapped (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getValidatorShareAddress (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.isAContract (proxy_features line:893)
functions_writing_to_variable: checking function Registry._assertGovernance (proxy_features line:893)
functions_writing_to_variable: checking function Registry.updateContractMap (proxy_features line:893)
functions_writing_to_variable: exp = ContractMapUpdated(_key,contractMap[_key],_address) (proxy_features line:904)
functions_writing_to_variable: exp = contractMap[_key] = _address (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: contractMap[_key] = _address (proxy_features line:907)
functions_writing_to_variable: IndexAccess: contractMap[_key] (proxy_features line:915)
functions_writing_to_variable: Identifier: contractMap (proxy_features line:919)
get_value_assigned: contractMap[_key] = _address
functions_writing_to_variable: exp = onlyGovernance() (proxy_features line:904)
functions_writing_to_variable: updateContractMap writes _address to contractMap (proxy_features line:924)
functions_writing_to_variable: checking function ValidatorShareProxy.owner (proxy_features line:893)
functions_writing_to_variable: checking function Registry.isTokenMappedAndIsErc721 (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getWethTokenAddress (proxy_features line:893)
functions_writing_to_variable: checking function Registry.constructor (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.setOwner (proxy_features line:893)
functions_writing_to_variable: checking function Registry.mapToken (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.loadOwner (proxy_features line:893)
functions_writing_to_variable: checking function Registry.isTokenMappedAndGetPredicate (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getDepositManagerAddress (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.proxyType (proxy_features line:893)
functions_writing_to_variable: checking function Registry.addErc20Predicate (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getStakeManagerAddress (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.updateImplementation (proxy_features line:893)
functions_writing_to_variable: checking function Registry.isChildTokenErc721 (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function Registry.addErc721Predicate (proxy_features line:893)
functions_writing_to_variable: checking function Registry.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getSlashingManagerAddress (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function Registry.addPredicate (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.updateAndCall (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.loadImplementation (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.loadImplementation (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function Registry.getWithdrawManagerAddress (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.delegatedFwd (proxy_features line:893)
functions_writing_to_variable: checking function ValidatorShareProxy.fallback (proxy_features line:893)
has_compatibility_checks: dependencies: ['_address']
has_compatibility_checks: checking external function updateContractMap
require(bool,string)(msg.sender == address(governance),Only governance contract is authorized)
has_compatibility_checks: condition msg.sender == address(governance)
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(sub(gas(), 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found fallback
Found external function: owner
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == address(governance),Only governance contract is authorized)
has_time_delay: (node.type) EXPRESSION
(Expression) _assertGovernance()
has_time_delay: (node.type) EXPRESSION
(Expression) ContractMapUpdated(_key,contractMap[_key],_address)
has_time_delay: (node.type) EXPRESSION
(Expression) contractMap[_key] = _address
has_time_delay: (node.type) EXPRESSION
(Expression) onlyGovernance()

Begin ValidatorShareFactory.is_proxy (Slither line:1425)


End ValidatorShareFactory.is_proxy (Slither line:1428)


Begin ValidatorShareFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: ValidatorShareFactory 

End ValidatorShareFactory.is_upgradeable_proxy (Slither line:1407)


Begin RootChainable.is_proxy (Slither line:1425)


End RootChainable.is_proxy (Slither line:1428)


Begin RootChainable.is_upgradeable_proxy (Slither line:1136)

Checking contract: RootChainable 

End RootChainable.is_upgradeable_proxy (Slither line:1407)


Begin StakeManagerStorage.is_proxy (Slither line:1425)


End StakeManagerStorage.is_proxy (Slither line:1428)


Begin StakeManagerStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakeManagerStorage 

End StakeManagerStorage.is_upgradeable_proxy (Slither line:1407)


Begin StakeManagerStorageExtension.is_proxy (Slither line:1425)


End StakeManagerStorageExtension.is_proxy (Slither line:1428)


Begin StakeManagerStorageExtension.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakeManagerStorageExtension 

End StakeManagerStorageExtension.is_upgradeable_proxy (Slither line:1407)


Begin StakeManagerExtension.is_proxy (Slither line:1425)


End StakeManagerExtension.is_proxy (Slither line:1428)


Begin StakeManagerExtension.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakeManagerExtension 

End StakeManagerExtension.is_upgradeable_proxy (Slither line:1407)


Begin StakeManager.is_proxy (Slither line:1425)


End StakeManager.is_proxy (Slither line:1428)


Begin StakeManager.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakeManager 

End StakeManager.is_upgradeable_proxy (Slither line:1407)

