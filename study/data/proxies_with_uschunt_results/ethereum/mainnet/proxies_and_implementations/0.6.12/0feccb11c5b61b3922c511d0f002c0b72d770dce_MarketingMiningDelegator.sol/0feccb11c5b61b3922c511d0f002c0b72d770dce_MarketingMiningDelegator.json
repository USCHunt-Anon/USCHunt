{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "MarketingMiningDelegator (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies_and_implementations/0.6.12/0feccb11c5b61b3922c511d0f002c0b72d770dce_MarketingMiningDelegator.sol/0feccb11c5b61b3922c511d0f002c0b72d770dce_MarketingMiningDelegator.sol#1418-1899)",
        "elements": [],
        "description": "MarketingMiningDelegator (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies_and_implementations/0.6.12/0feccb11c5b61b3922c511d0f002c0b72d770dce_MarketingMiningDelegator.sol/0feccb11c5b61b3922c511d0f002c0b72d770dce_MarketingMiningDelegator.sol#1418-1899) is an upgradeable proxy.\nimplementation was found in a different contract.\nimplementation is an address state variable.\n uses Inherited Storage\nMissing compatibility check in MarketingMiningDelegator._setImplementation(address,bool,bytes)\nCan toggle delegatecall on/off: condition: msg.value > 0\n",
        "id": "7aee00cea14dd2f3001a886526411b0ebf6328624ddd39b63369d940ea9229ea",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "DelegationStorage.implementation",
          "impl_address_setter": "MarketingMiningDelegator._setImplementation(address,bool,bytes)",
          "impl_address_getter": "not found",
          "impl_address_location": "DelegationStorage (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies_and_implementations/0.6.12/0feccb11c5b61b3922c511d0f002c0b72d770dce_MarketingMiningDelegator.sol/0feccb11c5b61b3922c511d0f002c0b72d770dce_MarketingMiningDelegator.sol#10-15)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "inherited_storage": true,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "MarketingMiningDelegator._setImplementation(address,bool,bytes)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "can_toggle_delegatecall": true,
          "toggle_delegatecall_condition": "!msg.value > 0",
          "toggle_alternative_logic": "None",
          "immutable_functions": {
            "other": [
              "initialize(IERC20,IInvitation,uint256,uint256,uint256,address,address,address)",
              "add(uint256,IERC20,bool)",
              "setAllocationPoint(uint256,uint256,bool)",
              "setSHDPerBlock(uint256,bool)",
              "setIsDepositAvailable(bool)",
              "setIsRevenueWithdrawable(bool)",
              "massUpdatePools()",
              "addAvailableDividend(uint256,bool)",
              "updatePoolDividend(uint256)",
              "depositETH(uint256)",
              "withdrawETH(uint256,uint256)",
              "deposit(uint256,uint256)",
              "withdraw(uint256,uint256)",
              "getMultiplier(uint256,uint256)",
              "pendingSHARD(uint256,address)",
              "pendingSHARDByPids(uint256[],address)",
              "getDepositWeight(uint256)",
              "getPoolLength()",
              "getPoolInfo(uint256)",
              "getPagePoolInfo(uint256,uint256)",
              "getUserInfoByPids(uint256[],address)",
              "setDividendWeight(uint256,uint256)",
              "setDeveloperDAOFund(address)",
              "setTokenAmountLimit(uint256,uint256)",
              "setTokenAmountLimitFeeRate(uint256,uint256)",
              "setContracSenderFeeRate(uint256,uint256)",
              "setStartBlock(uint256)",
              "transferAdmin(address)",
              "setMarketingFund(address)",
              "owner()",
              "renounceOwnership()",
              "transferOwnership(address)",
              "_setImplementation(address,bool,bytes)",
              "_setImplementation(address,bool,bytes)",
              "delegateToImplementation(bytes)",
              "delegateToViewImplementation(bytes)",
              "add(uint256,IERC20,bool)",
              "setAllocationPoint(uint256,uint256,bool)",
              "setSHDPerBlock(uint256,bool)",
              "setIsDepositAvailable(bool)",
              "setIsRevenueWithdrawable(bool)",
              "setStartBlock(uint256)",
              "massUpdatePools()",
              "addAvailableDividend(uint256,bool)",
              "updatePoolDividend(uint256)",
              "depositETH(uint256)",
              "deposit(uint256,uint256)",
              "withdraw(uint256,uint256)",
              "withdrawETH(uint256,uint256)",
              "setDeveloperDAOFund(address)",
              "setDividendWeight(uint256,uint256)",
              "setTokenAmountLimit(uint256,uint256)",
              "setTokenAmountLimitFeeRate(uint256,uint256)",
              "setContracSenderFeeRate(uint256,uint256)",
              "transferAdmin(address)",
              "setMarketingFund(address)",
              "pendingSHARD(uint256,address)",
              "pendingSHARDByPids(uint256[],address)",
              "getPoolLength()",
              "getMultiplier(uint256,uint256)",
              "getPoolInfo(uint256)",
              "getPagePoolInfo(uint256,uint256)",
              "getUserInfoByPids(uint256[],address)"
            ]
          }
        }
      }
    ]
  }
}