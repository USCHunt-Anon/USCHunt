
Begin Owned.is_proxy (Slither line:1425)


End Owned.is_proxy (Slither line:1428)


Begin Owned.is_upgradeable_proxy (Slither line:1136)

Checking contract: Owned 

End Owned.is_upgradeable_proxy (Slither line:1407)


Begin Proxyable.is_proxy (Slither line:1425)


End Proxyable.is_proxy (Slither line:1428)


Begin Proxyable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxyable 

End Proxyable.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: target.setMessageSender(msg.sender) (Slither line:2802)
Expression called: target.setMessageSender
Type of call: tuple() (Slither line:2817)
Args:
msg.sender

End Proxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_ptr := mload(0x40) (Slither line:1576)
    calldatacopy(free_ptr, 0, calldatasize()) (Slither line:1576)
    let result := call(gas(), sload(target_slot), callvalue(), free_ptr, calldatasize(), 0, 0) (Slither line:1576)
    returndatacopy(free_ptr, 0, returndatasize()) (Slither line:1576)
    if iszero(result) (Slither line:1576)
    { (Slither line:1576)
        revert(free_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    return(free_ptr, returndatasize()) (Slither line:1576)
} (Slither line:1576)

End Proxy.find_delegatecall_in_asm (Slither line:1637)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_ptr := mload(0x40) (Slither line:1576)
    calldatacopy(free_ptr, 0, calldatasize()) (Slither line:1576)
    let result := call(gas(), sload(target_slot), callvalue(), free_ptr, calldatasize(), 0, 0) (Slither line:1576)

Found call in inline asm (Slither line:1622)
Destination param is called 'target_slot'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for target_slot (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking nominatedOwner (Slither line:1689)
Checking target (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)

Begin Proxy.find_delegate_variable_from_name
Searching for target (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking nominatedOwner (Slither line:1689)
Checking target (Slither line:1689)
target is a State Variable in contract Proxy (Slither line:1693)

End Proxy.find_delegate_variable_by_name


End Proxy.find_delegate_variable_from_name (Slither line:1949)


End Proxy.find_delegatecall_in_asm (Slither line:1637)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 
Proxy is delegating to target
Looking for setter (Slither line:1200)


Begin Proxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: setTarget(Proxyable) returns() (Slither line:3127)
Visibility: external
_onlyOwner()
onlyOwner()
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
target = _target
is an Assignment Operation (Slither line:3216)

End Proxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: setTarget in contract: Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Proxy.find_getter_in_contract (Slither line:2974)

target is a Variable object
_target
Checking function: constructor (Slither line:2988)
Checking function: nominateNewOwner (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
Checking function: _onlyOwner (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: setTarget (Slither line:2988)
Checking function: _emit (Slither line:2988)
Checking function: fallback (Slither line:2988)

End Proxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in Proxy (Slither line:1305)
Checking for target at slot 2 in contract Proxyable (Slither line:1355)
Found proxy at slot 2 in contract Proxyable (Slither line:1362)
Checking for proxy at slot 2 in contract ProxyERC20 (Slither line:1355)
Found target at slot 2 in contract ProxyERC20 (Slither line:1362)

Begin ProxyERC20.find_getter_in_contract (Slither line:2974)

target is a Variable object
_target
Checking function: constructor (Slither line:2988)
Checking function: setTarget (Slither line:2988)
Checking function: _emit (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: nominateNewOwner (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
Checking function: _onlyOwner (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: name (Slither line:2988)
name returns string variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).name() (Slither line:3028)
Checking function: symbol (Slither line:2988)
symbol returns string variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).symbol() (Slither line:3028)
Checking function: decimals (Slither line:2988)
decimals returns uint8 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).decimals() (Slither line:3028)
Checking function: totalSupply (Slither line:2988)
totalSupply returns uint256 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).totalSupply() (Slither line:3028)
Checking function: balanceOf (Slither line:2988)
balanceOf returns uint256 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).balanceOf(account) (Slither line:3028)
Checking function: allowance (Slither line:2988)
allowance returns uint256 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).allowance(owner,spender) (Slither line:3028)
Checking function: transfer (Slither line:2988)
transfer returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: approve (Slither line:2988)
approve returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: transferFrom (Slither line:2988)
transferFrom returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)

End ProxyERC20.find_getter_in_contract (Slither line:3083)

Checking external function nominateNewOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function acceptOwnership
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nominatedOwner,You must be nominated before you can accept ownership)
Checking external function setTarget
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function nominateNewOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function acceptOwnership
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nominatedOwner,You must be nominated before you can accept ownership)
Checking external function setTarget
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function _emit
Checking external function fallback
functions_writing_to_variable: target
functions_writing_to_variable: checking function Proxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function Proxy._emit (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.setTarget (proxy_features line:898)
functions_writing_to_variable: exp = target = _target (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: target = _target (proxy_features line:912)
functions_writing_to_variable: Identifier: target (proxy_features line:924)
get_value_assigned: target = _target
functions_writing_to_variable: exp = TargetUpdated(_target) (proxy_features line:909)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = _onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == owner,Only the contract owner may perform this action) (proxy_features line:909)
functions_writing_to_variable: setTarget writes _target to target (proxy_features line:929)
functions_writing_to_variable: checking function Proxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.acceptOwnership (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.nominateNewOwner (proxy_features line:898)
functions_writing_to_variable: checking function Proxy._onlyOwner (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.constructor (proxy_features line:898)
has_compatibility_checks: dependencies: ['_target']
has_compatibility_checks: checking external function setTarget
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_compatibility_checks: condition msg.sender == owner
has_compatibility_checks: _target is UserDefinedType: Proxyable
has_compatibility_checks: _target is Contract type: Proxyable
Found public function: constructor
Found external function: nominateNewOwner
has_time_delay: (node.type) EXPRESSION
(Expression) _onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_time_delay: (node.type) EXPRESSION
(Expression) target = _target
has_time_delay: (node.type) EXPRESSION
(Expression) TargetUpdated(_target)

Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin ProxyERC20.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin ProxyERC20.find_delegatecall_in_exp_node

Found Expression Node: target.setMessageSender(msg.sender) (Slither line:2802)
Expression called: target.setMessageSender
Type of call: tuple() (Slither line:2817)
Args:
msg.sender

End ProxyERC20.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin ProxyERC20.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_ptr := mload(0x40) (Slither line:1576)
    calldatacopy(free_ptr, 0, calldatasize()) (Slither line:1576)
    let result := call(gas(), sload(target_slot), callvalue(), free_ptr, calldatasize(), 0, 0) (Slither line:1576)
    returndatacopy(free_ptr, 0, returndatasize()) (Slither line:1576)
    if iszero(result) (Slither line:1576)
    { (Slither line:1576)
        revert(free_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    return(free_ptr, returndatasize()) (Slither line:1576)
} (Slither line:1576)

End ProxyERC20.find_delegatecall_in_asm (Slither line:1637)


Begin ProxyERC20.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_ptr := mload(0x40) (Slither line:1576)
    calldatacopy(free_ptr, 0, calldatasize()) (Slither line:1576)
    let result := call(gas(), sload(target_slot), callvalue(), free_ptr, calldatasize(), 0, 0) (Slither line:1576)

Found call in inline asm (Slither line:1622)
Destination param is called 'target_slot'
Looking for corresponding Variable
Current function: fallback

Begin ProxyERC20.find_delegate_variable_from_name
Searching for target_slot (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking nominatedOwner (Slither line:1689)
Checking target (Slither line:1689)

Searching Local Variables (Slither line:1698)

Searching Parameter Variables (Slither line:1797)

Begin ProxyERC20.find_delegate_variable_from_name
Searching for target (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking nominatedOwner (Slither line:1689)
Checking target (Slither line:1689)
target is a State Variable in contract Proxy (Slither line:1693)

End ProxyERC20.find_delegate_variable_by_name


End ProxyERC20.find_delegate_variable_from_name (Slither line:1949)


End ProxyERC20.find_delegatecall_in_asm (Slither line:1637)


End ProxyERC20.is_proxy (Slither line:1476)


Begin ProxyERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyERC20 
ProxyERC20 is delegating to target
Looking for setter (Slither line:1200)

Looking for setter in Proxy (Slither line:1204)


Begin Proxy.find_setter_in_contract (Slither line:3119)

Expression: _target (Slither line:3122)
Checking function: constructor(address) returns() (Slither line:3127)
Checking function: setTarget(Proxyable) returns() (Slither line:3127)
Visibility: external
_onlyOwner()
onlyOwner()
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
target = _target
is an Assignment Operation (Slither line:3216)
_target

End Proxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: setTarget in contract: Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Proxy.find_getter_in_contract (Slither line:2974)

target is a Variable object
_target
Checking function: constructor (Slither line:2988)
Checking function: nominateNewOwner (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
Checking function: _onlyOwner (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: setTarget (Slither line:2988)
Checking function: _emit (Slither line:2988)
Checking function: fallback (Slither line:2988)

End Proxy.find_getter_in_contract (Slither line:3083)


Begin ProxyERC20.find_getter_in_contract (Slither line:2974)

target is a Variable object
_target
Checking function: constructor (Slither line:2988)
Checking function: setTarget (Slither line:2988)
Checking function: _emit (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: nominateNewOwner (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
Checking function: _onlyOwner (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: name (Slither line:2988)
name returns string variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).name() (Slither line:3028)
Checking function: symbol (Slither line:2988)
symbol returns string variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).symbol() (Slither line:3028)
Checking function: decimals (Slither line:2988)
decimals returns uint8 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).decimals() (Slither line:3028)
Checking function: totalSupply (Slither line:2988)
totalSupply returns uint256 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).totalSupply() (Slither line:3028)
Checking function: balanceOf (Slither line:2988)
balanceOf returns uint256 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).balanceOf(account) (Slither line:3028)
Checking function: allowance (Slither line:2988)
allowance returns uint256 variable  (Slither line:3008)
RETURN node expression: IERC20(address(target)).allowance(owner,spender) (Slither line:3028)
Checking function: transfer (Slither line:2988)
transfer returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: approve (Slither line:2988)
approve returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: transferFrom (Slither line:2988)
transferFrom returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)

End ProxyERC20.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in ProxyERC20 (Slither line:1305)
or in Proxy (Slither line:1319)
Checking for target at slot 2 in contract Proxyable (Slither line:1355)
Found proxy at slot 2 in contract Proxyable (Slither line:1362)
Checking for proxy at slot 2 in contract Proxy (Slither line:1355)
Found target at slot 2 in contract Proxy (Slither line:1362)

Begin Proxy.find_getter_in_contract (Slither line:2974)

target is a Variable object
_target
Checking function: constructor (Slither line:2988)
Checking function: nominateNewOwner (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
Checking function: _onlyOwner (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: setTarget (Slither line:2988)
Checking function: _emit (Slither line:2988)
Checking function: fallback (Slither line:2988)

End Proxy.find_getter_in_contract (Slither line:3083)

impl_address_from_contract_call: _target
impl_address_from_contract_call: StateVariable target
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression target.setMessageSender(msg.sender)
Checking external function name
Checking external function symbol
Checking external function decimals
Checking external function totalSupply
Checking external function balanceOf
Checking external function allowance
Checking external function transfer
Checking external function approve
Checking external function transferFrom
Checking external function setTarget
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function _emit
Checking external function nominateNewOwner
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
Checking external function acceptOwnership
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == nominatedOwner,You must be nominated before you can accept ownership)
Checking public function name
Checking public function symbol
Checking public function decimals
Checking public function totalSupply
Checking public function balanceOf
Checking public function allowance
Checking public function transfer
Checking public function approve
Checking public function transferFrom
Checking external function fallback
functions_writing_to_variable: target
functions_writing_to_variable: checking function ProxyERC20.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.balanceOf (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20._emit (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.totalSupply (proxy_features line:898)
functions_writing_to_variable: checking function Proxy._onlyOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.nominateNewOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.allowance (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.fallback (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.transfer (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.balanceOf (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.approve (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.acceptOwnership (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.approve (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.name (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.totalSupply (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.setTarget (proxy_features line:898)
functions_writing_to_variable: exp = target = _target (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: target = _target (proxy_features line:912)
functions_writing_to_variable: Identifier: target (proxy_features line:924)
get_value_assigned: target = _target
functions_writing_to_variable: exp = TargetUpdated(_target) (proxy_features line:909)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = _onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == owner,Only the contract owner may perform this action) (proxy_features line:909)
functions_writing_to_variable: setTarget writes _target to target (proxy_features line:929)
functions_writing_to_variable: checking function ProxyERC20.allowance (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.transferFrom (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.symbol (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.nominateNewOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.name (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20._onlyOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.symbol (proxy_features line:898)
functions_writing_to_variable: checking function Proxy._emit (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.decimals (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.setTarget (proxy_features line:898)
functions_writing_to_variable: exp = target = _target (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: target = _target (proxy_features line:912)
functions_writing_to_variable: Identifier: target (proxy_features line:924)
get_value_assigned: target = _target
functions_writing_to_variable: exp = TargetUpdated(_target) (proxy_features line:909)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = _onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == owner,Only the contract owner may perform this action) (proxy_features line:909)
functions_writing_to_variable: setTarget writes _target to target (proxy_features line:929)
functions_writing_to_variable: checking function ProxyERC20.transferFrom (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.acceptOwnership (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.decimals (proxy_features line:898)
functions_writing_to_variable: checking function ProxyERC20.transfer (proxy_features line:898)
has_compatibility_checks: dependencies: ['_target', '_target']
has_compatibility_checks: checking external function setTarget
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_compatibility_checks: condition msg.sender == owner
has_compatibility_checks: _target is UserDefinedType: Proxyable
has_compatibility_checks: _target is Contract type: Proxyable
has_compatibility_checks: checking external function setTarget
has_compatibility_checks: _target is UserDefinedType: Proxyable
has_compatibility_checks: _target is Contract type: Proxyable
require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_compatibility_checks: condition msg.sender == owner
Found external function: name
has_time_delay: (node.type) EXPRESSION
(Expression) _onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == owner,Only the contract owner may perform this action)
has_time_delay: (node.type) EXPRESSION
(Expression) target = _target
has_time_delay: (node.type) EXPRESSION
(Expression) TargetUpdated(_target)
