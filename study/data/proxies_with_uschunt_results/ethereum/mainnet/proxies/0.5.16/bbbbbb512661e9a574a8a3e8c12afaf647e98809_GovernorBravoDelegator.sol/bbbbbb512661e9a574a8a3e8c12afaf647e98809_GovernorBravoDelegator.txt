
Begin GovernorBravoEvents.is_proxy (Slither line:1425)


End GovernorBravoEvents.is_proxy (Slither line:1428)


Begin GovernorBravoEvents.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernorBravoEvents 

End GovernorBravoEvents.is_upgradeable_proxy (Slither line:1407)


Begin GovernorBravoDelegatorStorage.is_proxy (Slither line:1425)


End GovernorBravoDelegatorStorage.is_proxy (Slither line:1428)


Begin GovernorBravoDelegatorStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernorBravoDelegatorStorage 

End GovernorBravoDelegatorStorage.is_upgradeable_proxy (Slither line:1407)


Begin GovernorBravoDelegateStorageV1.is_proxy (Slither line:1425)


End GovernorBravoDelegateStorageV1.is_proxy (Slither line:1428)


Begin GovernorBravoDelegateStorageV1.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernorBravoDelegateStorageV1 

End GovernorBravoDelegateStorageV1.is_upgradeable_proxy (Slither line:1407)


Begin TimelockInterface.is_proxy (Slither line:1425)


End TimelockInterface.is_proxy (Slither line:1428)


Begin TimelockInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: TimelockInterface 

End TimelockInterface.is_upgradeable_proxy (Slither line:1407)


Begin CompInterface.is_proxy (Slither line:1425)


End CompInterface.is_proxy (Slither line:1428)


Begin CompInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: CompInterface 

End CompInterface.is_upgradeable_proxy (Slither line:1407)


Begin GovernorAlpha.is_proxy (Slither line:1425)


End GovernorAlpha.is_proxy (Slither line:1428)


Begin GovernorAlpha.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernorAlpha 

End GovernorAlpha.is_upgradeable_proxy (Slither line:1407)


Begin GovernorBravoDelegator.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin GovernorBravoDelegator.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_mem_ptr := mload(0x40) (Slither line:1576)
    returndatacopy(free_mem_ptr, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End GovernorBravoDelegator.find_delegatecall_in_asm (Slither line:1637)


Begin GovernorBravoDelegator.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let free_mem_ptr := mload(0x40) (Slither line:1576)
    returndatacopy(free_mem_ptr, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(free_mem_ptr, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End GovernorBravoDelegator.find_delegatecall_in_asm (Slither line:1637)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End GovernorBravoDelegator.is_proxy (Slither line:1476)


Begin GovernorBravoDelegator.is_upgradeable_proxy (Slither line:1136)

Checking contract: GovernorBravoDelegator 
GovernorBravoDelegator is delegating to implementation
Looking for setter (Slither line:1200)

Looking for setter in GovernorBravoDelegatorStorage (Slither line:1204)


Begin GovernorBravoDelegatorStorage.find_setter_in_contract (Slither line:3119)


End GovernorBravoDelegatorStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in GovernorBravoDelegatorStorage 
Looking in GovernorBravoDelegator (Slither line:1213)

Begin GovernorBravoDelegator.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address,address,address,address,uint256,uint256,uint256) returns() (Slither line:3127)
Checking function: _setImplementation(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(implementation_ != address(0),GovernorBravoDelegator::_setImplementation: invalid implementation address)
NewImplementation(oldImplementation,implementation)
require(bool,string)(msg.sender == admin,GovernorBravoDelegator::_setImplementation: admin only)
implementation = implementation_
is an Assignment Operation (Slither line:3216)

End GovernorBravoDelegator.find_setter_in_contract (Slither line:3345)


Implementation set by function: _setImplementation in contract: GovernorBravoDelegator (Slither line:1264)
Looking for getter (Slither line:1273)


Begin GovernorBravoDelegatorStorage.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
implementation_

End GovernorBravoDelegatorStorage.find_getter_in_contract (Slither line:3083)


Begin GovernorBravoDelegator.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
implementation_
Checking function: constructor (Slither line:2988)
Checking function: _setImplementation (Slither line:2988)
Checking function: delegateTo (Slither line:2988)
Checking function: fallback (Slither line:2988)

End GovernorBravoDelegator.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in GovernorBravoDelegator (Slither line:1305)
or in GovernorBravoDelegatorStorage (Slither line:1319)

Begin GovernorBravoDelegateStorageV1.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
implementation_

End GovernorBravoDelegateStorageV1.find_getter_in_contract (Slither line:3083)


End GovernorBravoDelegator.is_upgradeable_proxy (Slither line:1332)

impl_address_from_contract_call: implementation_
impl_address_from_contract_call: StateVariable implementation
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression implementation.delegatecall(msg.data)
Checking public function _setImplementation
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == admin,GovernorBravoDelegator::_setImplementation: admin only)
Checking public function _setImplementation
Found 'msg.sender ==' in expression: require(bool,string)(msg.sender == admin,GovernorBravoDelegator::_setImplementation: admin only)
Checking external function fallback
functions_writing_to_variable: implementation
functions_writing_to_variable: checking function GovernorBravoDelegator.delegateTo (proxy_features line:898)
functions_writing_to_variable: checking function GovernorBravoDelegator.constructor (proxy_features line:898)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: constructor writes implementation_ to implementation (proxy_features line:1013)
functions_writing_to_variable: checking function GovernorBravoDelegator.fallback (proxy_features line:898)
functions_writing_to_variable: checking function GovernorBravoDelegator._setImplementation (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(msg.sender == admin,GovernorBravoDelegator::_setImplementation: admin only) (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(implementation_ != address(0),GovernorBravoDelegator::_setImplementation: invalid implementation address) (proxy_features line:909)
functions_writing_to_variable: exp = oldImplementation = implementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldImplementation = implementation (proxy_features line:912)
functions_writing_to_variable: exp = implementation = implementation_ (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: implementation = implementation_ (proxy_features line:912)
functions_writing_to_variable: Identifier: implementation (proxy_features line:924)
get_value_assigned: implementation = implementation_
functions_writing_to_variable: exp = NewImplementation(oldImplementation,implementation) (proxy_features line:909)
functions_writing_to_variable: _setImplementation writes implementation_ to implementation (proxy_features line:929)
has_compatibility_checks: dependencies: ['implementation_', 'implementation_']
has_compatibility_checks: skipping constructor
has_compatibility_checks: checking public function _setImplementation
require(bool,string)(implementation_ != address(0),GovernorBravoDelegator::_setImplementation: invalid implementation address)
has_compatibility_checks: condition implementation_ != address(0)
check_condition_from_expression: condition implementation_ != address(0)
require(bool,string)(msg.sender == admin,GovernorBravoDelegator::_setImplementation: admin only)
has_compatibility_checks: condition msg.sender == admin
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: (success) = implementation.delegatecall(msg.data)
Found public function: constructor
Found public function: _setImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(implementation_ != address(0),GovernorBravoDelegator::_setImplementation: invalid implementation address)
has_time_delay: (node.type) EXPRESSION
(Expression) NewImplementation(oldImplementation,implementation)
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldImplementation = implementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(msg.sender == admin,GovernorBravoDelegator::_setImplementation: admin only)
has_time_delay: (node.type) EXPRESSION
(Expression) implementation = implementation_
