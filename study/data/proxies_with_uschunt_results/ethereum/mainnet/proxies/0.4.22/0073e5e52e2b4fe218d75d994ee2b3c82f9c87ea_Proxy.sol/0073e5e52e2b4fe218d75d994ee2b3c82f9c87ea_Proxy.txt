
Begin Proxy.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking target (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: target (Slither line:1719)
Identifier value: target (Slither line:1725)
target is a State Variable in contract Proxy (Slither line:1730)

End Proxy.find_delegate_variable_by_name


End Proxy.find_delegatecall_in_asm (Slither line:1637)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 
Proxy is delegating to target
Looking for setter (Slither line:1200)


Begin Proxy.find_setter_in_contract (Slither line:3119)

Checking function: Proxy() returns() (Slither line:3127)
Checking function: setTarget(address) returns() (Slither line:3127)
Visibility: public
ProxyTargetSet(_target)
require(bool)(msg.sender == owner)
target = _target
is an Assignment Operation (Slither line:3216)

End Proxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: setTarget in contract: Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Proxy.find_getter_in_contract (Slither line:2974)

target is a Variable object
_target
Checking function: Proxy (Slither line:2988)
Checking function: setTarget (Slither line:2988)
Checking function: fallback (Slither line:2988)

End Proxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in Proxy (Slither line:1305)

End Proxy.is_upgradeable_proxy (Slither line:1407)

Checking public function setTarget
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function setTarget
Found 'msg.sender ==' in expression: require(bool)(msg.sender == owner)
Checking public function fallback
functions_writing_to_variable: target
functions_writing_to_variable: checking function Proxy.setTarget (proxy_features line:898)
functions_writing_to_variable: exp = target = _target (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: target = _target (proxy_features line:912)
functions_writing_to_variable: Identifier: target (proxy_features line:924)
get_value_assigned: target = _target
functions_writing_to_variable: exp = ProxyTargetSet(_target) (proxy_features line:909)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(msg.sender == owner) (proxy_features line:909)
functions_writing_to_variable: setTarget writes _target to target (proxy_features line:929)
functions_writing_to_variable: checking function Proxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function Proxy.Proxy (proxy_features line:898)
has_compatibility_checks: dependencies: ['_target']
has_compatibility_checks: checking public function setTarget
require(bool)(msg.sender == owner)
has_compatibility_checks: condition msg.sender == owner
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = target
Found public function: Proxy
Found public function: setTarget
has_time_delay: (node.type) EXPRESSION
(Expression) ProxyTargetSet(_target)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == owner)
has_time_delay: (node.type) EXPRESSION
(Expression) target = _target
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
