
Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin LibRichErrorsV06.is_proxy (Slither line:1425)


End LibRichErrorsV06.is_proxy (Slither line:1428)


Begin LibRichErrorsV06.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibRichErrorsV06 

End LibRichErrorsV06.is_upgradeable_proxy (Slither line:1407)


Begin LibBytesRichErrorsV06.is_proxy (Slither line:1425)


End LibBytesRichErrorsV06.is_proxy (Slither line:1428)


Begin LibBytesRichErrorsV06.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibBytesRichErrorsV06 

End LibBytesRichErrorsV06.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin SafeERC20.is_proxy (Slither line:1425)


End SafeERC20.is_proxy (Slither line:1428)


Begin SafeERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeERC20 

End SafeERC20.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin LibProxyRichErrors.is_proxy (Slither line:1425)


End LibProxyRichErrors.is_proxy (Slither line:1428)


Begin LibProxyRichErrors.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibProxyRichErrors 

End LibProxyRichErrors.is_upgradeable_proxy (Slither line:1407)


Begin LibBytesV06.is_proxy (Slither line:1425)


End LibBytesV06.is_proxy (Slither line:1428)


Begin LibBytesV06.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibBytesV06 

End LibBytesV06.is_upgradeable_proxy (Slither line:1407)


Begin IZeroEx.is_proxy (Slither line:1425)


End IZeroEx.is_proxy (Slither line:1428)


Begin IZeroEx.is_upgradeable_proxy (Slither line:1136)

Checking contract: IZeroEx 

End IZeroEx.is_upgradeable_proxy (Slither line:1407)


Begin MistXProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin MistXProxy.find_delegatecall_in_exp_node

Found Expression Node: impl = _implementationOverrides[signature] (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)

End MistXProxy.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

getFunctionImplementation(selector) (Slither line:2749)

Begin MistXProxy.find_delegate_from_call_exp

getFunctionImplementation(selector) (Slither line:2003)
called = getFunctionImplementation (Slither line:2010)
AssignmentOperation: impl = _implementationOverrides[signature] (Slither line:2117)
AssignmentOperation: impl = _zeroEx.getFunctionImplementation(signature) (Slither line:2117)
CallExpression: _zeroEx.getFunctionImplementation (Slither line:2123)

Begin MistXProxy.find_delegate_from_call_exp

_zeroEx.getFunctionImplementation(signature) (Slither line:2003)
called = _zeroEx.getFunctionImplementation (Slither line:2010)
Called member of _zeroEx (Slither line:2017)

Begin MistXProxy.find_delegate_from_member_access

Expression: _zeroEx.getFunctionImplementation(signature) (Slither line:2358)
_zeroEx (Slither line:2371)
getFunctionImplementation is a member of the contract type: IZeroEx (Slither line:2416)
Which is an interface (Slither line:2420)
Could not find a contract that inherits IZeroEx (Slither line:2441)

End MistXProxy.find_delegate_from_call_exp (Slither line:2019)

getFunctionImplementation returns a variable of type address   called impl (Slither line:2193)
Return value is LocalVariable: impl (Slither line:2266)
Return expression: _zeroEx.getFunctionImplementation(signature) (Slither line:2270)
CallExpression: _zeroEx.getFunctionImplementation (Slither line:2274)
MemberAccess: _zeroEx.getFunctionImplementation (Slither line:2286)

Begin MistXProxy.find_delegate_from_member_access

Expression: _zeroEx.getFunctionImplementation (Slither line:2358)
_zeroEx (Slither line:2371)
getFunctionImplementation is a member of the contract type: IZeroEx (Slither line:2416)
Which is an interface (Slither line:2420)
Could not find a contract that inherits IZeroEx (Slither line:2441)

End MistXProxy.find_delegate_from_call_exp (Slither line:2328)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End MistXProxy.is_proxy (Slither line:1476)


Begin MistXProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: MistXProxy 
Local Variable: impl (Slither line:1164)
MistXProxy is delegating to impl
Looking for setter (Slither line:1200)


Begin MistXProxy.find_setter_in_contract (Slither line:3119)

Expression: getFunctionImplementation(selector) (Slither line:3122)
Checking function: constructor(IZeroEx,address,address) returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)
Checking function: optimalSwap(bytes,address,uint256) returns(bytes) (Slither line:3127)
Visibility: external
revert(uint256,uint256)(32 + returndata,returndata_size__verifyCallResult_asm_0)
require(bool,string)(success,Unable to send ETH)
(success) = toAddress.call{value: amount}()
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
revert(string)(errorMessage)
revert(uint256,uint256)(errorData + 0x20,mload(uint256)(errorData))
index += 32
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,b.length,index + 4))
token.safeTransferFrom(fromAddress,toAddress,amount)
abi.encodeWithSelector(bytes4(keccak256(bytes)(NotImplementedError(bytes4))),selector)
abi.encodeWithSelector(INVALID_BYTE_OPERATION_ERROR_SELECTOR,errorCode,offset,required)
result
require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)
result = mload(uint256)(b + index)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
result = result & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
revert(uint256,uint256)(data + 32,mload(uint256)(data))
_callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))
functionCallWithValue(target,data,0,errorMessage)
_sendERC20(IERC20(token),msg.sender,_beneficiary,amount)
_payFees(feeToken,fee)
_sendETH(_beneficiary,amount)
return(uint256,uint256)(data + 32,mload(uint256)(data))
impl = _implementationOverrides[signature]
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)
require(bool,string)(isContract(target),Address: call to non-contract)
impl = _zeroEx.getFunctionImplementation(signature)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
_verifyCallResult(success,returndata,errorMessage)
returndata
_revertWithData(LibProxyRichErrors.NotImplementedError(signature))
(success,returndata) = target.call{value: value}(data)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
size > 0
(success,resultData) = target.delegatecall(msgData)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
_returnWithData(resultData)
returndata_size__verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
_revertWithData(resultData)
Checking function: proxiedSwap(bytes,address,address,uint256,address,uint256) returns(bytes) (Slither line:3127)
Visibility: external
revert(uint256,uint256)(32 + returndata,returndata_size__verifyCallResult_asm_0)
_payFees(feeToken,fee)
require(bool,string)(success,Unable to send ETH)
(success) = toAddress.call{value: amount}()
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
revert(string)(errorMessage)
(success,resultData) = address(_zeroEx).call{value: value}(msgData)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
value = inputAmount
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
require(bool,string)(msg.value == inputAmount.add(fee),Insufficient value with fee)
require(bool,string)(msg.value == inputAmount,Insufficient value)
_sendERC20(IERC20(inputToken),msg.sender,address(this),inputAmount)
_callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))
IERC20(inputToken).safeIncreaseAllowance(_allowanceTarget,inputAmount.sub(allowedAmount))
token.safeTransferFrom(fromAddress,toAddress,amount)
require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)
_revertWithData(resultData)
_returnWithData(resultData)
revert(uint256,uint256)(data + 32,mload(uint256)(data))
_callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))
functionCallWithValue(target,data,0,errorMessage)
_sendETH(msg.sender,address(this).balance)
require(bool,string)(c >= a,SafeMath: addition overflow)
_revertWithData(resultData)
c
_callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))
_sendERC20(IERC20(token),msg.sender,_beneficiary,amount)
_sendETH(_beneficiary,amount)
return(uint256,uint256)(data + 32,mload(uint256)(data))
IERC20(outputToken).safeTransfer(msg.sender,tokenBalance)
_revertWithData(resultData)
require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)
require(bool,string)(isContract(target),Address: call to non-contract)
_verifyCallResult(success,returndata,errorMessage)
returndata
(success,returndata) = target.call{value: value}(data)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
require(bool,string)(b <= a,SafeMath: subtraction overflow)
size > 0
a - b
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
returndata_size__verifyCallResult_asm_0 = mload(uint256)(returndata)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
Checking function: fallback() returns() (Slither line:3127)
Checking function: setZeroEx(IZeroEx) returns() (Slither line:3127)
Visibility: public
_owner
ZeroExChanged(address(_zeroEx))
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
onlyOwner()
require(bool,string)(address(newZeroEx) != _NULL_ADDRESS,Invalid zeroEx address)
msg.sender
_zeroEx = newZeroEx
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
Checking function: setAllowanceTarget(address) returns() (Slither line:3127)
Visibility: public
_owner
_allowanceTarget = newAllowanceTarget
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
AllowanceTargetChanged(_allowanceTarget)
msg.sender
onlyOwner()
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
require(bool,string)(newAllowanceTarget != _NULL_ADDRESS,Invalid allowance target)
Checking function: setBeneficiary(address) returns() (Slither line:3127)
Visibility: public
_owner
onlyOwner()
require(bool,string)(beneficiary != _NULL_ADDRESS,Invalid beneficiary)
_beneficiary = beneficiary
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
msg.sender
BeneficiaryChanged(_beneficiary)
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
Checking function: setImplementationOverride(bytes4,address) returns() (Slither line:3127)
Visibility: public
_owner
onlyOwner()
msg.sender
_implementationOverrides[signature] = implementation
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
ImplementationOverrideSet(signature,implementation)
Checking function: getFunctionImplementation(bytes4) returns(address) (Slither line:3127)
Visibility: public
impl = _implementationOverrides[signature]
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
impl = _zeroEx.getFunctionImplementation(signature)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
Checking function: getBeneficiary() returns(address) (Slither line:3127)
Visibility: public
_beneficiary
Checking function: getAllowanceTarget() returns(address) (Slither line:3127)
Visibility: public
_allowanceTarget
Checking function: getZeroEx() returns(IZeroEx) (Slither line:3127)
Visibility: public
_zeroEx
Checking function: _payFees(address,uint256) returns() (Slither line:3127)
Visibility: private
Checking function: _sendETH(address,uint256) returns() (Slither line:3127)
Visibility: private
Checking function: _sendERC20(IERC20,address,address,uint256) returns() (Slither line:3127)
Visibility: private
Checking function: _revertWithData(bytes) returns() (Slither line:3127)
Visibility: private
Checking function: _returnWithData(bytes) returns() (Slither line:3127)
Visibility: private
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: owner() returns(address) (Slither line:3127)
Visibility: public
_owner
Checking function: renounceOwnership() returns() (Slither line:3127)
Visibility: public
_owner
onlyOwner()
OwnershipTransferred(_owner,address(0))
msg.sender
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
_owner = address(0)
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
Checking function: transferOwnership(address) returns() (Slither line:3127)
Visibility: public
_owner
_owner = newOwner
is an Assignment Operation (Slither line:3216)
getFunctionImplementation(selector)
require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)
onlyOwner()
msg.sender
OwnershipTransferred(_owner,newOwner)
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
Checking function: _msgSender() returns(address) (Slither line:3127)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3127)
Visibility: internal

End MistXProxy.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in MistXProxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin MistXProxy.find_getter_in_contract (Slither line:2974)

impl is a Variable object
getFunctionImplementation(selector)
Checking function: constructor (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable  (Slither line:3008)
RETURN node expression: _owner (Slither line:3028)
Checking function: renounceOwnership (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: receive (Slither line:2988)
Checking function: optimalSwap (Slither line:2988)
optimalSwap returns bytes variable  (Slither line:3008)
Checking function: proxiedSwap (Slither line:2988)
proxiedSwap returns bytes variable  (Slither line:3008)
Checking function: fallback (Slither line:2988)
Checking function: setZeroEx (Slither line:2988)
Checking function: setAllowanceTarget (Slither line:2988)
Checking function: setBeneficiary (Slither line:2988)
Checking function: setImplementationOverride (Slither line:2988)
Checking function: getFunctionImplementation (Slither line:2988)

getFunctionImplementation appears to be the implementation getter (Slither line:2993)


End MistXProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: getFunctionImplementation in contract: MistXProxy (Slither line:1285)

Begin MistXProxy.getter_return_is_non_constant (Slither line:2883)

Found getter function but not setter
Checking if getter calls any other function
END_IF: None (Slither line:2888)
EXPRESSION: impl = _implementationOverrides[signature] (Slither line:2888)
EXPRESSION: impl = _zeroEx.getFunctionImplementation(signature) (Slither line:2888)
IF: impl == _NULL_ADDRESS (Slither line:2888)
ENTRY_POINT: None (Slither line:2888)

End MistXProxy.getter_return_is_non_constant (Slither line:2942)


End MistXProxy.is_upgradeable_proxy (Slither line:1293)

