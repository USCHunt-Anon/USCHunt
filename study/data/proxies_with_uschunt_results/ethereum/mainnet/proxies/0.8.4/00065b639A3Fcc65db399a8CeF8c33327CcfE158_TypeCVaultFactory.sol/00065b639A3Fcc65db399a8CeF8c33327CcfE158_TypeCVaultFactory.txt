
Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin console.is_proxy (Slither line:1425)


End console.is_proxy (Slither line:1428)


Begin console.is_upgradeable_proxy (Slither line:1136)

Checking contract: console 

End console.is_upgradeable_proxy (Slither line:1407)


Begin Strings.is_proxy (Slither line:1425)


End Strings.is_proxy (Slither line:1428)


Begin Strings.is_upgradeable_proxy (Slither line:1136)

Checking contract: Strings 

End Strings.is_upgradeable_proxy (Slither line:1407)


Begin IEventLog.is_proxy (Slither line:1425)


End IEventLog.is_proxy (Slither line:1428)


Begin IEventLog.is_upgradeable_proxy (Slither line:1136)

Checking contract: IEventLog 

End IEventLog.is_upgradeable_proxy (Slither line:1407)


Begin IProxyEvent.is_proxy (Slither line:1425)


End IProxyEvent.is_proxy (Slither line:1428)


Begin IProxyEvent.is_upgradeable_proxy (Slither line:1136)

Checking contract: IProxyEvent 

End IProxyEvent.is_upgradeable_proxy (Slither line:1407)


Begin IAccessControl.is_proxy (Slither line:1425)


End IAccessControl.is_proxy (Slither line:1428)


Begin IAccessControl.is_upgradeable_proxy (Slither line:1136)

Checking contract: IAccessControl 

End IAccessControl.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)


Begin TypeCVaultStorage.is_proxy (Slither line:1425)


End TypeCVaultStorage.is_proxy (Slither line:1428)


Begin TypeCVaultStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: TypeCVaultStorage 

End TypeCVaultStorage.is_upgradeable_proxy (Slither line:1407)


Begin AccessRoleCommon.is_proxy (Slither line:1425)


End AccessRoleCommon.is_proxy (Slither line:1428)


Begin AccessRoleCommon.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessRoleCommon 

End AccessRoleCommon.is_upgradeable_proxy (Slither line:1407)


Begin VaultStorage.is_proxy (Slither line:1425)


End VaultStorage.is_proxy (Slither line:1428)


Begin VaultStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: VaultStorage 

End VaultStorage.is_upgradeable_proxy (Slither line:1407)


Begin ITypeCVaultFactory.is_proxy (Slither line:1425)


End ITypeCVaultFactory.is_proxy (Slither line:1428)


Begin ITypeCVaultFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: ITypeCVaultFactory 

End ITypeCVaultFactory.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin IVaultFactory.is_proxy (Slither line:1425)


End IVaultFactory.is_proxy (Slither line:1428)


Begin IVaultFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: IVaultFactory 

End IVaultFactory.is_upgradeable_proxy (Slither line:1407)


Begin IProxyAction.is_proxy (Slither line:1425)


End IProxyAction.is_proxy (Slither line:1428)


Begin IProxyAction.is_upgradeable_proxy (Slither line:1136)

Checking contract: IProxyAction 

End IProxyAction.is_upgradeable_proxy (Slither line:1407)


Begin ERC165.is_proxy (Slither line:1425)


End ERC165.is_proxy (Slither line:1428)


Begin ERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165 

End ERC165.is_upgradeable_proxy (Slither line:1407)


Begin AccessControl.is_proxy (Slither line:1425)


End AccessControl.is_proxy (Slither line:1428)


Begin AccessControl.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessControl 

End AccessControl.is_upgradeable_proxy (Slither line:1407)


Begin AccessibleCommon.is_proxy (Slither line:1425)


End AccessibleCommon.is_proxy (Slither line:1428)


Begin AccessibleCommon.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessibleCommon 

End AccessibleCommon.is_upgradeable_proxy (Slither line:1407)


Begin ProxyAccessCommon.is_proxy (Slither line:1425)


End ProxyAccessCommon.is_proxy (Slither line:1428)


Begin ProxyAccessCommon.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyAccessCommon 

End ProxyAccessCommon.is_upgradeable_proxy (Slither line:1407)


Begin VaultProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin VaultProxy.find_delegatecall_in_exp_node

Found Expression Node: _fallback() (Slither line:2802)
Expression called: _fallback
Type of call: tuple() (Slither line:2817)
Args:

End VaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin VaultProxy.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_102123_248_0__fallback_asm_0 = result__fallback_asm_0 (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)

End VaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin VaultProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(_impl != address(0) && ! pauseProxy,Proxy: impl OR proxy is false) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0) && ! pauseProxy
Proxy: impl OR proxy is false

End VaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin VaultProxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End VaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin VaultProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: _fallback

Begin VaultProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking name (Slither line:1689)
Checking totalAllocatedAmount (Slither line:1689)
Checking totalClaimCounts (Slither line:1689)
Checking nowClaimRound (Slither line:1689)
Checking totalClaimsAmount (Slither line:1689)
Checking claimTimes (Slither line:1689)
Checking claimAmounts (Slither line:1689)
Checking pauseProxy (Slither line:1689)
Checking proxyImplementation (Slither line:1689)
Checking aliveImplementation (Slither line:1689)
Checking selectorImplementation (Slither line:1689)
Checking boolLogEvent (Slither line:1689)
Checking logEventAddress (Slither line:1689)
Checking _roles (Slither line:1689)
Checking DEFAULT_ADMIN_ROLE (Slither line:1689)
Checking PROJECT_ADMIN_ROLE (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in VaultProxy._fallback (Slither line:1707)
Expression: getSelectorImplementation2(msg.sig) (Slither line:1719)

Begin VaultProxy.find_delegate_from_call_exp

getSelectorImplementation2(msg.sig) (Slither line:2003)
called = getSelectorImplementation2 (Slither line:2010)
Return node of function VaultProxy.getSelectorImplementation2(bytes4): RETURN proxyImplementation[0] (Slither line:2041)
Return node of function VaultProxy.getSelectorImplementation2(bytes4): RETURN selectorImplementation[_selector] (Slither line:2041)
Return node of function VaultProxy.getSelectorImplementation2(bytes4): RETURN proxyImplementation[0] (Slither line:2041)
getSelectorImplementation2 returns a variable of type address   called impl (Slither line:2193)
Return value is LocalVariable: impl (Slither line:2266)
has no expression (Slither line:2326)

End VaultProxy.find_delegate_from_call_exp (Slither line:2328)

Call Expression
End VaultProxy.find_delegate_variable_by_name (Slither line:1739)


End VaultProxy.find_delegatecall_in_asm (Slither line:1637)


End VaultProxy.is_proxy (Slither line:1476)


Begin VaultProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: VaultProxy 
VaultProxy is delegating to proxyImplementation
Looking for setter (Slither line:1200)

Looking for setter in VaultStorage (Slither line:1204)


Begin VaultStorage.find_setter_in_contract (Slither line:3119)

Checking function: allClaimInfos() returns(uint256,uint256[],uint256[],uint256) (Slither line:3127)
Visibility: external
(totalClaimCounts,claimTimes,claimAmounts,nowClaimRound)
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal

End VaultStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in VaultStorage 
Looking in VaultProxy (Slither line:1213)

Begin VaultProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor() returns() (Slither line:3127)
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
onlyProxyOwner()
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
logEventAddress = _addr
is an Assignment Operation (Slither line:3216)
require(bool,string)(logEventAddress != _addr && _addr != address(0),same value or zero)
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
require(bool,string)(logEventAddress != address(0),zero logEventAddress)
onlyProxyOwner()
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
require(bool,string)(boolLogEvent != _boolLogEvent,same value)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
pauseProxy = _pause
is an Assignment Operation (Slither line:3216)
_roles[role].members[account]
hasRole(PROJECT_ADMIN_ROLE,account)
onlyOwner()
hasRole(DEFAULT_ADMIN_ROLE,account)
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: external
_implementation2(0)
proxyImplementation[_index]
Checking function: upgradeTo(address) returns() (Slither line:3127)
Visibility: external
_setAliveImplementation2(newImplementation,_alive)
Upgraded(impl)
SetAliveImplementation(newImplementation,_alive)
onlyProxyOwner()
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
size > 0
proxyImplementation[_index]
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(impl != address(0),input is zero)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)

End VaultProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: VaultProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin VaultStorage.find_getter_in_contract (Slither line:2974)

proxyImplementation is a Variable object
newImplementation
Checking function: allClaimInfos (Slither line:2988)
allClaimInfos returns uint256 variable  (Slither line:3008)
allClaimInfos returns uint256[] variable  (Slither line:3008)
allClaimInfos returns uint256[] variable  (Slither line:3008)
allClaimInfos returns uint256 variable  (Slither line:3008)
RETURN node expression: (totalClaimCounts,claimTimes,claimAmounts,nowClaimRound) (Slither line:3028)
Checking function: slitherConstructorVariables (Slither line:2988)

End VaultStorage.find_getter_in_contract (Slither line:3083)


Begin VaultProxy.find_getter_in_contract (Slither line:2974)

proxyImplementation is a Variable object
newImplementation
Checking function: addProxyAdmin (Slither line:2988)
Checking function: removeProxyAdmin (Slither line:2988)
Checking function: transferProxyAdmin (Slither line:2988)
Checking function: addAdmin (Slither line:2988)
Checking function: removeAdmin (Slither line:2988)
Checking function: transferAdmin (Slither line:2988)
Checking function: isAdmin (Slither line:2988)
isAdmin returns bool variable  (Slither line:3008)
RETURN node expression: hasRole(PROJECT_ADMIN_ROLE,account) (Slither line:3028)
Checking function: isProxyAdmin (Slither line:2988)
isProxyAdmin returns bool variable  (Slither line:3008)
RETURN node expression: hasRole(DEFAULT_ADMIN_ROLE,account) (Slither line:3028)
Checking function: supportsInterface (Slither line:2988)
supportsInterface returns bool variable  (Slither line:3008)
RETURN node expression: interfaceId == type()(IAccessControl).interfaceId || super.supportsInterface(interfaceId) (Slither line:3028)
Checking function: hasRole (Slither line:2988)
hasRole returns bool variable  (Slither line:3008)
RETURN node expression: _roles[role].members[account] (Slither line:3028)
Checking function: _checkRole (Slither line:2988)
Checking function: getRoleAdmin (Slither line:2988)
getRoleAdmin returns bytes32 variable  (Slither line:3008)
RETURN node expression: _roles[role].adminRole (Slither line:3028)
Checking function: grantRole (Slither line:2988)
Checking function: revokeRole (Slither line:2988)
Checking function: renounceRole (Slither line:2988)
Checking function: _setupRole (Slither line:2988)
Checking function: _setRoleAdmin (Slither line:2988)
Checking function: _grantRole (Slither line:2988)
Checking function: _revokeRole (Slither line:2988)
Checking function: supportsInterface (Slither line:2988)
supportsInterface returns bool variable  (Slither line:3008)
RETURN node expression: interfaceId == type()(IERC165).interfaceId (Slither line:3028)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: allClaimInfos (Slither line:2988)
allClaimInfos returns uint256 variable  (Slither line:3008)
allClaimInfos returns uint256[] variable  (Slither line:3008)
allClaimInfos returns uint256[] variable  (Slither line:3008)
allClaimInfos returns uint256 variable  (Slither line:3008)
RETURN node expression: (totalClaimCounts,claimTimes,claimAmounts,nowClaimRound) (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: setLogEventAddress (Slither line:2988)
Checking function: setBoolLogEvent (Slither line:2988)
Checking function: setProxyPause (Slither line:2988)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation2(0) (Slither line:3028)
Checking function: upgradeTo (Slither line:2988)
Checking function: implementation2 (Slither line:2988)
implementation2 returns address variable  (Slither line:3008)
RETURN node expression: _implementation2(_index) (Slither line:3028)
Checking function: setImplementation2 (Slither line:2988)
Checking function: setAliveImplementation2 (Slither line:2988)
Checking function: setSelectorImplementations2 (Slither line:2988)
Checking function: _setImplementation2 (Slither line:2988)
Checking function: _setAliveImplementation2 (Slither line:2988)
Checking function: _implementation2 (Slither line:2988)
_implementation2 returns address variable called impl (Slither line:3008)
RETURN node expression: proxyImplementation[_index] (Slither line:3028)

End VaultProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: _implementation2 in contract: VaultProxy (Slither line:1285)

End VaultProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: newImplementation
impl_address_from_contract_call: StateVariable proxyImplementation
impl_address_from_contract_call: getter is _implementation2
getter.full_name = _implementation2(uint256)
library call: Address.isContract
library call: Strings.toHexString
impl_address_from_contract_call: CallExpression _fallback()
impl_address_from_contract_call: CallExpression getSelectorImplementation2(msg.sig)
impl_address_from_contract_call: arg is msg.sig
impl_address_from_contract_call: CallExpression require(bool,string)(_impl != address(0) && ! pauseProxy,Proxy: impl OR proxy is false)
impl_address_from_contract_call: arg is _impl != address(0) && ! pauseProxy
impl_address_from_contract_call: arg is Proxy: impl OR proxy is false
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression return(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is calldatasize()()
impl_address_from_contract_call: CallExpression calldatasize()()
impl_address_from_contract_call: CallExpression delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_impl,0,calldatasize()(),0,0)
impl_address_from_contract_call: arg is gas()()
impl_address_from_contract_call: CallExpression gas()()
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
Checking external function setLogEventAddress
Checking external function setBoolLogEvent
Checking external function setImplementation2
Checking external function setAliveImplementation2
Checking external function setSelectorImplementations2
Checking external function setProxyPause
Checking external function getSelectorImplementation2
Checking external function implementation2
Checking external function addProxyAdmin
Checking public function removeProxyAdmin
Checking external function transferProxyAdmin
Checking public function addAdmin
Checking public function removeAdmin
Checking external function transferAdmin
Checking public function isAdmin
Checking public function isProxyAdmin
Checking public function supportsInterface
Checking public function hasRole
Checking public function getRoleAdmin
Checking public function grantRole
Checking public function revokeRole
Checking public function renounceRole
Checking public function supportsInterface
Checking external function supportsInterface
Checking external function hasRole
Checking external function getRoleAdmin
Checking external function grantRole
Checking external function revokeRole
Checking external function renounceRole
Checking external function allClaimInfos
Checking external function setLogEventAddress
Checking external function setBoolLogEvent
Checking external function setProxyPause
Checking external function implementation
Checking external function upgradeTo
Checking external function implementation2
Checking external function setImplementation2
Checking public function setAliveImplementation2
Checking public function setSelectorImplementations2
Checking public function getSelectorImplementation2
Checking external function receive
Checking external function fallback
functions_writing_to_variable: proxyImplementation
functions_writing_to_variable: checking function VaultProxy.removeProxyAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setLogEventAddress (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.isAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.grantRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._setupRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setAliveImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.getSelectorImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.hasRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setBoolLogEvent (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._msgData (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setSelectorImplementations2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._fallback (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.transferProxyAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._checkRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.isProxyAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setLogEventAddress (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setBoolLogEvent (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.implementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setProxyPause (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setSelectorImplementations2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._setRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._setImplementation2 (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address) (proxy_features line:909)
functions_writing_to_variable: exp = _alive (proxy_features line:909)
functions_writing_to_variable: exp = proxyImplementation[_index] = newImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: proxyImplementation[_index] = newImplementation (proxy_features line:912)
functions_writing_to_variable: IndexAccess: proxyImplementation[_index] (proxy_features line:920)
functions_writing_to_variable: Identifier: proxyImplementation (proxy_features line:924)
get_value_assigned: proxyImplementation[_index] = newImplementation
functions_writing_to_variable: exp = _setAliveImplementation2(newImplementation,_alive) (proxy_features line:909)
functions_writing_to_variable: _setImplementation2 writes newImplementation to proxyImplementation (proxy_features line:929)
functions_writing_to_variable: checking function VaultProxy.addAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.getRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.allClaimInfos (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.supportsInterface (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._setAliveImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.renounceRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.supportsInterface (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.upgradeTo (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.removeAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.slitherConstructorVariables (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.addProxyAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._implementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setProxyPause (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.getRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.renounceRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._grantRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.implementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.supportsInterface (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.getSelectorImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.transferAdmin (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.grantRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy._msgSender (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.setAliveImplementation2 (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.hasRole (proxy_features line:898)
functions_writing_to_variable: checking function VaultProxy.receive (proxy_features line:898)
has_compatibility_checks: dependencies: ['newImplementation', 'impl', 'newImplementation']
has_compatibility_checks: skipping internal function _setImplementation2
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(_impl != address(0) && ! pauseProxy,Proxy: impl OR proxy is false)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result__fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_impl,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = getSelectorImplementation2(msg.sig)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
Found external function: setLogEventAddress
has_time_delay: (node.type) EXPRESSION
(Expression) _setAliveImplementation2(newImplementation,_alive)
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(impl)
has_time_delay: (node.type) EXPRESSION
(Expression) SetAliveImplementation(newImplementation,_alive)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) RETURN
(Expression) hasRole(DEFAULT_ADMIN_ROLE,account)
has_time_delay: (node.type) RETURN
(Expression) _roles[role].members[account]
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) RETURN
(Expression) proxyImplementation[_index]
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(account)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
has_time_delay: (node.type) IF
(Expression) _alive
has_time_delay: (node.type) EXPRESSION
(Expression) aliveImplementation[newImplementation] = _alive
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(impl != address(0),input is zero)
has_time_delay: (node.type) EXPRESSION
(Expression) proxyImplementation[_index] = newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_implementation2(0) != impl,same addr)
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation2(impl,0,true)

Begin TypeCVaultProxy.is_proxy (Slither line:1425)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin TypeCVaultProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(_impl != address(0) && ! pauseProxy,Proxy: impl OR proxy is false) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0) && ! pauseProxy
Proxy: impl OR proxy is false

End TypeCVaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin TypeCVaultProxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End TypeCVaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin TypeCVaultProxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End TypeCVaultProxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin TypeCVaultProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: _fallback

Begin TypeCVaultProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking token (Slither line:1689)
Checking owner (Slither line:1689)
Checking set (Slither line:1689)
Checking name (Slither line:1689)
Checking totalAllocatedAmount (Slither line:1689)
Checking totalClaimCounts (Slither line:1689)
Checking nowClaimRound (Slither line:1689)
Checking totalClaimsAmount (Slither line:1689)
Checking claimTimes (Slither line:1689)
Checking claimAmounts (Slither line:1689)
Checking pauseProxy (Slither line:1689)
Checking proxyImplementation (Slither line:1689)
Checking aliveImplementation (Slither line:1689)
Checking selectorImplementation (Slither line:1689)
Checking boolLogEvent (Slither line:1689)
Checking logEventAddress (Slither line:1689)
Checking _roles (Slither line:1689)
Checking DEFAULT_ADMIN_ROLE (Slither line:1689)
Checking PROJECT_ADMIN_ROLE (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in TypeCVaultProxy._fallback (Slither line:1707)
Expression: getSelectorImplementation2(msg.sig) (Slither line:1719)

Begin TypeCVaultProxy.find_delegate_from_call_exp

getSelectorImplementation2(msg.sig) (Slither line:2003)
called = getSelectorImplementation2 (Slither line:2010)
Return node of function VaultProxy.getSelectorImplementation2(bytes4): RETURN proxyImplementation[0] (Slither line:2041)
Return node of function VaultProxy.getSelectorImplementation2(bytes4): RETURN selectorImplementation[_selector] (Slither line:2041)
Return node of function VaultProxy.getSelectorImplementation2(bytes4): RETURN proxyImplementation[0] (Slither line:2041)
getSelectorImplementation2 returns a variable of type address   called impl (Slither line:2193)
Return value is LocalVariable: impl (Slither line:2266)
has no expression (Slither line:2326)

End TypeCVaultProxy.find_delegate_from_call_exp (Slither line:2328)

Call Expression
End TypeCVaultProxy.find_delegate_variable_by_name (Slither line:1739)


End TypeCVaultProxy.find_delegatecall_in_asm (Slither line:1637)


End TypeCVaultProxy.is_proxy (Slither line:1476)


Begin TypeCVaultProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: TypeCVaultProxy 
TypeCVaultProxy is delegating to proxyImplementation
Looking for setter (Slither line:1200)

Looking for setter in VaultStorage (Slither line:1204)


Begin VaultStorage.find_setter_in_contract (Slither line:3119)

Expression: newImplementation (Slither line:3122)
Checking function: allClaimInfos() returns(uint256,uint256[],uint256[],uint256) (Slither line:3127)
Visibility: external
(totalClaimCounts,claimTimes,claimAmounts,nowClaimRound)
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal

End VaultStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in VaultStorage 
Looking in TypeCVaultProxy (Slither line:1213)

Begin TypeCVaultProxy.find_setter_in_contract (Slither line:3119)

Expression: newImplementation (Slither line:3122)
Checking function: setBaseInfoProxy(string,address,address) returns() (Slither line:3127)
Visibility: external
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
onlyProxyOwner()
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
_setupRole(PROJECT_ADMIN_ROLE,_owner)
_grantRole(role,account)
owner = _owner
is an Assignment Operation (Slither line:3216)
newImplementation
name = _name
is an Assignment Operation (Slither line:3216)
newImplementation
msg.sender
hasRole(PROJECT_ADMIN_ROLE,account)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
token = _token
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
newImplementation
logEventAddress = _addr
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
require(bool,string)(logEventAddress != _addr && _addr != address(0),same value or zero)
_roles[role].members[account]
onlyProxyOwner()
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
require(bool,string)(boolLogEvent != _boolLogEvent,same value)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(logEventAddress != address(0),zero logEventAddress)
onlyProxyOwner()
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
onlyOwner()
hasRole(PROJECT_ADMIN_ROLE,account)
hasRole(DEFAULT_ADMIN_ROLE,account)
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
pauseProxy = _pause
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account]
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: external
_implementation2(0)
proxyImplementation[_index]
Checking function: upgradeTo(address) returns() (Slither line:3127)
Visibility: external
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
proxyImplementation[_index]
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
require(bool,string)(impl != address(0),input is zero)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(_implementation2(0) != impl,same addr)
size > 0
_setImplementation2(impl,0,true)
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
_setAliveImplementation2(newImplementation,_alive)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
newImplementation
Upgraded(impl)
SetAliveImplementation(newImplementation,_alive)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
Checking function: implementation2(uint256) returns(address) (Slither line:3127)
Visibility: external
_implementation2(_index)
proxyImplementation[_index]
Checking function: setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation
size > 0
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
_setImplementation2(newImplementation,_index,_alive)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
newImplementation
_setAliveImplementation2(newImplementation,_alive)
SetAliveImplementation(newImplementation,_alive)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
Checking function: setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: public
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
_setAliveImplementation2(newImplementation,_alive)
hasRole(DEFAULT_ADMIN_ROLE,account)
onlyProxyOwner()
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account]
SetAliveImplementation(newImplementation,_alive)
Checking function: setSelectorImplementations2(bytes4[],address) returns() (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
i ++
require(bool,string)(selectorImplementation[_selectors[i]] != _imp,LiquidityVaultProxy: same imp)
selectorImplementation[_selectors[i]] = _imp
is an Assignment Operation (Slither line:3216)
newImplementation
SetSelectorImplementation(_selectors[i],_imp)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
require(bool,string)(_selectors.length > 0,Proxy: _selectors's size is zero)
require(bool,string)(aliveImplementation[_imp],Proxy: _imp is not alive)
Checking function: _setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: _setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: _implementation2(uint256) returns(address) (Slither line:3127)
Visibility: internal
Checking function: getSelectorImplementation2(bytes4) returns(address) (Slither line:3127)
Visibility: public
selectorImplementation[_selector]
proxyImplementation[0]
proxyImplementation[0]
Checking function: receive() returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: _fallback() returns() (Slither line:3127)
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
Checking function: setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setSelectorImplementations2(bytes4[],address) returns() (Slither line:3127)
Visibility: external
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
Checking function: getSelectorImplementation2(bytes4) returns(address) (Slither line:3127)
Visibility: external
Checking function: implementation2(uint256) returns(address) (Slither line:3127)
Visibility: external
Checking function: addProxyAdmin(address) returns() (Slither line:3127)
Visibility: external
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
_setupRole(DEFAULT_ADMIN_ROLE,_owner)
_grantRole(role,account)
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
Checking function: removeProxyAdmin() returns() (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
renounceRole(DEFAULT_ADMIN_ROLE,msg.sender)
onlyProxyOwner()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_revokeRole(role,account)
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
Checking function: transferProxyAdmin(address) returns() (Slither line:3127)
Visibility: external
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(msg.sender != newAdmin,Accessible: same admin)
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
grantRole(DEFAULT_ADMIN_ROLE,newAdmin)
string(buffer)
_roles[role].members[account]
renounceRole(DEFAULT_ADMIN_ROLE,msg.sender)
_checkRole(role,_msgSender())
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
onlyProxyOwner()
RoleRevoked(role,account,_msgSender())
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_grantRole(role,account)
_revokeRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
onlyRole(getRoleAdmin(role))
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
-- i
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(newAdmin != address(0),Accessible: zero address)
Checking function: addAdmin(address) returns() (Slither line:3127)
Visibility: public
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_grantRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
grantRole(PROJECT_ADMIN_ROLE,account)
onlyProxyOwner()
onlyRole(getRoleAdmin(role))
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
-- i
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: removeAdmin() returns() (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
renounceRole(PROJECT_ADMIN_ROLE,msg.sender)
RoleRevoked(role,account,_msgSender())
onlyOwner()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_revokeRole(role,account)
msg.sender
hasRole(PROJECT_ADMIN_ROLE,account)
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
Checking function: transferAdmin(address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(msg.sender != newAdmin,Accessible: same admin)
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
grantRole(PROJECT_ADMIN_ROLE,newAdmin)
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
renounceRole(PROJECT_ADMIN_ROLE,msg.sender)
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
onlyOwner()
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_grantRole(role,account)
_revokeRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
hasRole(PROJECT_ADMIN_ROLE,account)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
-- i
onlyRole(getRoleAdmin(role))
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(newAdmin != address(0),Accessible: zero address)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: isAdmin(address) returns(bool) (Slither line:3127)
Visibility: public
hasRole(PROJECT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: isProxyAdmin(address) returns(bool) (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: public
interfaceId == type()(IAccessControl).interfaceId || super.supportsInterface(interfaceId)
interfaceId == type()(IERC165).interfaceId
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3127)
Visibility: public
_roles[role].members[account]
Checking function: _checkRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3127)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(value == 0,Strings: hex length insufficient)
RoleGranted(role,account,_msgSender())
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_grantRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
-- i
onlyRole(getRoleAdmin(role))
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(value == 0,Strings: hex length insufficient)
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
_revokeRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
onlyRole(getRoleAdmin(role))
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: renounceRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
RoleRevoked(role,account,_msgSender())
_roles[role].members[account]
_revokeRole(role,account)
msg.sender
Checking function: _setupRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3127)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: public
interfaceId == type()(IERC165).interfaceId
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: external
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3127)
Visibility: external
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3127)
Visibility: external
Checking function: grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: renounceRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: _msgSender() returns(address) (Slither line:3127)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3127)
Visibility: internal
Checking function: allClaimInfos() returns(uint256,uint256[],uint256[],uint256) (Slither line:3127)
Visibility: external
(totalClaimCounts,claimTimes,claimAmounts,nowClaimRound)

End TypeCVaultProxy.find_setter_in_contract (Slither line:3345)


Could not find setter in TypeCVaultProxy (Slither line:1220)
Looking for setter in VaultProxy (Slither line:1228)


Begin VaultProxy.find_setter_in_contract (Slither line:3119)

Expression: newImplementation (Slither line:3122)
Checking function: constructor() returns() (Slither line:3127)
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
onlyProxyOwner()
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
newImplementation
logEventAddress = _addr
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(logEventAddress != _addr && _addr != address(0),same value or zero)
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
require(bool,string)(logEventAddress != address(0),zero logEventAddress)
onlyProxyOwner()
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
require(bool,string)(boolLogEvent != _boolLogEvent,same value)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
pauseProxy = _pause
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account]
hasRole(PROJECT_ADMIN_ROLE,account)
onlyOwner()
hasRole(DEFAULT_ADMIN_ROLE,account)
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: external
_implementation2(0)
proxyImplementation[_index]
Checking function: upgradeTo(address) returns() (Slither line:3127)
Visibility: external
_setAliveImplementation2(newImplementation,_alive)
Upgraded(impl)
SetAliveImplementation(newImplementation,_alive)
onlyProxyOwner()
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
size > 0
proxyImplementation[_index]
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(impl != address(0),input is zero)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(_implementation2(0) != impl,same addr)
_setImplementation2(impl,0,true)
Checking function: implementation2(uint256) returns(address) (Slither line:3127)
Visibility: external
_implementation2(_index)
proxyImplementation[_index]
Checking function: setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
_setImplementation2(newImplementation,_index,_alive)
_setAliveImplementation2(newImplementation,_alive)
SetAliveImplementation(newImplementation,_alive)
onlyProxyOwner()
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
size > 0
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: public
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
SetAliveImplementation(newImplementation,_alive)
_setAliveImplementation2(newImplementation,_alive)
hasRole(DEFAULT_ADMIN_ROLE,account)
onlyProxyOwner()
_roles[role].members[account]
Checking function: setSelectorImplementations2(bytes4[],address) returns() (Slither line:3127)
Visibility: public
onlyProxyOwner()
require(bool,string)(_selectors.length > 0,Proxy: _selectors's size is zero)
require(bool,string)(aliveImplementation[_imp],Proxy: _imp is not alive)
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
i ++
require(bool,string)(selectorImplementation[_selectors[i]] != _imp,LiquidityVaultProxy: same imp)
selectorImplementation[_selectors[i]] = _imp
is an Assignment Operation (Slither line:3216)
newImplementation
SetSelectorImplementation(_selectors[i],_imp)
Checking function: _setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: _setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: _implementation2(uint256) returns(address) (Slither line:3127)
Visibility: internal
Checking function: getSelectorImplementation2(bytes4) returns(address) (Slither line:3127)
Visibility: public
proxyImplementation[0]
selectorImplementation[_selector]
proxyImplementation[0]
Checking function: receive() returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: _fallback() returns() (Slither line:3127)
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
Checking function: setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setSelectorImplementations2(bytes4[],address) returns() (Slither line:3127)
Visibility: external
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
Checking function: getSelectorImplementation2(bytes4) returns(address) (Slither line:3127)
Visibility: external
Checking function: implementation2(uint256) returns(address) (Slither line:3127)
Visibility: external
Checking function: addProxyAdmin(address) returns() (Slither line:3127)
Visibility: external
msg.sender
_setupRole(DEFAULT_ADMIN_ROLE,_owner)
onlyProxyOwner()
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
_grantRole(role,account)
Checking function: removeProxyAdmin() returns() (Slither line:3127)
Visibility: public
_revokeRole(role,account)
msg.sender
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
renounceRole(DEFAULT_ADMIN_ROLE,msg.sender)
onlyProxyOwner()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
Checking function: transferProxyAdmin(address) returns() (Slither line:3127)
Visibility: external
_revokeRole(role,account)
_checkRole(role,_msgSender())
onlyRole(getRoleAdmin(role))
require(bool,string)(value == 0,Strings: hex length insufficient)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
msg.sender
string(buffer)
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
onlyRole(getRoleAdmin(role))
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(newAdmin != address(0),Accessible: zero address)
require(bool,string)(msg.sender != newAdmin,Accessible: same admin)
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
grantRole(DEFAULT_ADMIN_ROLE,newAdmin)
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
renounceRole(DEFAULT_ADMIN_ROLE,msg.sender)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
_roles[role].adminRole
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
onlyProxyOwner()
RoleRevoked(role,account,_msgSender())
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_grantRole(role,account)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: addAdmin(address) returns() (Slither line:3127)
Visibility: public
_checkRole(role,_msgSender())
onlyRole(getRoleAdmin(role))
require(bool,string)(value == 0,Strings: hex length insufficient)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
grantRole(PROJECT_ADMIN_ROLE,account)
msg.sender
string(buffer)
onlyProxyOwner()
onlyRole(getRoleAdmin(role))
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
_roles[role].adminRole
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
_grantRole(role,account)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: removeAdmin() returns() (Slither line:3127)
Visibility: public
_revokeRole(role,account)
hasRole(PROJECT_ADMIN_ROLE,account)
msg.sender
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
renounceRole(PROJECT_ADMIN_ROLE,msg.sender)
RoleRevoked(role,account,_msgSender())
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
onlyOwner()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
Checking function: transferAdmin(address) returns() (Slither line:3127)
Visibility: external
_revokeRole(role,account)
_checkRole(role,_msgSender())
onlyRole(getRoleAdmin(role))
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(PROJECT_ADMIN_ROLE,account)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
msg.sender
string(buffer)
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
onlyRole(getRoleAdmin(role))
require(bool,string)(newAdmin != address(0),Accessible: zero address)
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(msg.sender != newAdmin,Accessible: same admin)
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
grantRole(PROJECT_ADMIN_ROLE,newAdmin)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
renounceRole(PROJECT_ADMIN_ROLE,msg.sender)
_roles[role].adminRole
onlyOwner()
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_grantRole(role,account)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: isAdmin(address) returns(bool) (Slither line:3127)
Visibility: public
_roles[role].members[account]
hasRole(PROJECT_ADMIN_ROLE,account)
Checking function: isProxyAdmin(address) returns(bool) (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: public
interfaceId == type()(IAccessControl).interfaceId || super.supportsInterface(interfaceId)
interfaceId == type()(IERC165).interfaceId
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3127)
Visibility: public
_roles[role].members[account]
Checking function: _checkRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3127)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
_checkRole(role,_msgSender())
onlyRole(getRoleAdmin(role))
require(bool,string)(value == 0,Strings: hex length insufficient)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
msg.sender
string(buffer)
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
onlyRole(getRoleAdmin(role))
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
_roles[role].adminRole
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
_grantRole(role,account)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
onlyRole(getRoleAdmin(role))
_checkRole(role,_msgSender())
require(bool,string)(value == 0,Strings: hex length insufficient)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
msg.sender
string(buffer)
onlyRole(getRoleAdmin(role))
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account]
_roles[role].adminRole
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
_revokeRole(role,account)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: renounceRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
_revokeRole(role,account)
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
msg.sender
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
RoleRevoked(role,account,_msgSender())
_roles[role].members[account]
Checking function: _setupRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3127)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: public
interfaceId == type()(IERC165).interfaceId
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: external
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3127)
Visibility: external
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3127)
Visibility: external
Checking function: grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: renounceRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: _msgSender() returns(address) (Slither line:3127)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3127)
Visibility: internal
Checking function: allClaimInfos() returns(uint256,uint256[],uint256[],uint256) (Slither line:3127)
Visibility: external
(totalClaimCounts,claimTimes,claimAmounts,nowClaimRound)

End VaultProxy.find_setter_in_contract (Slither line:3345)


Begin TypeCVaultProxy.find_setter_in_contract (Slither line:3119)

Expression: newImplementation (Slither line:3122)
Checking function: setBaseInfoProxy(string,address,address) returns() (Slither line:3127)
Visibility: external
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
onlyProxyOwner()
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
_setupRole(PROJECT_ADMIN_ROLE,_owner)
_grantRole(role,account)
owner = _owner
is an Assignment Operation (Slither line:3216)
newImplementation
name = _name
is an Assignment Operation (Slither line:3216)
newImplementation
msg.sender
hasRole(PROJECT_ADMIN_ROLE,account)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
token = _token
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
newImplementation
logEventAddress = _addr
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
require(bool,string)(logEventAddress != _addr && _addr != address(0),same value or zero)
_roles[role].members[account]
onlyProxyOwner()
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
require(bool,string)(boolLogEvent != _boolLogEvent,same value)
boolLogEvent = _boolLogEvent
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(logEventAddress != address(0),zero logEventAddress)
onlyProxyOwner()
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
onlyOwner()
hasRole(PROJECT_ADMIN_ROLE,account)
hasRole(DEFAULT_ADMIN_ROLE,account)
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
pauseProxy = _pause
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account]
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: external
_implementation2(0)
proxyImplementation[_index]
Checking function: upgradeTo(address) returns() (Slither line:3127)
Visibility: external
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
proxyImplementation[_index]
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
require(bool,string)(impl != address(0),input is zero)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(_implementation2(0) != impl,same addr)
size > 0
_setImplementation2(impl,0,true)
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
_setAliveImplementation2(newImplementation,_alive)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
newImplementation
Upgraded(impl)
SetAliveImplementation(newImplementation,_alive)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
Checking function: implementation2(uint256) returns(address) (Slither line:3127)
Visibility: external
_implementation2(_index)
proxyImplementation[_index]
Checking function: setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
require(bool,string)(Address.isContract(newImplementation),Proxy: not contract address)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
newImplementation
size > 0
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
_setImplementation2(newImplementation,_index,_alive)
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
newImplementation
_setAliveImplementation2(newImplementation,_alive)
SetAliveImplementation(newImplementation,_alive)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
Checking function: setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: public
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
_setAliveImplementation2(newImplementation,_alive)
hasRole(DEFAULT_ADMIN_ROLE,account)
onlyProxyOwner()
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account]
SetAliveImplementation(newImplementation,_alive)
Checking function: setSelectorImplementations2(bytes4[],address) returns() (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
i ++
require(bool,string)(selectorImplementation[_selectors[i]] != _imp,LiquidityVaultProxy: same imp)
selectorImplementation[_selectors[i]] = _imp
is an Assignment Operation (Slither line:3216)
newImplementation
SetSelectorImplementation(_selectors[i],_imp)
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
require(bool,string)(_selectors.length > 0,Proxy: _selectors's size is zero)
require(bool,string)(aliveImplementation[_imp],Proxy: _imp is not alive)
Checking function: _setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: _setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: _implementation2(uint256) returns(address) (Slither line:3127)
Visibility: internal
Checking function: getSelectorImplementation2(bytes4) returns(address) (Slither line:3127)
Visibility: public
selectorImplementation[_selector]
proxyImplementation[0]
proxyImplementation[0]
Checking function: receive() returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: _fallback() returns() (Slither line:3127)
Checking function: setLogEventAddress(address,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setBoolLogEvent(bool) returns() (Slither line:3127)
Visibility: external
Checking function: setImplementation2(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setAliveImplementation2(address,bool) returns() (Slither line:3127)
Visibility: external
Checking function: setSelectorImplementations2(bytes4[],address) returns() (Slither line:3127)
Visibility: external
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
Checking function: getSelectorImplementation2(bytes4) returns(address) (Slither line:3127)
Visibility: external
Checking function: implementation2(uint256) returns(address) (Slither line:3127)
Visibility: external
Checking function: addProxyAdmin(address) returns() (Slither line:3127)
Visibility: external
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
_roles[role].members[account]
_setupRole(DEFAULT_ADMIN_ROLE,_owner)
_grantRole(role,account)
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
onlyProxyOwner()
Checking function: removeProxyAdmin() returns() (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
renounceRole(DEFAULT_ADMIN_ROLE,msg.sender)
onlyProxyOwner()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_revokeRole(role,account)
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
Checking function: transferProxyAdmin(address) returns() (Slither line:3127)
Visibility: external
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(msg.sender != newAdmin,Accessible: same admin)
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
grantRole(DEFAULT_ADMIN_ROLE,newAdmin)
string(buffer)
_roles[role].members[account]
renounceRole(DEFAULT_ADMIN_ROLE,msg.sender)
_checkRole(role,_msgSender())
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
onlyProxyOwner()
RoleRevoked(role,account,_msgSender())
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_grantRole(role,account)
_revokeRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
onlyRole(getRoleAdmin(role))
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
-- i
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(newAdmin != address(0),Accessible: zero address)
Checking function: addAdmin(address) returns() (Slither line:3127)
Visibility: public
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_grantRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
require(bool,string)(isProxyAdmin(msg.sender),Accessible: Caller is not an proxy admin)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
grantRole(PROJECT_ADMIN_ROLE,account)
onlyProxyOwner()
onlyRole(getRoleAdmin(role))
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
-- i
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: removeAdmin() returns() (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
renounceRole(PROJECT_ADMIN_ROLE,msg.sender)
RoleRevoked(role,account,_msgSender())
onlyOwner()
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_revokeRole(role,account)
msg.sender
hasRole(PROJECT_ADMIN_ROLE,account)
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
Checking function: transferAdmin(address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(msg.sender != newAdmin,Accessible: same admin)
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
grantRole(PROJECT_ADMIN_ROLE,newAdmin)
require(bool,string)(value == 0,Strings: hex length insufficient)
hasRole(DEFAULT_ADMIN_ROLE,account)
RoleGranted(role,account,_msgSender())
renounceRole(PROJECT_ADMIN_ROLE,msg.sender)
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
onlyOwner()
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
_grantRole(role,account)
_revokeRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
hasRole(PROJECT_ADMIN_ROLE,account)
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
-- i
onlyRole(getRoleAdmin(role))
require(bool,string)(isAdmin(msg.sender) || isProxyAdmin(msg.sender),Accessible: Caller is not an admin)
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(newAdmin != address(0),Accessible: zero address)
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: isAdmin(address) returns(bool) (Slither line:3127)
Visibility: public
hasRole(PROJECT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: isProxyAdmin(address) returns(bool) (Slither line:3127)
Visibility: public
hasRole(DEFAULT_ADMIN_ROLE,account)
_roles[role].members[account]
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: public
interfaceId == type()(IAccessControl).interfaceId || super.supportsInterface(interfaceId)
interfaceId == type()(IERC165).interfaceId
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3127)
Visibility: public
_roles[role].members[account]
Checking function: _checkRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3127)
Visibility: public
_roles[role].adminRole
Checking function: grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
_roles[role].members[account] = true
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(value == 0,Strings: hex length insufficient)
RoleGranted(role,account,_msgSender())
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_grantRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
-- i
onlyRole(getRoleAdmin(role))
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(value == 0,Strings: hex length insufficient)
string(buffer)
_roles[role].members[account]
buffer[0] = 0
is an Assignment Operation (Slither line:3216)
newImplementation
_checkRole(role,_msgSender())
_roles[role].adminRole
buffer[1] = x
is an Assignment Operation (Slither line:3216)
newImplementation
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
RoleRevoked(role,account,_msgSender())
_revokeRole(role,account)
onlyRole(getRoleAdmin(role))
msg.sender
revert(string)(string(abi.encodePacked(AccessControl: account ,Strings.toHexString(uint160(account),20), is missing role ,Strings.toHexString(uint256(role),32))))
onlyRole(getRoleAdmin(role))
-- i
buffer[i] = _HEX_SYMBOLS[value & 0xf]
is an Assignment Operation (Slither line:3216)
newImplementation
value >>= 4
is an Assignment Operation (Slither line:3216)
newImplementation
Checking function: renounceRole(bytes32,address) returns() (Slither line:3127)
Visibility: public
_roles[role].members[account] = false
is an Assignment Operation (Slither line:3216)
newImplementation
require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)
RoleRevoked(role,account,_msgSender())
_roles[role].members[account]
_revokeRole(role,account)
msg.sender
Checking function: _setupRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: _setRoleAdmin(bytes32,bytes32) returns() (Slither line:3127)
Visibility: internal
Checking function: _grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: _revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: internal
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: public
interfaceId == type()(IERC165).interfaceId
Checking function: supportsInterface(bytes4) returns(bool) (Slither line:3127)
Visibility: external
Checking function: hasRole(bytes32,address) returns(bool) (Slither line:3127)
Visibility: external
Checking function: getRoleAdmin(bytes32) returns(bytes32) (Slither line:3127)
Visibility: external
Checking function: grantRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: revokeRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: renounceRole(bytes32,address) returns() (Slither line:3127)
Visibility: external
Checking function: _msgSender() returns(address) (Slither line:3127)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3127)
Visibility: internal
Checking function: allClaimInfos() returns(uint256,uint256[],uint256[],uint256) (Slither line:3127)
Visibility: external
(totalClaimCounts,claimTimes,claimAmounts,nowClaimRound)

End TypeCVaultProxy.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in TypeCVaultProxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin VaultStorage.find_getter_in_contract (Slither line:2974)

proxyImplementation is a Variable object
newImplementation
Checking function: allClaimInfos (Slither line:2988)
allClaimInfos returns uint256 variable  (Slither line:3008)
allClaimInfos returns uint256[] variable  (Slither line:3008)
allClaimInfos returns uint256[] variable  (Slither line:3008)
allClaimInfos returns uint256 variable  (Slither line:3008)
RETURN node expression: (totalClaimCounts,claimTimes,claimAmounts,nowClaimRound) (Slither line:3028)
Checking function: slitherConstructorVariables (Slither line:2988)

End VaultStorage.find_getter_in_contract (Slither line:3083)


Begin TypeCVaultProxy.find_getter_in_contract (Slither line:2974)

proxyImplementation is a Variable object
newImplementation
Checking function: constructor (Slither line:2988)
Checking function: setLogEventAddress (Slither line:2988)
Checking function: setBoolLogEvent (Slither line:2988)
Checking function: setProxyPause (Slither line:2988)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation2(0) (Slither line:3028)
Checking function: upgradeTo (Slither line:2988)
Checking function: implementation2 (Slither line:2988)
implementation2 returns address variable  (Slither line:3008)
RETURN node expression: _implementation2(_index) (Slither line:3028)
Checking function: setImplementation2 (Slither line:2988)
Checking function: setAliveImplementation2 (Slither line:2988)
Checking function: setSelectorImplementations2 (Slither line:2988)
Checking function: _setImplementation2 (Slither line:2988)
Checking function: _setAliveImplementation2 (Slither line:2988)
Checking function: _implementation2 (Slither line:2988)
_implementation2 returns address variable called impl (Slither line:3008)
RETURN node expression: proxyImplementation[_index] (Slither line:3028)

End TypeCVaultProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: _implementation2 in contract: TypeCVaultProxy (Slither line:1285)

Begin TypeCVaultProxy.getter_return_is_non_constant (Slither line:2883)

Found getter function but not setter
Checking if getter calls any other function
ENTRY_POINT: None (Slither line:2888)
RETURN: proxyImplementation[_index] (Slither line:2888)

End TypeCVaultProxy.getter_return_is_non_constant (Slither line:2942)


End TypeCVaultProxy.is_upgradeable_proxy (Slither line:1293)


Begin VaultFactory.is_proxy (Slither line:1425)


End VaultFactory.is_proxy (Slither line:1428)


Begin VaultFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: VaultFactory 

End VaultFactory.is_upgradeable_proxy (Slither line:1407)


Begin TypeCVaultFactory.is_proxy (Slither line:1425)


End TypeCVaultFactory.is_proxy (Slither line:1428)


Begin TypeCVaultFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: TypeCVaultFactory 

End TypeCVaultFactory.is_upgradeable_proxy (Slither line:1407)

