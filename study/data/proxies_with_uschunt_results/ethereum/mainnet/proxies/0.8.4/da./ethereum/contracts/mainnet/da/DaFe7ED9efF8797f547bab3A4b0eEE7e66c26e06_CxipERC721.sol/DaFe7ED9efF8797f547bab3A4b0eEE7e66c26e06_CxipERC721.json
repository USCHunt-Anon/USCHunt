{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "CxipERC721 (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/da./ethereum/contracts/mainnet/da/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol#19-326)",
        "elements": [],
        "description": "CxipERC721 (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/da./ethereum/contracts/mainnet/da/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol#19-326) may be an upgradeable proxy.\n_target is declared in the proxy.\nCxipERC721._royaltiesFallback()._target (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/da./ethereum/contracts/mainnet/da/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol#303) gets value from a cross-contract call: getRegistry().getPA1D()\nICxipRegistry appears to be a Beacon contract for the proxy\nThe address of ICxipRegistry comes from the value of CxipERC721.getRegistry(). (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/da./ethereum/contracts/mainnet/da/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol#24)\nMissing compatibility check in CxipERC721.fallback()\nMissing compatibility check in CxipERC721.receive()\n",
        "id": "21c6f5409371ea73aaaf3fb7efa6e98330f5344b772992e57b8808929e486f3c",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "CxipERC721._royaltiesFallback()._target",
          "impl_address_setter": "not found",
          "impl_address_getter": "not found",
          "impl_address_location": "CxipERC721 (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/da./ethereum/contracts/mainnet/da/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol/DaFe7ED9efF8797f547bab3A4b0eEE7e66c26e06_CxipERC721.sol#19-326)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "getRegistry().getPA1D()",
          "beacon": "ICxipRegistry",
          "beacon_source_type": "ICxipRegistry",
          "beacon_source_variable": "",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "CxipERC721.fallback()": "missing",
              "CxipERC721.receive()": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "erc20": [
              "totalSupply()",
              "transferFrom(address,address,uint256)",
              "approve(address,uint256)",
              "name()",
              "symbol()"
            ],
            "erc165": [
              "supportsInterface(bytes4)"
            ],
            "erc721": [
              "ownerOf(uint256)",
              "safeTransferFrom(address,address,uint256,bytes)",
              "safeTransferFrom(address,address,uint256)",
              "transferFrom(address,address,uint256)",
              "approve(address,uint256)",
              "setApprovalForAll(address,bool)",
              "getApproved(uint256)",
              "isApprovedForAll(address,address)",
              "supportsInterface(bytes4)",
              "name()",
              "symbol()",
              "tokenURI(uint256)"
            ],
            "erc1155": [
              "setApprovalForAll(address,bool)",
              "isApprovedForAll(address,address)",
              "supportsInterface(bytes4)"
            ],
            "other": [
              "init(address,CollectionData)",
              "getIdentity()",
              "owner()",
              "isOwner()",
              "setName(bytes32,bytes32)",
              "setSymbol(bytes32)",
              "transferOwnership(address)",
              "setApprovalForAll(address,address,bool)",
              "transferFrom(address,address,uint256,bytes)",
              "burn(uint256)",
              "cxipMint(uint256,TokenData)",
              "baseURI()",
              "contractURI()",
              "creator(uint256)",
              "payloadHash(uint256)",
              "payloadSignature(uint256)",
              "payloadSigner(uint256)",
              "arweaveURI(uint256)",
              "httpURI(uint256)",
              "ipfsURI(uint256)",
              "verifySHA256(bytes32,bytes)",
              "onERC721Received(address,address,uint256,bytes)"
            ]
          }
        }
      }
    ]
  }
}