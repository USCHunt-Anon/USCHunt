{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "DanielArshamErosions (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol#72-1002)",
        "elements": [],
        "description": "DanielArshamErosions (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol#72-1002) may be an upgradeable proxy.\n_target is declared in the proxy.\nDanielArshamErosions._royaltiesFallback()._target (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol#845) gets value from a cross-contract call: getRegistry().getPA1D()\nICxipRegistry appears to be a Beacon contract for the proxy\nThe address of ICxipRegistry comes from the value of DanielArshamErosions.getRegistry(). (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol#878)\nMissing compatibility check in DanielArshamErosions.receive()\nMissing compatibility check in DanielArshamErosions.fallback()\n",
        "id": "9fcbf6cfe5c3bb9bd8bb7233a627572907c730b1c51b27aae4855912bb56f243",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "DanielArshamErosions._royaltiesFallback()._target",
          "impl_address_setter": "not found",
          "impl_address_getter": "not found",
          "impl_address_location": "DanielArshamErosions (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.4/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol/a61F0C786E34778C8772162e4928cbd2024a8297_DanielArshamErosions.sol#72-1002)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "getRegistry().getPA1D()",
          "beacon": "ICxipRegistry",
          "beacon_source_type": "ICxipRegistry",
          "beacon_source_variable": "",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "DanielArshamErosions.receive()": "missing",
              "DanielArshamErosions.fallback()": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "erc20": [
              "totalSupply()",
              "balanceOf(address)",
              "transferFrom(address,address,uint256)",
              "approve(address,uint256)",
              "name()",
              "symbol()"
            ],
            "erc165": [
              "supportsInterface(bytes4)"
            ],
            "erc721": [
              "balanceOf(address)",
              "ownerOf(uint256)",
              "safeTransferFrom(address,address,uint256,bytes)",
              "safeTransferFrom(address,address,uint256)",
              "transferFrom(address,address,uint256)",
              "approve(address,uint256)",
              "setApprovalForAll(address,bool)",
              "getApproved(uint256)",
              "isApprovedForAll(address,address)",
              "supportsInterface(bytes4)",
              "name()",
              "symbol()",
              "tokenURI(uint256)"
            ],
            "erc1155": [
              "setApprovalForAll(address,bool)",
              "isApprovedForAll(address,address)",
              "supportsInterface(bytes4)"
            ],
            "other": [
              "arweaveURI(uint256)",
              "contractURI()",
              "creator(uint256)",
              "httpURI(uint256)",
              "ipfsURI(uint256)",
              "payloadHash(uint256)",
              "payloadSignature(uint256)",
              "payloadSigner(uint256)",
              "tokensOfOwner(address)",
              "verifySHA256(bytes32,bytes)",
              "burn(uint256)",
              "init(address,CollectionData)",
              "transferFrom(address,address,uint256,bytes)",
              "batchMint(address,uint256,uint256,address)",
              "getStartTimestamp()",
              "getMintingClosed()",
              "setMintingClosed()",
              "getTokenLimit()",
              "setTokenLimit(uint256)",
              "getTokenSeparator()",
              "setTokenSeparator(uint256)",
              "prepareMintData(uint256,TokenData)",
              "prepareMintDataBatch(uint256[],TokenData[])",
              "setRotationConfig(uint256,uint256,uint256,uint256)",
              "getRotationConfig(uint256)",
              "setName(bytes32,bytes32)",
              "setStartTimestamp(uint256)",
              "setSymbol(bytes32)",
              "transferOwnership(address)",
              "baseURI()",
              "getIdentity()",
              "isOwner()",
              "owner()",
              "tokenByIndex(uint256)",
              "tokenOfOwnerByIndex(address,uint256)",
              "onERC721Received(address,address,uint256,bytes)"
            ]
          }
        }
      }
    ]
  }
}