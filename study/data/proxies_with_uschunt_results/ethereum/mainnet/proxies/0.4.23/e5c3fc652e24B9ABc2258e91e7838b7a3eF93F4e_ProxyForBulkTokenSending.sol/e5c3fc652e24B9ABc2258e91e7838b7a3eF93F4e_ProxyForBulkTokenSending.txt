
Begin UpgradeabilityStorage.is_proxy (Slither line:1425)


End UpgradeabilityStorage.is_proxy (Slither line:1428)


Begin UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityStorage 

End UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let freememstart := mload(0x40) (Slither line:1576)
    returndatacopy(freememstart, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End Proxy.find_delegatecall_in_asm (Slither line:1637)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let freememstart := mload(0x40) (Slither line:1576)
    returndatacopy(freememstart, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End Proxy.find_delegatecall_in_asm (Slither line:1637)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2802)
Expression called: require(bool)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0)

End Proxy.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

implementation() (Slither line:2749)

Begin Proxy.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
Got abstract function, looking for overriding function (Slither line:2025)
Failure (Slither line:2033)
implementation returns a variable of type address   (Slither line:2193)
Return value is LocalVariable:  (Slither line:2266)
has no expression (Slither line:2326)

End Proxy.find_delegate_from_call_exp (Slither line:2328)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityOwnerStorage.is_proxy (Slither line:1425)


End UpgradeabilityOwnerStorage.is_proxy (Slither line:1428)


Begin UpgradeabilityOwnerStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityOwnerStorage 

End UpgradeabilityOwnerStorage.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityProxy.is_proxy (Slither line:1425)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let freememstart := mload(0x40) (Slither line:1576)
    returndatacopy(freememstart, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1637)


Begin UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let freememstart := mload(0x40) (Slither line:1576)
    returndatacopy(freememstart, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin UpgradeabilityProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2802)
Expression called: require(bool)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0)

End UpgradeabilityProxy.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

implementation() (Slither line:2749)

Begin UpgradeabilityProxy.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2041)
_implementation (Slither line:2048)
implementation returns a variable of type address   called _implementation (Slither line:2193)

End UpgradeabilityProxy.find_delegate_from_call_exp (Slither line:2328)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End UpgradeabilityProxy.is_proxy (Slither line:1476)


Begin UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityProxy 
UpgradeabilityProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3119)

Checking function: version() returns(string) (Slither line:3127)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in UpgradeabilityStorage 
Looking in UpgradeabilityProxy (Slither line:1213)

Begin UpgradeabilityProxy.find_setter_in_contract (Slither line:3119)

Checking function: _upgradeTo(string,address) returns() (Slither line:3127)
Visibility: internal
Checking function: version() returns(string) (Slither line:3127)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
_implementation
Checking function: fallback() returns() (Slither line:3127)
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public

End UpgradeabilityProxy.find_setter_in_contract (Slither line:3345)


Could not find setter in UpgradeabilityProxy (Slither line:1220)

Begin UpgradeabilityProxy.find_setter_in_contract (Slither line:3119)

Checking function: _upgradeTo(string,address) returns() (Slither line:3127)
Visibility: internal
Checking function: version() returns(string) (Slither line:3127)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
_implementation
Checking function: fallback() returns() (Slither line:3127)
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public

End UpgradeabilityProxy.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in UpgradeabilityProxy (Slither line:1269)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2974)

_implementation is a Variable object
Checking function: version (Slither line:2988)
version returns string variable  (Slither line:3008)
RETURN node expression: _version (Slither line:3028)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation (Slither line:3028)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

Begin UpgradeabilityProxy.getter_return_is_non_constant (Slither line:2883)

Found getter function but not setter
Checking if getter calls any other function
RETURN: _implementation (Slither line:2888)
ENTRY_POINT: None (Slither line:2888)

End UpgradeabilityProxy.getter_return_is_non_constant (Slither line:2942)


End UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1293)


Begin OwnedUpgradeabilityProxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

implementation() (Slither line:2749)

Begin OwnedUpgradeabilityProxy.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2041)
_implementation (Slither line:2048)
implementation returns a variable of type address   called _implementation (Slither line:2193)

End OwnedUpgradeabilityProxy.find_delegate_from_call_exp (Slither line:2328)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End OwnedUpgradeabilityProxy.is_proxy (Slither line:1476)


Begin OwnedUpgradeabilityProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: OwnedUpgradeabilityProxy 
OwnedUpgradeabilityProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3119)

Checking function: version() returns(string) (Slither line:3127)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in UpgradeabilityStorage 
Looking in OwnedUpgradeabilityProxy (Slither line:1213)

Begin OwnedUpgradeabilityProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: proxyOwner() returns(address) (Slither line:3127)
Visibility: public
_upgradeabilityOwner
upgradeabilityOwner()
Checking function: transferProxyOwnership(address) returns() (Slither line:3127)
Visibility: public
onlyProxyOwner()
require(bool)(newOwner != address(0))
ProxyOwnershipTransferred(proxyOwner(),newOwner)
require(bool)(msg.sender == proxyOwner())
_upgradeabilityOwner = newUpgradeabilityOwner
is an Assignment Operation (Slither line:3216)
_upgradeabilityOwner
setUpgradeabilityOwner(newOwner)
upgradeabilityOwner()
Checking function: upgradeTo(string,address) returns() (Slither line:3127)
Visibility: public
_version = version
is an Assignment Operation (Slither line:3216)
onlyProxyOwner()
require(bool)(msg.sender == proxyOwner())
_implementation = implementation
is an Assignment Operation (Slither line:3216)

End OwnedUpgradeabilityProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: OwnedUpgradeabilityProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2974)

_implementation is a Variable object
implementation
Checking function: version (Slither line:2988)
version returns string variable  (Slither line:3008)
RETURN node expression: _version (Slither line:3028)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation (Slither line:3028)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End OwnedUpgradeabilityProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: implementation
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression _impl.delegatecall(msg.data)
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
Checking public function version
Checking public function implementation
Checking public function implementation
Checking public function upgradeabilityOwner
Checking public function proxyOwner
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeToAndCall
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.proxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.transferProxyOwnership (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.upgradeToAndCall (proxy_features line:898)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeToAndCall writes implementation to _implementation (proxy_features line:1013)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.upgradeabilityOwner (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.setUpgradeabilityOwner (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.version (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy._upgradeTo (proxy_features line:898)
functions_writing_to_variable: exp = require(bool)(_implementation != implementation) (proxy_features line:909)
functions_writing_to_variable: exp = _version = version (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _version = version (proxy_features line:912)
functions_writing_to_variable: exp = _implementation = implementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _implementation = implementation (proxy_features line:912)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:924)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: exp = Upgraded(version,implementation) (proxy_features line:909)
functions_writing_to_variable: _upgradeTo writes implementation to _implementation (proxy_features line:929)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.upgradeTo (proxy_features line:898)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeTo writes implementation to _implementation (proxy_features line:1013)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function OwnedUpgradeabilityProxy.fallback (proxy_features line:898)
has_compatibility_checks: dependencies: ['implementation', 'implementation', 'implementation']
has_compatibility_checks: checking public function upgradeToAndCall
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(address(this).call.value(msg.value)(data))
has_compatibility_checks: condition address(this).call.value(msg.value)(data)
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: checking public function upgradeTo
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
Found public function: version
has_time_delay: (node.type) EXPRESSION
(Expression) _version = version
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner())
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = implementation
has_time_delay: (node.type) RETURN
(Expression) _upgradeabilityOwner
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_implementation != implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(version,implementation)
has_time_delay: (node.type) RETURN
(Expression) upgradeabilityOwner()

Begin EternalStorage.is_proxy (Slither line:1425)


End EternalStorage.is_proxy (Slither line:1428)


Begin EternalStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: EternalStorage 

End EternalStorage.is_upgradeable_proxy (Slither line:1407)


Begin ProxyForBulkTokenSending.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin ProxyForBulkTokenSending.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let freememstart := mload(0x40) (Slither line:1576)
    returndatacopy(freememstart, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End ProxyForBulkTokenSending.find_delegatecall_in_asm (Slither line:1637)


Begin ProxyForBulkTokenSending.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let freememstart := mload(0x40) (Slither line:1576)
    returndatacopy(freememstart, 0, returndatasize()) (Slither line:1576)
    switch success (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(freememstart, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End ProxyForBulkTokenSending.find_delegatecall_in_asm (Slither line:1637)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin ProxyForBulkTokenSending.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2802)
Expression called: require(bool)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0)

End ProxyForBulkTokenSending.find_delegatecall_in_exp_node (Slither line:2858)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

implementation() (Slither line:2749)

Begin ProxyForBulkTokenSending.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2041)
_implementation (Slither line:2048)
implementation returns a variable of type address   called _implementation (Slither line:2193)

End ProxyForBulkTokenSending.find_delegate_from_call_exp (Slither line:2328)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End ProxyForBulkTokenSending.is_proxy (Slither line:1476)


Begin ProxyForBulkTokenSending.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyForBulkTokenSending 
ProxyForBulkTokenSending is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3119)

Expression: implementation (Slither line:3122)
Checking function: version() returns(string) (Slither line:3127)
Visibility: public
_version
Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in UpgradeabilityStorage 
Looking in ProxyForBulkTokenSending (Slither line:1213)

Begin ProxyForBulkTokenSending.find_setter_in_contract (Slither line:3119)

Expression: implementation (Slither line:3122)
Checking function: constructor(address) returns() (Slither line:3127)
Checking function: constructor(address) returns() (Slither line:3127)
Checking function: proxyOwner() returns(address) (Slither line:3127)
Visibility: public
upgradeabilityOwner()
_upgradeabilityOwner
Checking function: transferProxyOwnership(address) returns() (Slither line:3127)
Visibility: public
require(bool)(msg.sender == proxyOwner())
ProxyOwnershipTransferred(proxyOwner(),newOwner)
_upgradeabilityOwner = newUpgradeabilityOwner
is an Assignment Operation (Slither line:3216)
implementation
_upgradeabilityOwner
setUpgradeabilityOwner(newOwner)
upgradeabilityOwner()
onlyProxyOwner()
require(bool)(newOwner != address(0))
Checking function: upgradeTo(string,address) returns() (Slither line:3127)
Visibility: public
require(bool)(msg.sender == proxyOwner())
onlyProxyOwner()
_implementation = implementation
is an Assignment Operation (Slither line:3216)
implementation

End ProxyForBulkTokenSending.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: ProxyForBulkTokenSending (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2974)

_implementation is a Variable object
implementation
Checking function: version (Slither line:2988)
version returns string variable  (Slither line:3008)
RETURN node expression: _version (Slither line:3028)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation (Slither line:3028)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End ProxyForBulkTokenSending.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: implementation
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
impl_address_from_contract_call: CallExpression _impl.delegatecall(msg.data)
Checking public function proxyOwner
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeToAndCall
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function version
Checking public function implementation
Checking public function implementation
Checking public function upgradeabilityOwner
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function ProxyForBulkTokenSending.upgradeTo (proxy_features line:898)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeTo writes implementation to _implementation (proxy_features line:1013)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.version (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending._upgradeTo (proxy_features line:898)
functions_writing_to_variable: exp = require(bool)(_implementation != implementation) (proxy_features line:909)
functions_writing_to_variable: exp = _version = version (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _version = version (proxy_features line:912)
functions_writing_to_variable: exp = _implementation = implementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _implementation = implementation (proxy_features line:912)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:924)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: exp = Upgraded(version,implementation) (proxy_features line:909)
functions_writing_to_variable: _upgradeTo writes implementation to _implementation (proxy_features line:929)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.implementation (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.fallback (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.implementation (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.constructor (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.upgradeabilityOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.setUpgradeabilityOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.proxyOwner (proxy_features line:898)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.upgradeToAndCall (proxy_features line:898)
get_value_assigned: _implementation = implementation
functions_writing_to_variable: upgradeToAndCall writes implementation to _implementation (proxy_features line:1013)
functions_writing_to_variable: checking function ProxyForBulkTokenSending.transferProxyOwnership (proxy_features line:898)
has_compatibility_checks: dependencies: ['implementation', 'implementation', 'implementation']
has_compatibility_checks: checking public function upgradeTo
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
has_compatibility_checks: skipping internal function _upgradeTo
has_compatibility_checks: checking public function upgradeToAndCall
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(address(this).call.value(msg.value)(data))
has_compatibility_checks: condition address(this).call.value(msg.value)(data)
require(bool)(_implementation != implementation)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation != implementation
Found public function: constructor
Found public function: proxyOwner
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner())
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = implementation
has_time_delay: (node.type) RETURN
(Expression) _upgradeabilityOwner
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_implementation != implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(version,implementation)
has_time_delay: (node.type) RETURN
(Expression) upgradeabilityOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _version = version
