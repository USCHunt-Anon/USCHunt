{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "Proxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#11-38)",
        "elements": [],
        "description": "Proxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#11-38) is a proxy, but doesn't seem upgradeable.\n",
        "id": "cb70bcec6d81585d7521ef499de1dc4cc025c9eb09a62b94cfe4ec81796afff6",
        "features": {
          "upgradeable": false
        }
      },
      {
        "contract": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#42-73)",
        "elements": [],
        "description": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#42-73) is a proxy, but doesn't seem upgradeable.\n",
        "id": "b99d6b8ca254ac45fc8d35ed098628eebf5fbf799bbd280fb6d2ca7084616d5a",
        "features": {
          "upgradeable": false
        }
      },
      {
        "contract": "UpgradableNetwork (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#77-140)",
        "elements": [],
        "description": "UpgradableNetwork (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#77-140) is an upgradeable proxy.\nimplStorageAddress was found in a different contract.\n uses Unstructured Storage\n uses non-standard slot: keccak256(bytes)(network.provide.proxy.implementation)\nFound compatibility checks in all upgrade functions.\n",
        "id": "209571550de94b8472faa80da0b72d22052a35e1cf34acad4f7ea1f0b0041bb4",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "UpgradableProxy.implStorageAddress",
          "impl_address_setter": "UpgradableNetwork.__upgrade(address)",
          "impl_address_getter": "UpgradableProxy.__implementation()",
          "impl_address_location": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#42-73)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "bytes32 constant storage slot",
          "impl_address_slot": "keccak256(bytes)(network.provide.proxy.implementation)",
          "unstructured_storage": true,
          "eip_1967": false,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": {
              "UpgradableNetwork.__upgrade(address)": {
                "check": "require(bool,string)(_current != _implementation,given implementation contract address is already set)",
                "is_correct": true
              },
              "UpgradableNetwork.__upgradeInit(address,bytes)": {
                "check": "require(bool,string)(_current != _implementation,given implementation contract address is already set)",
                "is_correct": true
              }
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "__implementation()",
              "__implementation()",
              "__owner()",
              "__transferOwnership(address)",
              "__upgrade(address)",
              "__upgradeInit(address,bytes)"
            ]
          }
        }
      },
      {
        "contract": "Provide (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#144-156)",
        "elements": [],
        "description": "Provide (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#144-156) is an upgradeable proxy.\nimplStorageAddress was found in a different contract.\n uses Unstructured Storage\n uses non-standard slot: keccak256(bytes)(network.provide.proxy.implementation)\nFound compatibility checks in all upgrade functions.\n",
        "id": "80132aba6e050b449ceab636c713aaa93c225ac707a5e892766bb4c31ba84395",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "UpgradableProxy.implStorageAddress",
          "impl_address_setter": "UpgradableNetwork.__upgrade(address)",
          "impl_address_getter": "UpgradableProxy.__implementation()",
          "impl_address_location": "UpgradableProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.8.2/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol/b3e144806577d79677c26d20f15ed43adcb2cd05_Provide.sol#42-73)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "bytes32 constant storage slot",
          "impl_address_slot": "keccak256(bytes)(network.provide.proxy.implementation)",
          "unstructured_storage": true,
          "eip_1967": false,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": {
              "UpgradableNetwork.__upgrade(address)": {
                "check": "require(bool,string)(_current != _implementation,given implementation contract address is already set)",
                "is_correct": true
              },
              "UpgradableNetwork.__upgradeInit(address,bytes)": {
                "check": "require(bool,string)(_current != _implementation,given implementation contract address is already set)",
                "is_correct": true
              }
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "__owner()",
              "__transferOwnership(address)",
              "__upgrade(address)",
              "__upgradeInit(address,bytes)",
              "__implementation()",
              "__implementation()"
            ]
          }
        }
      }
    ]
  }
}