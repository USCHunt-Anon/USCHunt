{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "ZkSync (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.7.0/aa/ethereum/contracts/mainnet/aa/AaE5EC8aC85eC1b14D802A4b2e4D7494f2Fe2202_ZkSync.sol/AaE5EC8aC85eC1b14D802A4b2e4D7494f2Fe2202_ZkSync.sol#4444-4834)",
        "elements": [],
        "description": "ZkSync (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.7.0/aa/ethereum/contracts/mainnet/aa/AaE5EC8aC85eC1b14D802A4b2e4D7494f2Fe2202_ZkSync.sol/AaE5EC8aC85eC1b14D802A4b2e4D7494f2Fe2202_ZkSync.sol#4444-4834) is an upgradeable proxy.\nzkSyncCommitBlockAddress was found in a different contract.\nzkSyncCommitBlockAddress is an address state variable.\nMissing compatibility check in ZkSync.initialize(bytes)\n",
        "id": "eb5f93ffe24a68b10669210d586c3f9083b757bb2aafc0350347efeb7e5cde31",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "Storage.zkSyncCommitBlockAddress",
          "impl_address_setter": "ZkSync.upgrade(bytes)",
          "impl_address_getter": "not found",
          "impl_address_location": "Storage (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.7.0/aa/ethereum/contracts/mainnet/aa/AaE5EC8aC85eC1b14D802A4b2e4D7494f2Fe2202_ZkSync.sol/AaE5EC8aC85eC1b14D802A4b2e4D7494f2Fe2202_ZkSync.sol#3423-3526)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "ZkSync.initialize(bytes)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "hashStoredBlockInfo(Storage.StoredBlockInfo)",
              "getNoticePeriod()",
              "upgradeNoticePeriodStarted()",
              "upgradePreparationStarted()",
              "upgradeCanceled()",
              "upgradeFinishes()",
              "isReadyForUpgrade()",
              "validatePairTokenAddress(address)",
              "pairFor(address,address,bytes32)",
              "createPair(address,address,bytes32)",
              "createETHPair(address,bytes32)",
              "getNoticePeriod()",
              "upgradeNoticePeriodStarted()",
              "upgradePreparationStarted()",
              "upgradeCanceled()",
              "upgradeFinishes()",
              "isReadyForUpgrade()",
              "initialize(bytes)",
              "upgrade(bytes)",
              "cancelOutstandingDepositsForExodusMode(uint64,bytes[])",
              "depositETH()",
              "depositERC20(IERC20,uint104)",
              "getPendingBalance(address,address)",
              "getBalanceToWithdraw(address,uint16)",
              "requestFullExit(uint32,address)",
              "activateExodusMode()"
            ]
          }
        }
      }
    ]
  }
}