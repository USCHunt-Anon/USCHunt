
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin SafeMathUInt128.is_proxy (Slither line:1425)


End SafeMathUInt128.is_proxy (Slither line:1428)


Begin SafeMathUInt128.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMathUInt128 

End SafeMathUInt128.is_upgradeable_proxy (Slither line:1407)


Begin SafeCast.is_proxy (Slither line:1425)


End SafeCast.is_proxy (Slither line:1428)


Begin SafeCast.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeCast 

End SafeCast.is_upgradeable_proxy (Slither line:1407)


Begin Utils.is_proxy (Slither line:1425)


End Utils.is_proxy (Slither line:1428)


Begin Utils.is_upgradeable_proxy (Slither line:1136)

Checking contract: Utils 

End Utils.is_upgradeable_proxy (Slither line:1407)


Begin Events.is_proxy (Slither line:1425)


End Events.is_proxy (Slither line:1428)


Begin Events.is_upgradeable_proxy (Slither line:1136)

Checking contract: Events 

End Events.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeEvents.is_proxy (Slither line:1425)


End UpgradeEvents.is_proxy (Slither line:1428)


Begin UpgradeEvents.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeEvents 

End UpgradeEvents.is_upgradeable_proxy (Slither line:1407)


Begin Bytes.is_proxy (Slither line:1425)


End Bytes.is_proxy (Slither line:1428)


Begin Bytes.is_upgradeable_proxy (Slither line:1136)

Checking contract: Bytes 

End Bytes.is_upgradeable_proxy (Slither line:1407)


Begin Operations.is_proxy (Slither line:1425)


End Operations.is_proxy (Slither line:1428)


Begin Operations.is_upgradeable_proxy (Slither line:1136)

Checking contract: Operations 

End Operations.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeableMaster.is_proxy (Slither line:1425)


End UpgradeableMaster.is_proxy (Slither line:1428)


Begin UpgradeableMaster.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeableMaster 

End UpgradeableMaster.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin PairingsBn254.is_proxy (Slither line:1425)


End PairingsBn254.is_proxy (Slither line:1428)


Begin PairingsBn254.is_upgradeable_proxy (Slither line:1136)

Checking contract: PairingsBn254 

End PairingsBn254.is_upgradeable_proxy (Slither line:1407)


Begin TranscriptLibrary.is_proxy (Slither line:1425)


End TranscriptLibrary.is_proxy (Slither line:1428)


Begin TranscriptLibrary.is_upgradeable_proxy (Slither line:1136)

Checking contract: TranscriptLibrary 

End TranscriptLibrary.is_upgradeable_proxy (Slither line:1407)


Begin Math.is_proxy (Slither line:1425)


End Math.is_proxy (Slither line:1428)


Begin Math.is_upgradeable_proxy (Slither line:1136)

Checking contract: Math 

End Math.is_upgradeable_proxy (Slither line:1407)


Begin UQ112x112.is_proxy (Slither line:1425)


End UQ112x112.is_proxy (Slither line:1428)


Begin UQ112x112.is_upgradeable_proxy (Slither line:1136)

Checking contract: UQ112x112 

End UQ112x112.is_upgradeable_proxy (Slither line:1407)


Begin UniswapSafeMath.is_proxy (Slither line:1425)


End UniswapSafeMath.is_proxy (Slither line:1428)


Begin UniswapSafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: UniswapSafeMath 

End UniswapSafeMath.is_upgradeable_proxy (Slither line:1407)


Begin Upgradeable.is_proxy (Slither line:1425)


End Upgradeable.is_proxy (Slither line:1428)


Begin Upgradeable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Upgradeable 

End Upgradeable.is_upgradeable_proxy (Slither line:1407)


Begin ReentrancyGuard.is_proxy (Slither line:1425)


End ReentrancyGuard.is_proxy (Slither line:1428)


Begin ReentrancyGuard.is_upgradeable_proxy (Slither line:1136)

Checking contract: ReentrancyGuard 

End ReentrancyGuard.is_upgradeable_proxy (Slither line:1407)


Begin UniswapV2ERC20.is_proxy (Slither line:1425)


End UniswapV2ERC20.is_proxy (Slither line:1428)


Begin UniswapV2ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: UniswapV2ERC20 

End UniswapV2ERC20.is_upgradeable_proxy (Slither line:1407)


Begin Plonk4VerifierWithAccessToDNext.is_proxy (Slither line:1425)


End Plonk4VerifierWithAccessToDNext.is_proxy (Slither line:1428)


Begin Plonk4VerifierWithAccessToDNext.is_upgradeable_proxy (Slither line:1136)

Checking contract: Plonk4VerifierWithAccessToDNext 

End Plonk4VerifierWithAccessToDNext.is_upgradeable_proxy (Slither line:1407)


Begin Plonk4VerifierWithAccessToDNextOld.is_proxy (Slither line:1425)


End Plonk4VerifierWithAccessToDNextOld.is_proxy (Slither line:1428)


Begin Plonk4VerifierWithAccessToDNextOld.is_upgradeable_proxy (Slither line:1136)

Checking contract: Plonk4VerifierWithAccessToDNextOld 

End Plonk4VerifierWithAccessToDNextOld.is_upgradeable_proxy (Slither line:1407)


Begin Storage.is_proxy (Slither line:1425)


End Storage.is_proxy (Slither line:1428)


Begin Storage.is_upgradeable_proxy (Slither line:1136)

Checking contract: Storage 

End Storage.is_upgradeable_proxy (Slither line:1407)


Begin VerifierWithDeserializeOld.is_proxy (Slither line:1425)


End VerifierWithDeserializeOld.is_proxy (Slither line:1428)


Begin VerifierWithDeserializeOld.is_upgradeable_proxy (Slither line:1136)

Checking contract: VerifierWithDeserializeOld 

End VerifierWithDeserializeOld.is_upgradeable_proxy (Slither line:1407)


Begin PairTokenManager.is_proxy (Slither line:1425)


End PairTokenManager.is_proxy (Slither line:1428)


Begin PairTokenManager.is_upgradeable_proxy (Slither line:1136)

Checking contract: PairTokenManager 

End PairTokenManager.is_upgradeable_proxy (Slither line:1407)


Begin VerifierWithDeserialize.is_proxy (Slither line:1425)


End VerifierWithDeserialize.is_proxy (Slither line:1428)


Begin VerifierWithDeserialize.is_upgradeable_proxy (Slither line:1136)

Checking contract: VerifierWithDeserialize 

End VerifierWithDeserialize.is_upgradeable_proxy (Slither line:1407)


Begin UniswapV2Pair.is_proxy (Slither line:1425)


End UniswapV2Pair.is_proxy (Slither line:1428)


Begin UniswapV2Pair.is_upgradeable_proxy (Slither line:1136)

Checking contract: UniswapV2Pair 

End UniswapV2Pair.is_upgradeable_proxy (Slither line:1407)


Begin KeysWithPlonkVerifierOld.is_proxy (Slither line:1425)


End KeysWithPlonkVerifierOld.is_proxy (Slither line:1428)


Begin KeysWithPlonkVerifierOld.is_upgradeable_proxy (Slither line:1136)

Checking contract: KeysWithPlonkVerifierOld 

End KeysWithPlonkVerifierOld.is_upgradeable_proxy (Slither line:1407)


Begin UniswapV2Factory.is_proxy (Slither line:1425)


End UniswapV2Factory.is_proxy (Slither line:1428)


Begin UniswapV2Factory.is_upgradeable_proxy (Slither line:1136)

Checking contract: UniswapV2Factory 

End UniswapV2Factory.is_upgradeable_proxy (Slither line:1407)


Begin Config.is_proxy (Slither line:1425)


End Config.is_proxy (Slither line:1428)


Begin Config.is_upgradeable_proxy (Slither line:1136)

Checking contract: Config 

End Config.is_upgradeable_proxy (Slither line:1407)


Begin Governance.is_proxy (Slither line:1425)


End Governance.is_proxy (Slither line:1428)


Begin Governance.is_upgradeable_proxy (Slither line:1136)

Checking contract: Governance 

End Governance.is_upgradeable_proxy (Slither line:1407)


Begin ZkSync.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin ZkSync.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),nextAddress,0,calldatasize()(),0,0) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2817)
Args:
gas()()
nextAddress
0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2824)

Destination is nextAddress (Slither line:2828)
dest.value: nextAddress (Slither line:2831)
Expression: zkSyncCommitBlockAddress (Slither line:2836)

End ZkSync.find_delegatecall_in_exp_node (Slither line:2858)


End ZkSync.is_proxy (Slither line:1476)


Begin ZkSync.is_upgradeable_proxy (Slither line:1136)

Checking contract: ZkSync 
ZkSync is delegating to zkSyncCommitBlockAddress
Looking for setter (Slither line:1200)

Looking for setter in Storage (Slither line:1204)


Begin Storage.find_setter_in_contract (Slither line:3119)

Checking function: packAddressAndTokenId(address,uint16) returns(bytes22) (Slither line:3127)
Visibility: internal
Checking function: hashStoredBlockInfo(Storage.StoredBlockInfo) returns(bytes32) (Slither line:3127)
Visibility: public
keccak256(bytes)(abi.encode(_storedBlockInfo))
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal

End Storage.find_setter_in_contract (Slither line:3345)


Could not find setter in Storage 
Looking in ZkSync (Slither line:1213)

Begin ZkSync.find_setter_in_contract (Slither line:3119)

Checking function: pairFor(address,address,bytes32) returns(address) (Slither line:3127)
Visibility: external
pair = pairmanager.pairFor(tokenA,tokenB,_salt)
is an Assignment Operation (Slither line:3216)
Checking function: createPair(address,address,bytes32) returns() (Slither line:3127)
Visibility: external
OnchainCreatePair(token0,token1,_tokenPair,_pair)
require(bool,string)(! exodusMode,L)
priorityRequests[nextPriorityRequestId] = PriorityOperation(hashedPubData,expirationBlock,_opType)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
totalPairTokens ++
(token0,token1,token0_id,token1_id) = (_tokenB,_tokenA,tokenBID,tokenAID)
is an Assignment Operation (Slither line:3216)
tokenAddresses[newPairTokenId] = _token
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
NewPriorityRequest(msg.sender,nextPriorityRequestId,_opType,_pubData,uint256(expirationBlock))
require(bool,string)(_tokenA != _tokenB || keccak256(bytes)(abi.encodePacked(IERC20(_tokenA).symbol())) == keccak256(bytes)(abi.encodePacked(EGS)),pair same token invalid)
tokenIds[_token] = newPairTokenId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
totalOpenPriorityRequests ++
requireActive()
NewToken(_token,newPairTokenId)
require(bool,string)(pair != address(0),pair is invalid)
governance.requireGovernor(msg.sender)
require(bool,string)(tokenId != 0,pms3)
addPairToken(pair)
require(bool,string)(tokenId < (PAIR_TOKEN_START_ID + MAX_AMOUNT_OF_PAIR_TOKENS),pms4)
registerCreatePair(token0_id,token1_id,validatePairTokenAddress(pair),pair)
require(bool,string)(tokenId >= PAIR_TOKEN_START_ID,pms5)
buf = abi.encodePacked(OpType.CreatePair,bytes4(0),op.tokenA,op.tokenB,op.tokenPair,op.pair)
is an Assignment Operation (Slither line:3216)
tokenId
addPriorityRequest(Operations.OpType.CreatePair,pubData)
(token0,token1) = (_tokenA,_tokenB)
is an Assignment Operation (Slither line:3216)
(token0,token1) = (_tokenB,_tokenA)
is an Assignment Operation (Slither line:3216)
require(bool,string)(tokenIds[_token] == 0,pan1)
require(bool,string)(totalPairTokens < MAX_AMOUNT_OF_PAIR_TOKENS,pan2)
(token0,token1,token0_id,token1_id) = (_tokenA,_tokenB,tokenAID,tokenBID)
is an Assignment Operation (Slither line:3216)
bytes20(uint160(uint256(keccak256(bytes)(_bytes))))
Checking function: createETHPair(address,bytes32) returns() (Slither line:3127)
Visibility: external
OnchainCreatePair(token0,token1,_tokenPair,_pair)
require(bool,string)(! exodusMode,L)
governance.requireGovernor(msg.sender)
registerCreatePair(0,erc20ID,validatePairTokenAddress(pair),pair)
priorityRequests[nextPriorityRequestId] = PriorityOperation(hashedPubData,expirationBlock,_opType)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
totalPairTokens ++
tokenAddresses[newPairTokenId] = _token
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
NewPriorityRequest(msg.sender,nextPriorityRequestId,_opType,_pubData,uint256(expirationBlock))
tokenIds[_token] = newPairTokenId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
totalOpenPriorityRequests ++
addPairToken(pair)
requireActive()
NewToken(_token,newPairTokenId)
require(bool,string)(tokenId != 0,pms3)
require(bool,string)(tokenId < (PAIR_TOKEN_START_ID + MAX_AMOUNT_OF_PAIR_TOKENS),pms4)
require(bool,string)(pair != address(0),pair is invalid)
require(bool,string)(tokenId >= PAIR_TOKEN_START_ID,pms5)
buf = abi.encodePacked(OpType.CreatePair,bytes4(0),op.tokenA,op.tokenB,op.tokenPair,op.pair)
is an Assignment Operation (Slither line:3216)
tokenId
addPriorityRequest(Operations.OpType.CreatePair,pubData)
(token0,token1) = (_tokenA,_tokenB)
is an Assignment Operation (Slither line:3216)
(token0,token1) = (_tokenB,_tokenA)
is an Assignment Operation (Slither line:3216)
require(bool,string)(tokenIds[_token] == 0,pan1)
require(bool,string)(totalPairTokens < MAX_AMOUNT_OF_PAIR_TOKENS,pan2)
bytes20(uint160(uint256(keccak256(bytes)(_bytes))))
Checking function: registerCreatePair(uint16,uint16,uint16,address) returns() (Slither line:3127)
Visibility: internal
Checking function: getNoticePeriod() returns(uint256) (Slither line:3127)
Visibility: external
UPGRADE_NOTICE_PERIOD
Checking function: upgradeNoticePeriodStarted() returns() (Slither line:3127)
Visibility: external
Checking function: upgradePreparationStarted() returns() (Slither line:3127)
Visibility: external
upgradePreparationActive = true
is an Assignment Operation (Slither line:3216)
upgradePreparationActivationTime = block.timestamp
is an Assignment Operation (Slither line:3216)
Checking function: upgradeCanceled() returns() (Slither line:3127)
Visibility: external
upgradePreparationActive = false
is an Assignment Operation (Slither line:3216)
upgradePreparationActivationTime = 0
is an Assignment Operation (Slither line:3216)
Checking function: upgradeFinishes() returns() (Slither line:3127)
Visibility: external
upgradePreparationActive = false
is an Assignment Operation (Slither line:3216)
upgradePreparationActivationTime = 0
is an Assignment Operation (Slither line:3216)
Checking function: isReadyForUpgrade() returns(bool) (Slither line:3127)
Visibility: external
! exodusMode
Checking function: initialize(bytes) returns() (Slither line:3127)
Checking function: addPriorityRequest(Operations.OpType,bytes) returns() (Slither line:3127)
Visibility: internal
Checking function: upgrade(bytes) returns() (Slither line:3127)
Visibility: external
None
nonReentrant()
require(bool,string)(totalBlocksCommitted == totalBlocksProven,wq1)
None
keccak256(bytes)(abi.encode(_storedBlockInfo))
require(bool,string)(totalBlocksCommitted == totalBlocksExecuted,w12)
zkSyncCommitBlockAddress = address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
is an Assignment Operation (Slither line:3216)

End ZkSync.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgrade in contract: ZkSync (Slither line:1264)
Looking for getter (Slither line:1273)


Begin Storage.find_getter_in_contract (Slither line:2974)

zkSyncCommitBlockAddress is a Variable object
address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
Checking function: packAddressAndTokenId (Slither line:2988)
packAddressAndTokenId returns bytes22 variable  (Slither line:3008)
RETURN node expression: bytes22((uint176(_address) | (uint176(_tokenId) << 160))) (Slither line:3028)
Checking function: hashStoredBlockInfo (Slither line:2988)
hashStoredBlockInfo returns bytes32 variable  (Slither line:3008)
RETURN node expression: keccak256(bytes)(abi.encode(_storedBlockInfo)) (Slither line:3028)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End Storage.find_getter_in_contract (Slither line:3083)


Begin ZkSync.find_getter_in_contract (Slither line:2974)

zkSyncCommitBlockAddress is a Variable object
address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
Checking function: initializeReentrancyGuard (Slither line:2988)
Checking function: packAddressAndTokenId (Slither line:2988)
packAddressAndTokenId returns bytes22 variable  (Slither line:3008)
RETURN node expression: bytes22((uint176(_address) | (uint176(_tokenId) << 160))) (Slither line:3028)
Checking function: hashStoredBlockInfo (Slither line:2988)
hashStoredBlockInfo returns bytes32 variable  (Slither line:3008)
RETURN node expression: keccak256(bytes)(abi.encode(_storedBlockInfo)) (Slither line:3028)
Checking function: addPairToken (Slither line:2988)
Checking function: validatePairTokenAddress (Slither line:2988)
validatePairTokenAddress returns uint16 variable  (Slither line:3008)
RETURN node expression: tokenId (Slither line:3028)
Checking function: pairFor (Slither line:2988)
pairFor returns address variable called pair (Slither line:3008)
Checking function: createPair (Slither line:2988)
Checking function: createETHPair (Slither line:2988)
Checking function: registerCreatePair (Slither line:2988)
Checking function: getNoticePeriod (Slither line:2988)
getNoticePeriod returns uint256 variable  (Slither line:3008)
RETURN node expression: UPGRADE_NOTICE_PERIOD (Slither line:3028)
Checking function: upgradeNoticePeriodStarted (Slither line:2988)
Checking function: upgradePreparationStarted (Slither line:2988)
Checking function: upgradeCanceled (Slither line:2988)
Checking function: upgradeFinishes (Slither line:2988)
Checking function: isReadyForUpgrade (Slither line:2988)
isReadyForUpgrade returns bool variable  (Slither line:3008)
RETURN node expression: ! exodusMode (Slither line:3028)
Checking function: initialize (Slither line:2988)
Checking function: addPriorityRequest (Slither line:2988)
Checking function: upgrade (Slither line:2988)
Checking function: requireActive (Slither line:2988)
Checking function: cancelOutstandingDepositsForExodusMode (Slither line:2988)
Checking function: depositETH (Slither line:2988)
Checking function: depositERC20 (Slither line:2988)
Checking function: getPendingBalance (Slither line:2988)
getPendingBalance returns uint128 variable  (Slither line:3008)
RETURN node expression: pendingBalances[packAddressAndTokenId(_address,tokenId)].balanceToWithdraw (Slither line:3028)
Checking function: getBalanceToWithdraw (Slither line:2988)
getBalanceToWithdraw returns uint128 variable  (Slither line:3008)
RETURN node expression: pendingBalances[packAddressAndTokenId(_address,_tokenId)].balanceToWithdraw (Slither line:3028)
Checking function: requestFullExit (Slither line:2988)
Checking function: activateExodusMode (Slither line:2988)
activateExodusMode returns bool variable  (Slither line:3008)
RETURN node expression: false (Slither line:3028)
RETURN node expression: true (Slither line:3028)
Checking function: registerDeposit (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End ZkSync.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in ZkSync (Slither line:1305)
or in Storage (Slither line:1319)
Checking for zkSyncCommitBlockAddress at slot 23 in contract Config (Slither line:1355)
Found PRIORITY_EXPIRATION at slot 23 in contract Config (Slither line:1362)
Checking for PRIORITY_EXPIRATION at slot 23 in contract Governance (Slither line:1355)
Found PRIORITY_EXPIRATION at slot 23 in contract Governance (Slither line:1362)
Checking for PRIORITY_EXPIRATION at slot 23 in contract VerifierExit (Slither line:1355)
Found FULL_EXIT_BYTES at slot 23 in contract VerifierExit (Slither line:1362)
Checking for FULL_EXIT_BYTES at slot 23 in contract Verifier (Slither line:1355)
Found SUCCESS_FLAG_BYTES at slot 23 in contract Verifier (Slither line:1362)

Begin SafeMath.find_getter_in_contract (Slither line:2974)

zkSyncCommitBlockAddress is a Variable object
address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
Checking function: add (Slither line:2988)
add returns uint256 variable  (Slither line:3008)
RETURN node expression: c (Slither line:3028)
Checking function: sub (Slither line:2988)
sub returns uint256 variable  (Slither line:3008)
RETURN node expression: sub(a,b,v) (Slither line:3028)
Checking function: sub (Slither line:2988)
sub returns uint256 variable  (Slither line:3008)
RETURN node expression: c (Slither line:3028)
Checking function: mul (Slither line:2988)
mul returns uint256 variable  (Slither line:3008)
RETURN node expression: 0 (Slither line:3028)
RETURN node expression: c (Slither line:3028)
Checking function: div (Slither line:2988)
div returns uint256 variable  (Slither line:3008)
RETURN node expression: div(a,b,x) (Slither line:3028)
Checking function: div (Slither line:2988)
div returns uint256 variable  (Slither line:3008)
RETURN node expression: c (Slither line:3028)
Checking function: mod (Slither line:2988)
mod returns uint256 variable  (Slither line:3008)
RETURN node expression: mod(a,b,y) (Slither line:3028)
Checking function: mod (Slither line:2988)
mod returns uint256 variable  (Slither line:3008)
RETURN node expression: a % b (Slither line:3028)

End SafeMath.find_getter_in_contract (Slither line:3083)

impl_address_from_contract_call: address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
impl_address_from_contract_call: StateVariable zkSyncCommitBlockAddress
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),nextAddress,0,calldatasize()(),0,0)
impl_address_from_contract_call: arg is gas()()
impl_address_from_contract_call: CallExpression gas()()
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression return(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is calldatasize()()
impl_address_from_contract_call: CallExpression calldatasize()()
impl_address_from_contract_call: CallExpression require(bool,string)(nextAddress != address(0),zkSyncCommitBlockAddress should be set)
impl_address_from_contract_call: arg is nextAddress != address(0)
impl_address_from_contract_call: arg is zkSyncCommitBlockAddress should be set
Checking public function hashStoredBlockInfo
Checking external function getNoticePeriod
Checking external function upgradeNoticePeriodStarted
Checking external function upgradePreparationStarted
Checking external function upgradeCanceled
Checking external function upgradeFinishes
Checking external function isReadyForUpgrade
Checking public function validatePairTokenAddress
Checking external function pairFor
Checking external function createPair
Checking external function createETHPair
Checking external function getNoticePeriod
Checking external function upgradeNoticePeriodStarted
Checking external function upgradePreparationStarted
Checking external function upgradeCanceled
Checking external function upgradeFinishes
Checking external function isReadyForUpgrade
Checking external function initialize
Checking external function upgrade
Checking external function cancelOutstandingDepositsForExodusMode
Checking external function depositETH
Checking external function depositERC20
Checking public function getPendingBalance
Checking public function getBalanceToWithdraw
Checking public function requestFullExit
Checking public function activateExodusMode
Checking external function fallback
functions_writing_to_variable: zkSyncCommitBlockAddress
functions_writing_to_variable: checking function ZkSync.upgradeFinishes (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.createPair (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.depositETH (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradeFinishes (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.fallback (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.isReadyForUpgrade (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.getNoticePeriod (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.createETHPair (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.isReadyForUpgrade (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.depositERC20 (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.addPairToken (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.registerCreatePair (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradeNoticePeriodStarted (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.initialize (proxy_features line:898)
functions_writing_to_variable: exp = initializeReentrancyGuard() (proxy_features line:909)
functions_writing_to_variable: exp = (_governanceAddress,_verifierAddress,_verifierExitAddress,_pairManagerAddress,_zkSyncCommitBlockAddress,_genesisStateHash) = abi.decode(initializationParameters,(address,address,address,address,address,bytes32)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: (_governanceAddress,_verifierAddress,_verifierExitAddress,_pairManagerAddress,_zkSyncCommitBlockAddress,_genesisStateHash) = abi.decode(initializationParameters,(address,address,address,address,address,bytes32)) (proxy_features line:912)
functions_writing_to_variable: exp = governance = Governance(_governanceAddress) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: governance = Governance(_governanceAddress) (proxy_features line:912)
functions_writing_to_variable: exp = verifier = Verifier(_verifierAddress) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: verifier = Verifier(_verifierAddress) (proxy_features line:912)
functions_writing_to_variable: exp = verifier_exit = VerifierExit(_verifierExitAddress) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: verifier_exit = VerifierExit(_verifierExitAddress) (proxy_features line:912)
functions_writing_to_variable: exp = pairmanager = UniswapV2Factory(_pairManagerAddress) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: pairmanager = UniswapV2Factory(_pairManagerAddress) (proxy_features line:912)
functions_writing_to_variable: exp = zkSyncCommitBlockAddress = _zkSyncCommitBlockAddress (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: zkSyncCommitBlockAddress = _zkSyncCommitBlockAddress (proxy_features line:912)
functions_writing_to_variable: Identifier: zkSyncCommitBlockAddress (proxy_features line:924)
get_value_assigned: zkSyncCommitBlockAddress = _zkSyncCommitBlockAddress
functions_writing_to_variable: exp = storedBlockZero = StoredBlockInfo(0,0,EMPTY_STRING_KECCAK,0,_genesisStateHash,bytes32(0)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: storedBlockZero = StoredBlockInfo(0,0,EMPTY_STRING_KECCAK,0,_genesisStateHash,bytes32(0)) (proxy_features line:912)
functions_writing_to_variable: exp = storedBlockHashes[0] = hashStoredBlockInfo(storedBlockZero) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: storedBlockHashes[0] = hashStoredBlockInfo(storedBlockZero) (proxy_features line:912)
functions_writing_to_variable: IndexAccess: storedBlockHashes[0] (proxy_features line:920)
functions_writing_to_variable: exp = keccak256(bytes)(abi.encode(_storedBlockInfo)) (proxy_features line:909)
functions_writing_to_variable: exp = lockSlotOldValue = sload(uint256)(LOCK_FLAG_ADDRESS) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: lockSlotOldValue = sload(uint256)(LOCK_FLAG_ADDRESS) (proxy_features line:912)
functions_writing_to_variable: exp = sstore(uint256,uint256)(LOCK_FLAG_ADDRESS,_NOT_ENTERED) (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(lockSlotOldValue == 0,1B) (proxy_features line:909)
functions_writing_to_variable: initialize writes _zkSyncCommitBlockAddress to zkSyncCommitBlockAddress (proxy_features line:929)
functions_writing_to_variable: checking function ZkSync.getPendingBalance (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.getNoticePeriod (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.initializeReentrancyGuard (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.addPriorityRequest (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.getBalanceToWithdraw (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.validatePairTokenAddress (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.packAddressAndTokenId (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradeNoticePeriodStarted (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgrade (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(totalBlocksCommitted == totalBlocksProven,wq1) (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(totalBlocksCommitted == totalBlocksExecuted,w12) (proxy_features line:909)
functions_writing_to_variable: exp = upgradeParameters.length != 0 (proxy_features line:909)
functions_writing_to_variable: exp = (lastBlockInfo) = abi.decode(upgradeParameters,(StoredBlockInfo)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: (lastBlockInfo) = abi.decode(upgradeParameters,(StoredBlockInfo)) (proxy_features line:912)
functions_writing_to_variable: exp = storedBlockHashes[totalBlocksExecuted] = hashStoredBlockInfo(lastBlockInfo) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: storedBlockHashes[totalBlocksExecuted] = hashStoredBlockInfo(lastBlockInfo) (proxy_features line:912)
functions_writing_to_variable: IndexAccess: storedBlockHashes[totalBlocksExecuted] (proxy_features line:920)
functions_writing_to_variable: exp = zkSyncCommitBlockAddress = address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: zkSyncCommitBlockAddress = address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f) (proxy_features line:912)
functions_writing_to_variable: Identifier: zkSyncCommitBlockAddress (proxy_features line:924)
get_value_assigned: zkSyncCommitBlockAddress = address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
functions_writing_to_variable: exp = nonReentrant() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(_status == _NOT_ENTERED) (proxy_features line:909)
functions_writing_to_variable: exp = keccak256(bytes)(abi.encode(_storedBlockInfo)) (proxy_features line:909)
functions_writing_to_variable: checking function ZkSync.requestFullExit (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.hashStoredBlockInfo (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradePreparationStarted (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradePreparationStarted (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.requireActive (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.activateExodusMode (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.pairFor (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradeCanceled (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.upgradeCanceled (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.cancelOutstandingDepositsForExodusMode (proxy_features line:898)
functions_writing_to_variable: checking function ZkSync.registerDeposit (proxy_features line:898)
has_compatibility_checks: dependencies: ['address', 'bytes32', '_zkSyncCommitBlockAddress', 'initializationParameters', 'TUPLE_35', 'TMP_2460']
has_compatibility_checks: checking external function initialize
require(bool,string)(lockSlotOldValue == 0,1B)
has_compatibility_checks: condition lockSlotOldValue == 0
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),nextAddress,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: nextAddress = zkSyncCommitBlockAddress
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(nextAddress != address(0),zkSyncCommitBlockAddress should be set)
Found public function: hashStoredBlockInfo
has_time_delay: (node.type) EXPRESSION
(Expression) nonReentrant()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(totalBlocksCommitted == totalBlocksProven,wq1)
has_time_delay: (node.type) RETURN
(Expression) keccak256(bytes)(abi.encode(_storedBlockInfo))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(totalBlocksCommitted == totalBlocksExecuted,w12)
has_time_delay: (node.type) IF
(Expression) upgradeParameters.length != 0
has_time_delay: (node.type) EXPRESSION
(Expression) zkSyncCommitBlockAddress = address(0xcb4c185cC1bC048742D3b6AB760Efd2D3592c58f)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_status == _NOT_ENTERED)
has_time_delay: (node.type) EXPRESSION
(Expression) (lastBlockInfo) = abi.decode(upgradeParameters,(StoredBlockInfo))
has_time_delay: (node.type) EXPRESSION
(Expression) storedBlockHashes[totalBlocksExecuted] = hashStoredBlockInfo(lastBlockInfo)

Begin KeysWithPlonkVerifier.is_proxy (Slither line:1425)


End KeysWithPlonkVerifier.is_proxy (Slither line:1428)


Begin KeysWithPlonkVerifier.is_upgradeable_proxy (Slither line:1136)

Checking contract: KeysWithPlonkVerifier 

End KeysWithPlonkVerifier.is_upgradeable_proxy (Slither line:1407)


Begin VerifierExit.is_proxy (Slither line:1425)


End VerifierExit.is_proxy (Slither line:1428)


Begin VerifierExit.is_upgradeable_proxy (Slither line:1136)

Checking contract: VerifierExit 

End VerifierExit.is_upgradeable_proxy (Slither line:1407)


Begin Verifier.is_proxy (Slither line:1425)


End Verifier.is_proxy (Slither line:1428)


Begin Verifier.is_upgradeable_proxy (Slither line:1136)

Checking contract: Verifier 

End Verifier.is_upgradeable_proxy (Slither line:1407)

