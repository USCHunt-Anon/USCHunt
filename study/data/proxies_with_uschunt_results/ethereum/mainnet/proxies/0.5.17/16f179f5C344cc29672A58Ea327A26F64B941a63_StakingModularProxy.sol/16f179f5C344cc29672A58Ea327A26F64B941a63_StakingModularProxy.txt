
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin SafeERC20.is_proxy (Slither line:1425)


End SafeERC20.is_proxy (Slither line:1428)


Begin SafeERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeERC20 

End SafeERC20.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin EnumerableBytes32Set.is_proxy (Slither line:1425)


End EnumerableBytes32Set.is_proxy (Slither line:1428)


Begin EnumerableBytes32Set.is_upgradeable_proxy (Slither line:1136)

Checking contract: EnumerableBytes32Set 

End EnumerableBytes32Set.is_upgradeable_proxy (Slither line:1407)


Begin IStakingV2.is_proxy (Slither line:1425)


End IStakingV2.is_proxy (Slither line:1428)


Begin IStakingV2.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakingV2 

End IStakingV2.is_upgradeable_proxy (Slither line:1407)


Begin IUniswapV2Router.is_proxy (Slither line:1425)


End IUniswapV2Router.is_proxy (Slither line:1428)


Begin IUniswapV2Router.is_upgradeable_proxy (Slither line:1136)

Checking contract: IUniswapV2Router 

End IUniswapV2Router.is_upgradeable_proxy (Slither line:1407)


Begin ICurve3Pool.is_proxy (Slither line:1425)


End ICurve3Pool.is_proxy (Slither line:1428)


Begin ICurve3Pool.is_upgradeable_proxy (Slither line:1136)

Checking contract: ICurve3Pool 

End ICurve3Pool.is_upgradeable_proxy (Slither line:1407)


Begin ICurveMinter.is_proxy (Slither line:1425)


End ICurveMinter.is_proxy (Slither line:1428)


Begin ICurveMinter.is_upgradeable_proxy (Slither line:1136)

Checking contract: ICurveMinter 

End ICurveMinter.is_upgradeable_proxy (Slither line:1407)


Begin ICurve3PoolGauge.is_proxy (Slither line:1425)


End ICurve3PoolGauge.is_proxy (Slither line:1428)


Begin ICurve3PoolGauge.is_upgradeable_proxy (Slither line:1136)

Checking contract: ICurve3PoolGauge 

End ICurve3PoolGauge.is_upgradeable_proxy (Slither line:1407)


Begin IBZx.is_proxy (Slither line:1425)


End IBZx.is_proxy (Slither line:1428)


Begin IBZx.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBZx 

End IBZx.is_upgradeable_proxy (Slither line:1407)


Begin IBZRXv2Converter.is_proxy (Slither line:1425)


End IBZRXv2Converter.is_proxy (Slither line:1428)


Begin IBZRXv2Converter.is_upgradeable_proxy (Slither line:1136)

Checking contract: IBZRXv2Converter 

End IBZRXv2Converter.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin StakingConstantsV2.is_proxy (Slither line:1425)


End StakingConstantsV2.is_proxy (Slither line:1428)


Begin StakingConstantsV2.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakingConstantsV2 

End StakingConstantsV2.is_upgradeable_proxy (Slither line:1407)


Begin StakingStateV2.is_proxy (Slither line:1425)


End StakingStateV2.is_proxy (Slither line:1428)


Begin StakingStateV2.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakingStateV2 

End StakingStateV2.is_upgradeable_proxy (Slither line:1407)


Begin StakingModularProxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin StakingModularProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let result := delegatecall(gas(), target, add(data, 0x20), mload(data), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'target'
Looking for corresponding Variable
Current function: fallback

Begin StakingModularProxy.find_delegate_variable_from_name
Searching for target (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking ZERO_ADDRESS (Slither line:1689)
Checking BZRX (Slither line:1689)
Checking OOKI (Slither line:1689)
Checking vBZRX (Slither line:1689)
Checking iOOKI (Slither line:1689)
Checking OOKI_ETH_LP (Slither line:1689)
Checking cliffDuration (Slither line:1689)
Checking vestingDuration (Slither line:1689)
Checking vestingDurationAfterCliff (Slither line:1689)
Checking vestingStartTimestamp (Slither line:1689)
Checking vestingCliffTimestamp (Slither line:1689)
Checking vestingEndTimestamp (Slither line:1689)
Checking _startingVBZRXBalance (Slither line:1689)
Checking SUSHI_MASTERCHEF (Slither line:1689)
Checking OOKI_ETH_SUSHI_MASTERCHEF_PID (Slither line:1689)
Checking SUSHI (Slither line:1689)
Checking curve3pool (Slither line:1689)
Checking curve3Crv (Slither line:1689)
Checking curveMinter (Slither line:1689)
Checking CONVERTER (Slither line:1689)
Checking _owner (Slither line:1689)
Checking logicTargets (Slither line:1689)
Checking logicTargetsSet (Slither line:1689)
Checking _totalSupplyPerToken (Slither line:1689)
Checking _balancesPerToken (Slither line:1689)
Checking ookiPerTokenStored (Slither line:1689)
Checking ookiRewardsPerTokenPaid (Slither line:1689)
Checking ookiRewards (Slither line:1689)
Checking bzrxVesting (Slither line:1689)
Checking stableCoinPerTokenStored (Slither line:1689)
Checking stableCoinRewardsPerTokenPaid (Slither line:1689)
Checking stableCoinRewards (Slither line:1689)
Checking stableCoinVesting (Slither line:1689)
Checking vBZRXWeightStored (Slither line:1689)
Checking iOOKIWeightStored (Slither line:1689)
Checking LPTokenWeightStored (Slither line:1689)
Checking lastRewardsAddTime (Slither line:1689)
Checking vestingLastSync (Slither line:1689)
Checking governor (Slither line:1689)
Checking _proposalState (Slither line:1689)
Checking altRewardsRounds (Slither line:1689)
Checking altRewardsPerShare (Slither line:1689)
Checking userAltRewardsPerShare (Slither line:1689)
Checking voteDelegator (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking data (Slither line:1703)
Checking target (Slither line:1703)
target is a Local Variable in StakingModularProxy.fallback (Slither line:1707)
Expression: logicTargets[msg.sig] (Slither line:1719)
logicTargets is a State Variable in contract StakingStateV2 (Slither line:1749)

End StakingModularProxy.find_delegate_variable_by_name


End StakingModularProxy.find_delegatecall_in_asm (Slither line:1637)


End StakingModularProxy.is_proxy (Slither line:1476)


Begin StakingModularProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakingModularProxy 
StakingModularProxy is delegating to logicTargets
Looking for setter (Slither line:1200)

Looking for setter in StakingStateV2 (Slither line:1204)


Begin StakingStateV2.find_setter_in_contract (Slither line:3119)

Checking function: _setTarget(bytes4,address) returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: owner() returns(address) (Slither line:3127)
Visibility: public
_owner
Checking function: isOwner() returns(bool) (Slither line:3127)
Visibility: public
msg.sender
_msgSender() == _owner
Checking function: renounceOwnership() returns() (Slither line:3127)
Visibility: public
_owner = address(0)
is an Assignment Operation (Slither line:3216)
require(bool,string)(isOwner(),Ownable: caller is not the owner)
msg.sender
_msgSender() == _owner
onlyOwner()
OwnershipTransferred(_owner,address(0))
Checking function: transferOwnership(address) returns() (Slither line:3127)
Visibility: public
require(bool,string)(isOwner(),Ownable: caller is not the owner)
_transferOwnership(newOwner)
msg.sender
_owner = newOwner
is an Assignment Operation (Slither line:3216)
_msgSender() == _owner
require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)
OwnershipTransferred(_owner,newOwner)
onlyOwner()
Checking function: _transferOwnership(address) returns() (Slither line:3127)
Visibility: internal
Checking function: constructor() returns() (Slither line:3127)
Checking function: _msgSender() returns(address) (Slither line:3127)
Visibility: internal
Checking function: _msgData() returns(bytes) (Slither line:3127)
Visibility: internal

End StakingStateV2.find_setter_in_contract (Slither line:3345)


Could not find setter in StakingStateV2 
Looking in StakingModularProxy (Slither line:1213)

Begin StakingModularProxy.find_setter_in_contract (Slither line:3119)

Checking function: fallback() returns() (Slither line:3127)
Checking function: replaceContract(address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(isOwner(),Ownable: caller is not the owner)
msg.sender
require(bool,string)(success,setup failed)
_msgSender() == _owner
onlyOwner()
(success) = target.delegatecall(abi.encodeWithSignature(initialize(address),target))
is an Assignment Operation (Slither line:3216)
Checking function: setTargets(string[],address[]) returns() (Slither line:3127)
Visibility: external
logicTargets[sig] = target
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)

End StakingModularProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: setTargets in contract: StakingModularProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin StakingStateV2.find_getter_in_contract (Slither line:2974)

logicTargets is a Variable object
target
Checking function: constructor (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable  (Slither line:3008)
RETURN node expression: _owner (Slither line:3028)
Checking function: isOwner (Slither line:2988)
isOwner returns bool variable  (Slither line:3008)
RETURN node expression: _msgSender() == _owner (Slither line:3028)
Checking function: renounceOwnership (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _transferOwnership (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: _setTarget (Slither line:2988)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End StakingStateV2.find_getter_in_contract (Slither line:3083)


Begin StakingModularProxy.find_getter_in_contract (Slither line:2974)

logicTargets is a Variable object
target
Checking function: _setTarget (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable  (Slither line:3008)
RETURN node expression: _owner (Slither line:3028)
Checking function: isOwner (Slither line:2988)
isOwner returns bool variable  (Slither line:3008)
RETURN node expression: _msgSender() == _owner (Slither line:3028)
Checking function: renounceOwnership (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _transferOwnership (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: fallback (Slither line:2988)
Checking function: replaceContract (Slither line:2988)
Checking function: setTargets (Slither line:2988)
Checking function: getTarget (Slither line:2988)
getTarget returns address variable  (Slither line:3008)
RETURN node expression: logicTargets[bytes4(keccak256(bytes)(abi.encodePacked(sig)))] (Slither line:3028)

End StakingModularProxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: getTarget in contract: StakingModularProxy (Slither line:1285)

End StakingModularProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: target
impl_address_from_contract_call: StateVariable logicTargets
impl_address_from_contract_call: getter is getTarget
getter.full_name = getTarget(string)
library call: EnumerableBytes32Set.removeBytes32
library call: EnumerableBytes32Set.addBytes32
impl_address_from_contract_call: CallExpression require(bool,string)(target != address(0),target not active)
impl_address_from_contract_call: arg is target != address(0)
impl_address_from_contract_call: arg is target not active
Checking public function owner
Checking public function isOwner
Checking public function renounceOwnership
Checking public function transferOwnership
Checking external function replaceContract
Checking external function setTargets
Checking external function getTarget
Checking external function fallback
functions_writing_to_variable: logicTargets
functions_writing_to_variable: checking function StakingModularProxy.setTargets (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy._msgSender (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.owner (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy._transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.replaceContract (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.getTarget (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy._setTarget (proxy_features line:898)
functions_writing_to_variable: exp = logicTargets[sig] = target (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: logicTargets[sig] = target (proxy_features line:912)
functions_writing_to_variable: IndexAccess: logicTargets[sig] (proxy_features line:920)
functions_writing_to_variable: Identifier: logicTargets (proxy_features line:924)
get_value_assigned: logicTargets[sig] = target
functions_writing_to_variable: exp = target != address(0) (proxy_features line:909)
functions_writing_to_variable: exp = logicTargetsSet.addBytes32(bytes32(sig)) (proxy_features line:909)
functions_writing_to_variable: exp = logicTargetsSet.removeBytes32(bytes32(sig)) (proxy_features line:909)
functions_writing_to_variable: _setTarget writes target to logicTargets (proxy_features line:929)
functions_writing_to_variable: checking function StakingModularProxy.transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.renounceOwnership (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy._msgData (proxy_features line:898)
functions_writing_to_variable: checking function StakingModularProxy.isOwner (proxy_features line:898)
has_compatibility_checks: dependencies: ['target', 'targetsArr', 'REF_81']
has_compatibility_checks: skipping internal function _setTarget
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let result := delegatecall(gas(), target, add(data, 0x20), mload(data), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: data = msg.data
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(target != address(0),target not active)
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: gasleft()() <= 2300
can_toggle_delegatecall_on_off: successors:
 NodeType: NEW VARIABLE  expression: data = msg.data
 NodeType: NEW VARIABLE  expression: target = logicTargets[msg.sig]
 NodeType: INLINE ASM  expression: {
    let result := delegatecall(gas(), target, add(data, 0x20), mload(data), 0, 0)
    let size := returndatasize()
    let ptr := mload(0x40)
    returndatacopy(ptr, 0, size)
    switch result
    case 0 { revert(ptr, size) }
    default { return(ptr, size) }
}
can_toggle_delegatecall_on_off: delegatecall_condition = False
 NodeType: EXPRESSION  expression: require(bool,string)(target != address(0),target not active)
 NodeType: END_IF  expression: None
 NodeType: RETURN  expression: None
Found public function: owner
has_time_delay: (node.type) EXPRESSION
(Expression) logicTargets[sig] = target
has_time_delay: (node.type) IF_LOOP
(Expression) i < sigsArr.length
has_time_delay: (node.type) IF
(Expression) target != address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) set.values.pop()
has_time_delay: (node.type) IF
(Expression) contains(set,value)
has_time_delay: (node.type) RETURN
(Expression) true
has_time_delay: (node.type) EXPRESSION
(Expression) i ++
has_time_delay: (node.type) EXPRESSION
(Expression) _setTarget(bytes4(keccak256(bytes)(abi.encodePacked(sigsArr[i]))),targetsArr[i])
has_time_delay: (node.type) EXPRESSION
(Expression) set.index[lastValue] = toDeleteIndex + 1
has_time_delay: (node.type) EXPRESSION
(Expression) logicTargetsSet.addBytes32(bytes32(sig))
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) NEW VARIABLE
(Expression) toDeleteIndex = set.index[value] - 1
has_time_delay: (node.type) IF
(Expression) ! contains(set,value)
has_time_delay: (node.type) EXPRESSION
(Expression) logicTargetsSet.removeBytes32(bytes32(sig))
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastIndex = set.values.length - 1
has_time_delay: (node.type) IF
(Expression) lastIndex != toDeleteIndex
has_time_delay: (node.type) EXPRESSION
(Expression) set.index[value] = set.values.push(value)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(sigsArr.length == targetsArr.length,count mismatch)
has_time_delay: (node.type) EXPRESSION
(Expression) delete set.index[value]
has_time_delay: (node.type) RETURN
(Expression) true
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isOwner(),Ownable: caller is not the owner)
has_time_delay: (node.type) RETURN
(Expression) msg.sender
has_time_delay: (node.type) RETURN
(Expression) _msgSender() == _owner
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastValue = set.values[lastIndex]
has_time_delay: (node.type) RETURN
(Expression) false
has_time_delay: (node.type) RETURN
(Expression) set.index[value] != 0
has_time_delay: (node.type) EXPRESSION
(Expression) set.values[toDeleteIndex] = lastValue
has_time_delay: (node.type) NEW VARIABLE
(Expression) i = 0
