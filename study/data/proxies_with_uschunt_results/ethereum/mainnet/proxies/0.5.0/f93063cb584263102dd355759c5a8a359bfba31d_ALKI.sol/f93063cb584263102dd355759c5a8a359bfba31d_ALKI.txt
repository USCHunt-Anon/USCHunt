
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin Pausable.is_proxy (Slither line:1425)


End Pausable.is_proxy (Slither line:1428)


Begin Pausable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Pausable 

End Pausable.is_upgradeable_proxy (Slither line:1407)


Begin ERC20.is_proxy (Slither line:1425)


End ERC20.is_proxy (Slither line:1428)


Begin ERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC20 

End ERC20.is_upgradeable_proxy (Slither line:1407)


Begin ALKI.is_proxy (Slither line:1425)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin ALKI.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called 'impl'
Looking for corresponding Variable
Current function: fallback

Begin ALKI.find_delegate_variable_from_name
Searching for impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking owner (Slither line:1689)
Checking newOwner (Slither line:1689)
Checking paused (Slither line:1689)
Checking name (Slither line:1689)
Checking symbol (Slither line:1689)
Checking decimals (Slither line:1689)
Checking initialSupply (Slither line:1689)
Checking totalSupply_ (Slither line:1689)
Checking mintCap (Slither line:1689)
Checking balances (Slither line:1689)
Checking frozen (Slither line:1689)
Checking allowed (Slither line:1689)
Checking implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking impl (Slither line:1703)
impl is a Local Variable in ALKI.fallback (Slither line:1707)
Expression: implementation (Slither line:1719)
Identifier value: implementation (Slither line:1725)
implementation is a State Variable in contract ALKI (Slither line:1730)

End ALKI.find_delegate_variable_by_name


End ALKI.find_delegatecall_in_asm (Slither line:1637)


End ALKI.is_proxy (Slither line:1476)


Begin ALKI.is_upgradeable_proxy (Slither line:1136)

Checking contract: ALKI 
ALKI is delegating to implementation
Looking for setter (Slither line:1200)


Begin ALKI.find_setter_in_contract (Slither line:3119)

Checking function: constructor() returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: totalSupply() returns(uint256) (Slither line:3127)
Visibility: public
totalSupply_
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
assert(bool)(b <= a)
require(bool)(_to != address(0))
a - b
require(bool)(_value <= balances[msg.sender])
balances[msg.sender] = balances[msg.sender].sub(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
balances[_to] = balances[_to].add(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool)(! frozen[_holder])
c
Transfer(msg.sender,_to,_value)
true
whenNotPaused()
notFrozen(msg.sender)
require(bool)(! paused)
assert(bool)(c >= a)
Checking function: multiTransfer(address[],uint256[]) returns(bool) (Slither line:3127)
Visibility: public
true
assert(bool)(b <= a)
require(bool)(_to != address(0))
a - b
whenNotPaused()
require(bool)(_value <= balances[msg.sender])
balances[msg.sender] = balances[msg.sender].sub(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
notFrozen(msg.sender)
balances[_to] = balances[_to].add(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
revert()()
require(bool)(! frozen[_holder])
c
Transfer(msg.sender,_to,_value)
true
whenNotPaused()
notFrozen(msg.sender)
require(bool)(! paused)
assert(bool)(c >= a)
i ++
transfer(_toList[i],_valueList[i])
Checking function: balanceOf(address) returns(uint256) (Slither line:3127)
Visibility: public
balances[_holder]
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3127)
Visibility: public
assert(bool)(b <= a)
a - b
require(bool)(_to != address(0))
require(bool)(! frozen[_holder])
c
require(bool)(_value <= balances[_from])
require(bool)(_value <= allowed[_from][msg.sender])
balances[_from] = balances[_from].sub(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
balances[_to] = balances[_to].add(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Transfer(_from,_to,_value)
true
whenNotPaused()
require(bool)(! paused)
assert(bool)(c >= a)
notFrozen(_from)
Checking function: approve(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
allowed[msg.sender][_spender] = _value
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Approval(msg.sender,_spender,_value)
true
require(bool)(! paused)
whenNotPaused()
Checking function: allowance(address,address) returns(uint256) (Slither line:3127)
Visibility: public
allowed[_holder][_spender]
Checking function: freezeAccount(address) returns(bool) (Slither line:3127)
Visibility: public
frozen[_holder] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
onlyOwner()
require(bool)(msg.sender == owner)
Freeze(_holder)
true
require(bool)(! frozen[_holder])
Checking function: unfreezeAccount(address) returns(bool) (Slither line:3127)
Visibility: public
require(bool)(frozen[_holder])
require(bool)(msg.sender == owner)
frozen[_holder] = false
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
onlyOwner()
Unfreeze(_holder)
true
Checking function: distribute(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
onlyOwner()
balances[_to] = balances[_to].add(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool)(msg.sender == owner)
require(bool)(_to != address(0))
assert(bool)(b <= a)
Transfer(msg.sender,_to,_value)
assert(bool)(c >= a)
require(bool)(_value <= balances[msg.sender])
a - b
true
c
balances[msg.sender] = balances[msg.sender].sub(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Checking function: claimToken(ERC20,address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool)(msg.sender == owner)
token.transfer(_to,_value)
true
onlyOwner()
Checking function: burn(uint256) returns(bool) (Slither line:3127)
Visibility: public
balances[burner] = balances[burner].sub(_value)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
true
require(bool)(msg.sender == owner)
require(bool)(_value <= balances[msg.sender])
totalSupply_ = totalSupply_.sub(_value)
is an Assignment Operation (Slither line:3216)
assert(bool)(b <= a)
onlyOwner()
a - b
Burn(burner,_value)
Transfer(burner,address(0),_value)
Checking function: mint(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
true
require(bool)(msg.sender == owner)
totalSupply_ = totalSupply_.add(_amount)
is an Assignment Operation (Slither line:3216)
c
balances[_to] = balances[_to].add(_amount)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
onlyOwner()
assert(bool)(c >= a)
Transfer(address(0),_to,_amount)
require(bool)(mintCap >= totalSupply_.add(_amount))
Checking function: slitherConstructorVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: pause() returns() (Slither line:3127)
Visibility: public
whenNotPaused()
Pause()
require(bool)(msg.sender == owner)
onlyOwner()
require(bool)(! paused)
paused = true
is an Assignment Operation (Slither line:3216)
Checking function: unpause() returns() (Slither line:3127)
Visibility: public
require(bool)(msg.sender == owner)
paused = false
is an Assignment Operation (Slither line:3216)
whenPaused()
Unpause()
require(bool)(paused)
onlyOwner()
Checking function: constructor() returns() (Slither line:3127)
Checking function: transferOwnership(address) returns() (Slither line:3127)
Visibility: public
onlyOwner()
require(bool)(msg.sender == owner)
newOwner = _newOwner
is an Assignment Operation (Slither line:3216)
require(bool)(_newOwner != address(0))
Checking function: acceptOwnership() returns(bool) (Slither line:3127)
Visibility: public
onlyNewOwner()
OwnershipTransferred(owner,newOwner)
require(bool)(msg.sender != address(0))
owner = newOwner
is an Assignment Operation (Slither line:3216)
require(bool)(msg.sender == newOwner)
newOwner = address(0)
is an Assignment Operation (Slither line:3216)
Checking function: totalSupply() returns(uint256) (Slither line:3127)
Visibility: public
Checking function: balanceOf(address) returns(uint256) (Slither line:3127)
Visibility: public
Checking function: allowance(address,address) returns(uint256) (Slither line:3127)
Visibility: public
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3127)
Visibility: public
Checking function: approve(address,uint256) returns(bool) (Slither line:3127)
Visibility: public

End ALKI.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in ALKI (Slither line:1269)
Looking for getter (Slither line:1273)


Begin ALKI.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
Checking function: pause (Slither line:2988)
Checking function: unpause (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: acceptOwnership (Slither line:2988)
acceptOwnership returns bool variable  (Slither line:3008)
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: totalSupply (Slither line:2988)
totalSupply returns uint256 variable  (Slither line:3008)
RETURN node expression: totalSupply_ (Slither line:3028)
Checking function: transfer (Slither line:2988)
transfer returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: multiTransfer (Slither line:2988)
multiTransfer returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: balanceOf (Slither line:2988)
balanceOf returns uint256 variable called balance (Slither line:3008)
RETURN node expression: balances[_holder] (Slither line:3028)
Checking function: transferFrom (Slither line:2988)
transferFrom returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: approve (Slither line:2988)
approve returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: allowance (Slither line:2988)
allowance returns uint256 variable  (Slither line:3008)
RETURN node expression: allowed[_holder][_spender] (Slither line:3028)
Checking function: freezeAccount (Slither line:2988)
freezeAccount returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: unfreezeAccount (Slither line:2988)
unfreezeAccount returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: distribute (Slither line:2988)
distribute returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: claimToken (Slither line:2988)
claimToken returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: burn (Slither line:2988)
burn returns bool variable called success (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: mint (Slither line:2988)
mint returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: slitherConstructorVariables (Slither line:2988)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End ALKI.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in ALKI (Slither line:1305)
Checking node of type INLINE ASM (Slither line:1395)
Checking node of type NEW VARIABLE (Slither line:1395)
impl
impl = implementation
Checking node of type ENTRY_POINT (Slither line:1395)
Checking node of type EXPRESSION (Slither line:1395)
require(bool)(impl != address(0))

End ALKI.is_upgradeable_proxy (Slither line:1407)

