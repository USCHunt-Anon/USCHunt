
Begin ITwoKeySingletonesRegistry.is_proxy (Slither line:1425)


End ITwoKeySingletonesRegistry.is_proxy (Slither line:1428)


Begin ITwoKeySingletonesRegistry.is_upgradeable_proxy (Slither line:1136)

Checking contract: ITwoKeySingletonesRegistry 

End ITwoKeySingletonesRegistry.is_upgradeable_proxy (Slither line:1407)


Begin Proxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2802)
Expression called: require(bool)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0)

End Proxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin Proxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin Proxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in Proxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin Proxy.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
Got abstract function, looking for overriding function (Slither line:2025)
Failure (Slither line:2033)
implementation returns a variable of type address   (Slither line:2193)
Return value is LocalVariable:  (Slither line:2266)
has no expression (Slither line:2326)

End Proxy.find_delegate_from_call_exp (Slither line:2328)

Call Expression
End Proxy.find_delegate_variable_by_name (Slither line:1739)


Begin Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2683)


End Proxy.find_delegate_sloaded_from_hardcoded_slot (Slither line:2710)


End Proxy.find_delegatecall_in_asm (Slither line:1637)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


End Proxy.is_proxy (Slither line:1476)


Begin Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Proxy 

End Proxy.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityStorage.is_proxy (Slither line:1425)


End UpgradeabilityStorage.is_proxy (Slither line:1428)


Begin UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityStorage 

End UpgradeabilityStorage.is_upgradeable_proxy (Slither line:1407)


Begin UpgradeabilityProxy.is_proxy (Slither line:1425)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin UpgradeabilityProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool)(_impl != address(0)) (Slither line:2802)
Expression called: require(bool)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0)

End UpgradeabilityProxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: fallback

Begin UpgradeabilityProxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking registry (Slither line:1689)
Checking _implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in UpgradeabilityProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin UpgradeabilityProxy.find_delegate_from_call_exp

implementation() (Slither line:2003)
called = implementation (Slither line:2010)
Return node of function UpgradeabilityStorage.implementation(): RETURN _implementation (Slither line:2041)
_implementation (Slither line:2048)
implementation returns a variable of type address   called _implementation (Slither line:2193)

End UpgradeabilityProxy.find_delegate_from_call_exp (Slither line:2328)

Call Expression
End UpgradeabilityProxy.find_delegate_variable_by_name (Slither line:1739)


End UpgradeabilityProxy.find_delegatecall_in_asm (Slither line:1637)


End UpgradeabilityProxy.is_proxy (Slither line:1476)


Begin UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: UpgradeabilityProxy 
UpgradeabilityProxy is delegating to _implementation
Looking for setter (Slither line:1200)

Looking for setter in UpgradeabilityStorage (Slither line:1204)


Begin UpgradeabilityStorage.find_setter_in_contract (Slither line:3119)

Checking function: implementation() returns(address) (Slither line:3127)
Visibility: public
_implementation

End UpgradeabilityStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in UpgradeabilityStorage 
Looking in UpgradeabilityProxy (Slither line:1213)

Begin UpgradeabilityProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor(string,string) returns() (Slither line:3127)
Checking function: upgradeTo(string,string,address) returns() (Slither line:3127)
Visibility: public
require(bool)(_impl != address(0))
_implementation = _impl
is an Assignment Operation (Slither line:3216)

End UpgradeabilityProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: UpgradeabilityProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin UpgradeabilityStorage.find_getter_in_contract (Slither line:2974)

_implementation is a Variable object
_impl
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation (Slither line:3028)

End UpgradeabilityStorage.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: implementation in contract: UpgradeabilityStorage (Slither line:1285)

End UpgradeabilityProxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: _impl
impl_address_from_contract_call: StateVariable _implementation
impl_address_from_contract_call: getter is implementation
getter.full_name = implementation()
impl_address_from_contract_call: CallExpression implementation()
impl_address_from_contract_call: CallExpression require(bool)(_impl != address(0))
impl_address_from_contract_call: arg is _impl != address(0)
Checking public function implementation
Checking public function implementation
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == address(registry))
Checking public function fallback
functions_writing_to_variable: _implementation
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:898)
functions_writing_to_variable: exp = registry = ITwoKeySingletonesRegistry(msg.sender) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: registry = ITwoKeySingletonesRegistry(msg.sender) (proxy_features line:912)
functions_writing_to_variable: exp = _implementation = registry.getVersion(_contractName,_version) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _implementation = registry.getVersion(_contractName,_version) (proxy_features line:912)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:924)
get_value_assigned: _implementation = registry.getVersion(_contractName,_version)
functions_writing_to_variable: checking function UpgradeabilityProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function UpgradeabilityProxy.upgradeTo (proxy_features line:898)
functions_writing_to_variable: exp = require(bool)(msg.sender == address(registry)) (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(_impl != address(0)) (proxy_features line:909)
functions_writing_to_variable: exp = _implementation = _impl (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _implementation = _impl (proxy_features line:912)
functions_writing_to_variable: Identifier: _implementation (proxy_features line:924)
get_value_assigned: _implementation = _impl
functions_writing_to_variable: upgradeTo writes _impl to _implementation (proxy_features line:929)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:898)
has_compatibility_checks: dependencies: ['_impl', 'registry', 'TMP_9', 'TMP_8', '_contractName', '_version', '']
functions_writing_to_variable: registry
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradeabilityProxy.constructor (proxy_features line:898)
functions_writing_to_variable: exp = registry = ITwoKeySingletonesRegistry(msg.sender) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: registry = ITwoKeySingletonesRegistry(msg.sender) (proxy_features line:912)
functions_writing_to_variable: Identifier: registry (proxy_features line:924)
get_value_assigned: registry = ITwoKeySingletonesRegistry(msg.sender)
functions_writing_to_variable: exp = _implementation = registry.getVersion(_contractName,_version) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: _implementation = registry.getVersion(_contractName,_version) (proxy_features line:912)
functions_writing_to_variable: checking function UpgradeabilityProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function UpgradeabilityStorage.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradeabilityProxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function UpgradeabilityProxy.upgradeTo (proxy_features line:898)
has_compatibility_checks: checking public function upgradeTo
require(bool)(_impl != address(0))
has_compatibility_checks: condition _impl != address(0)
check_condition_from_expression: condition _impl != address(0)
require(bool)(msg.sender == address(registry))
has_compatibility_checks: condition msg.sender == address(registry)
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool)(_impl != address(0))
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: implementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(_impl != address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) _implementation = _impl
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == address(registry))
