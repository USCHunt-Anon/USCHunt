
Begin ERC165.is_proxy (Slither line:1425)


End ERC165.is_proxy (Slither line:1428)


Begin ERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC165 

End ERC165.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Basic.is_proxy (Slither line:1425)


End ERC721Basic.is_proxy (Slither line:1428)


Begin ERC721Basic.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Basic 

End ERC721Basic.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Enumerable.is_proxy (Slither line:1425)


End ERC721Enumerable.is_proxy (Slither line:1428)


Begin ERC721Enumerable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Enumerable 

End ERC721Enumerable.is_upgradeable_proxy (Slither line:1407)


Begin ERC721Metadata.is_proxy (Slither line:1425)


End ERC721Metadata.is_proxy (Slither line:1428)


Begin ERC721Metadata.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721Metadata 

End ERC721Metadata.is_upgradeable_proxy (Slither line:1407)


Begin ERC721.is_proxy (Slither line:1425)


End ERC721.is_proxy (Slither line:1428)


Begin ERC721.is_upgradeable_proxy (Slither line:1136)

Checking contract: ERC721 

End ERC721.is_upgradeable_proxy (Slither line:1407)


Begin ProxyOwnable.is_proxy (Slither line:1425)


End ProxyOwnable.is_proxy (Slither line:1428)


Begin ProxyOwnable.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyOwnable 

End ProxyOwnable.is_upgradeable_proxy (Slither line:1407)


Begin CodexRecordProxy.is_proxy (Slither line:1425)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin CodexRecordProxy.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    let ptr := mload(0x40) (Slither line:1576)
    calldatacopy(ptr, 0, calldatasize()) (Slither line:1576)
    let result := delegatecall(gas(), _implementation, ptr, calldatasize(), 0, 0) (Slither line:1576)

Found delegatecall in inline asm (Slither line:1622)
Destination param is called '_implementation'
Looking for corresponding Variable
Current function: fallback

Begin CodexRecordProxy.find_delegate_variable_from_name
Searching for _implementation (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking proxyOwner (Slither line:1689)
Checking version (Slither line:1689)
Checking implementation (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _implementation (Slither line:1703)
_implementation is a Local Variable in CodexRecordProxy.fallback (Slither line:1707)
Expression: implementation (Slither line:1719)
Identifier value: implementation (Slither line:1725)
implementation is a State Variable in contract CodexRecordProxy (Slither line:1730)

End CodexRecordProxy.find_delegate_variable_by_name


End CodexRecordProxy.find_delegatecall_in_asm (Slither line:1637)


End CodexRecordProxy.is_proxy (Slither line:1476)


Begin CodexRecordProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: CodexRecordProxy 
CodexRecordProxy is delegating to implementation
Looking for setter (Slither line:1200)


Begin CodexRecordProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: name() returns(string) (Slither line:3127)
Visibility: external
tokenMetadata.name()
Checking function: symbol() returns(string) (Slither line:3127)
Visibility: external
tokenMetadata.symbol()
Checking function: upgradeTo(string,address) returns() (Slither line:3127)
Visibility: public
onlyOwner()
version = _version
is an Assignment Operation (Slither line:3216)
require(bool)(msg.sender == proxyOwner)
require(bool,string)(keccak256()(abi.encodePacked(_version)) != keccak256()(abi.encodePacked(version)),The version cannot be the same)
implementation = _implementation
is an Assignment Operation (Slither line:3216)

End CodexRecordProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: CodexRecordProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin CodexRecordProxy.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
_implementation
Checking function: constructor (Slither line:2988)
Checking function: transferProxyOwnership (Slither line:2988)
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: name (Slither line:2988)
name returns string variable  (Slither line:3008)
RETURN node expression: tokenMetadata.name() (Slither line:3028)
Checking function: symbol (Slither line:2988)
symbol returns string variable  (Slither line:3008)
RETURN node expression: tokenMetadata.symbol() (Slither line:3028)
Checking function: upgradeTo (Slither line:2988)

End CodexRecordProxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in CodexRecordProxy (Slither line:1305)
Checking for implementation at slot 2 in contract ERC721 (Slither line:1355)
Found INTERFACE_ERC721_METADATA at slot 2 in contract ERC721 (Slither line:1362)

Begin ERC165.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
_implementation
Checking function: supportsInterface (Slither line:2988)
supportsInterface returns bool variable  (Slither line:3008)
RETURN node expression: _interfaceID == INTERFACE_ERC165 (Slither line:3028)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End ERC165.find_getter_in_contract (Slither line:3083)

Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking external function name
Checking external function symbol
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner)
Checking public function fallback
functions_writing_to_variable: implementation
functions_writing_to_variable: checking function CodexRecordProxy.upgradeTo (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(keccak256()(abi.encodePacked(_version)) != keccak256()(abi.encodePacked(version)),The version cannot be the same) (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(_implementation != implementation,The implementation cannot be the same) (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(_implementation != address(0),The implementation cannot be the 0 address) (proxy_features line:909)
functions_writing_to_variable: exp = version = _version (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: version = _version (proxy_features line:912)
functions_writing_to_variable: exp = implementation = _implementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: implementation = _implementation (proxy_features line:912)
functions_writing_to_variable: Identifier: implementation (proxy_features line:924)
get_value_assigned: implementation = _implementation
functions_writing_to_variable: exp = Upgraded(version,implementation) (proxy_features line:909)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool)(msg.sender == proxyOwner) (proxy_features line:909)
functions_writing_to_variable: upgradeTo writes _implementation to implementation (proxy_features line:929)
functions_writing_to_variable: checking function CodexRecordProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function CodexRecordProxy.transferProxyOwnership (proxy_features line:898)
functions_writing_to_variable: checking function CodexRecordProxy.constructor (proxy_features line:898)
get_value_assigned: implementation = _implementation
functions_writing_to_variable: constructor writes _implementation to implementation (proxy_features line:1013)
functions_writing_to_variable: checking function CodexRecordProxy.symbol (proxy_features line:898)
functions_writing_to_variable: checking function CodexRecordProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function CodexRecordProxy.name (proxy_features line:898)
has_compatibility_checks: dependencies: ['_implementation', '_implementation']
has_compatibility_checks: checking public function upgradeTo
require(bool)(msg.sender == proxyOwner)
has_compatibility_checks: condition msg.sender == proxyOwner
require(bool,string)(keccak256()(abi.encodePacked(_version)) != keccak256()(abi.encodePacked(version)),The version cannot be the same)
has_compatibility_checks: condition keccak256()(abi.encodePacked(_version)) != keccak256()(abi.encodePacked(version))
require(bool,string)(_implementation != implementation,The implementation cannot be the same)
has_compatibility_checks: condition _implementation != implementation
check_condition_from_expression: modifier calls: ['onlyOwner()']
check_condition_from_expression: condition _implementation != implementation
require(bool,string)(_implementation != address(0),The implementation cannot be the 0 address)
has_compatibility_checks: condition _implementation != address(0)
check_condition_from_expression: modifier calls: ['onlyOwner()']
check_condition_from_expression: condition _implementation != address(0)
has_compatibility_checks: skipping constructor
can_toggle_delegatecall_on_off: found delegatecall in ASSEMBLY node: {
    let ptr := mload(0x40)
    calldatacopy(ptr, 0, calldatasize())
    let result := delegatecall(gas(), _implementation, ptr, calldatasize(), 0, 0)
    let size := returndatasize()
    returndatacopy(ptr, 0, size)
    switch result
    case 0 {
        revert(ptr, size)
    }
    default {
        return(ptr, size)
    }
}
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _implementation = implementation
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
Found public function: constructor
Found public function: transferProxyOwnership
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) version = _version
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(keccak256()(abi.encodePacked(_version)) != keccak256()(abi.encodePacked(version)),The version cannot be the same)
has_time_delay: (node.type) EXPRESSION
(Expression) implementation = _implementation
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_implementation != implementation,The implementation cannot be the same)
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(version,implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_implementation != address(0),The implementation cannot be the 0 address)
