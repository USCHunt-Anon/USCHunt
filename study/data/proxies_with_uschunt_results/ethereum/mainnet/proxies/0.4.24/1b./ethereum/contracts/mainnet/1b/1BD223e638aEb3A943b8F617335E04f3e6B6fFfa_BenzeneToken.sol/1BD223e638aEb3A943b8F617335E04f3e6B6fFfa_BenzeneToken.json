{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "StandbyGamePool (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.4.24/1b./ethereum/contracts/mainnet/1b/1BD223e638aEb3A943b8F617335E04f3e6B6fFfa_BenzeneToken.sol/1BD223e638aEb3A943b8F617335E04f3e6B6fFfa_BenzeneToken.sol#415-430)",
        "elements": [],
        "description": "StandbyGamePool (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.4.24/1b./ethereum/contracts/mainnet/1b/1BD223e638aEb3A943b8F617335E04f3e6B6fFfa_BenzeneToken.sol/1BD223e638aEb3A943b8F617335E04f3e6B6fFfa_BenzeneToken.sol#415-430) is an upgradeable proxy.\ncurrentVersion is declared in the proxy.\ncurrentVersion is an address state variable\nMissing compatibility check in StandbyGamePool.update(address)\n",
        "id": "311ad1563aa66e2e2d9579e310af26831b6da368dc7a69e99481e91a3f36a5f2",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "StandbyGamePool.currentVersion",
          "impl_address_setter": "StandbyGamePool.update(address)",
          "impl_address_getter": "not found",
          "impl_address_location": "StandbyGamePool (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.4.24/1b./ethereum/contracts/mainnet/1b/1BD223e638aEb3A943b8F617335E04f3e6B6fFfa_BenzeneToken.sol/1BD223e638aEb3A943b8F617335E04f3e6B6fFfa_BenzeneToken.sol#415-430)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "master_copy_coupling": "missing implementation source",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "StandbyGamePool.update(address)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "transferOwnership(address)",
              "renounceOwnership()",
              "setToken(ERC20Basic)",
              "balance()",
              "getFrom()",
              "update(address)"
            ]
          }
        }
      }
    ]
  }
}