{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "PProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.7.1/6b./ethereum/contracts/mainnet/6b/6Bd0D8c8aD8D3F1f97810d5Cc57E9296db73DC45_PProxy.sol/6Bd0D8c8aD8D3F1f97810d5Cc57E9296db73DC45_PProxy.sol#58-108)",
        "elements": [],
        "description": "PProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.7.1/6b./ethereum/contracts/mainnet/6b/6Bd0D8c8aD8D3F1f97810d5Cc57E9296db73DC45_PProxy.sol/6Bd0D8c8aD8D3F1f97810d5Cc57E9296db73DC45_PProxy.sol#58-108) may be an upgradeable proxy.\ncontractAddr is declared in the proxy.\n uses Unstructured Storage\n uses non-standard slot: keccak256(bytes)(abi.encodePacked(IMPLEMENTATION_SLOT))\nNo setter functions found to search for compatibility checks.\n",
        "id": "0c7f2a7fff5e95a35223abe4c7f40fc05d101b1459bea31aae0c04f943dad90d",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "PProxy.internalFallback().contractAddr",
          "impl_address_setter": "not found",
          "impl_address_getter": "PProxyStorage.readAddress(bytes32)",
          "impl_address_location": "PProxy (../../smart-contract-sanctuary/ethereum/contracts/mainnet/proxies/0.7.1/6b./ethereum/contracts/mainnet/6b/6Bd0D8c8aD8D3F1f97810d5Cc57E9296db73DC45_PProxy.sol/6Bd0D8c8aD8D3F1f97810d5Cc57E9296db73DC45_PProxy.sol#58-108)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "unstructured_storage": true,
          "eip_1967": false,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": "no setters found"
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "readBool(bytes32)",
              "readAddress(bytes32)",
              "storageRead(bytes32)",
              "bytes32ToAddress(bytes32)",
              "addressToBytes32(address)",
              "getProxyOwner()",
              "setProxyOwner(address)",
              "getImplementation()",
              "setImplementation(address)"
            ]
          }
        }
      }
    ]
  }
}