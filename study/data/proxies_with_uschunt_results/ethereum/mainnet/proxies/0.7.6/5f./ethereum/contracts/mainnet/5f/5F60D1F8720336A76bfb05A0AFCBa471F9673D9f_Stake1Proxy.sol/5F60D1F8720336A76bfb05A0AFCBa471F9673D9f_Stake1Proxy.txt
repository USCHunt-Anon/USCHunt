
Begin IStakeVaultFactory.is_proxy (Slither line:1425)


End IStakeVaultFactory.is_proxy (Slither line:1428)


Begin IStakeVaultFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeVaultFactory 

End IStakeVaultFactory.is_upgradeable_proxy (Slither line:1407)


Begin IStakeRegistry.is_proxy (Slither line:1425)


End IStakeRegistry.is_proxy (Slither line:1428)


Begin IStakeRegistry.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeRegistry 

End IStakeRegistry.is_upgradeable_proxy (Slither line:1407)


Begin IStakeFactory.is_proxy (Slither line:1425)


End IStakeFactory.is_proxy (Slither line:1428)


Begin IStakeFactory.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeFactory 

End IStakeFactory.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin EnumerableSet.is_proxy (Slither line:1425)


End EnumerableSet.is_proxy (Slither line:1428)


Begin EnumerableSet.is_upgradeable_proxy (Slither line:1136)

Checking contract: EnumerableSet 

End EnumerableSet.is_upgradeable_proxy (Slither line:1407)


Begin AccessRoleCommon.is_proxy (Slither line:1425)


End AccessRoleCommon.is_proxy (Slither line:1428)


Begin AccessRoleCommon.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessRoleCommon 

End AccessRoleCommon.is_upgradeable_proxy (Slither line:1407)


Begin AccessControl.is_proxy (Slither line:1425)


End AccessControl.is_proxy (Slither line:1428)


Begin AccessControl.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessControl 

End AccessControl.is_upgradeable_proxy (Slither line:1407)


Begin StakeProxyStorage.is_proxy (Slither line:1425)


End StakeProxyStorage.is_proxy (Slither line:1428)


Begin StakeProxyStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: StakeProxyStorage 

End StakeProxyStorage.is_upgradeable_proxy (Slither line:1407)


Begin AccessibleCommon.is_proxy (Slither line:1425)


End AccessibleCommon.is_proxy (Slither line:1428)


Begin AccessibleCommon.is_upgradeable_proxy (Slither line:1136)

Checking contract: AccessibleCommon 

End AccessibleCommon.is_upgradeable_proxy (Slither line:1407)


Begin Address.is_proxy (Slither line:1425)


End Address.is_proxy (Slither line:1428)


Begin Address.is_upgradeable_proxy (Slither line:1136)

Checking contract: Address 

End Address.is_upgradeable_proxy (Slither line:1407)


Begin IStakeProxy.is_proxy (Slither line:1425)


End IStakeProxy.is_proxy (Slither line:1428)


Begin IStakeProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: IStakeProxy 

End IStakeProxy.is_upgradeable_proxy (Slither line:1407)


Begin Stake1Proxy.is_proxy (Slither line:1425)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Stake1Proxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(_impl != address(0) && ! pauseProxy,impl OR proxy is false) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
_impl != address(0) && ! pauseProxy
impl OR proxy is false

End Stake1Proxy.find_delegatecall_in_exp_node (Slither line:2858)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Stake1Proxy.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End Stake1Proxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin Stake1Proxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called '_impl'
Looking for corresponding Variable
Current function: _fallback

Begin Stake1Proxy.find_delegate_variable_from_name
Searching for _impl (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking stakeRegistry (Slither line:1689)
Checking stakeFactory (Slither line:1689)
Checking stakeVaultFactory (Slither line:1689)
Checking tos (Slither line:1689)
Checking ton (Slither line:1689)
Checking wton (Slither line:1689)
Checking depositManager (Slither line:1689)
Checking seigManager (Slither line:1689)
Checking pauseProxy (Slither line:1689)
Checking proxyImplementation (Slither line:1689)
Checking aliveImplementation (Slither line:1689)
Checking selectorImplementation (Slither line:1689)
Checking ADMIN_ROLE (Slither line:1689)
Checking MINTER_ROLE (Slither line:1689)
Checking BURNER_ROLE (Slither line:1689)
Checking _roles (Slither line:1689)
Checking DEFAULT_ADMIN_ROLE (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking _impl (Slither line:1703)
_impl is a Local Variable in Stake1Proxy._fallback (Slither line:1707)
Expression: getSelectorImplementation(msg.sig) (Slither line:1719)

Begin Stake1Proxy.find_delegate_from_call_exp

getSelectorImplementation(msg.sig) (Slither line:2003)
called = getSelectorImplementation (Slither line:2010)
Return node of function Stake1Proxy.getSelectorImplementation(bytes4): RETURN proxyImplementation[0] (Slither line:2041)
Return node of function Stake1Proxy.getSelectorImplementation(bytes4): RETURN selectorImplementation[_selector] (Slither line:2041)
Return node of function Stake1Proxy.getSelectorImplementation(bytes4): RETURN proxyImplementation[0] (Slither line:2041)
getSelectorImplementation returns a variable of type address   called impl (Slither line:2193)
Return value is LocalVariable: impl (Slither line:2266)
has no expression (Slither line:2326)

End Stake1Proxy.find_delegate_from_call_exp (Slither line:2328)

Call Expression
End Stake1Proxy.find_delegate_variable_by_name (Slither line:1739)


End Stake1Proxy.find_delegatecall_in_asm (Slither line:1637)


End Stake1Proxy.is_proxy (Slither line:1476)


Begin Stake1Proxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: Stake1Proxy 
Stake1Proxy is delegating to proxyImplementation
Looking for setter (Slither line:1200)

Looking for setter in StakeProxyStorage (Slither line:1204)


Begin StakeProxyStorage.find_setter_in_contract (Slither line:3119)


End StakeProxyStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in StakeProxyStorage 
Looking in Stake1Proxy (Slither line:1213)

Begin Stake1Proxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor(address) returns() (Slither line:3127)
Checking function: setProxyPause(bool) returns() (Slither line:3127)
Visibility: external
pauseProxy = _pause
is an Assignment Operation (Slither line:3216)
hasRole(ADMIN_ROLE,account)
_contains(set._inner,bytes32(uint256(value)))
_roles[role].members.contains(account)
set._indexes[value] != 0
require(bool,string)(isAdmin(msg.sender),Accessible: Caller is not an admin)
onlyOwner()
Checking function: upgradeTo(address,uint256) returns() (Slither line:3127)
Visibility: external
setAliveImplementation(_implementation(_index),false)
aliveImplementation[newImplementation] = _alive
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
onlyOwner()
_setAliveImplementation(newImplementation,_alive)
_setImplementation(impl,_index,true)
_roles[role].members.contains(account)
set._indexes[value] != 0
Upgraded(impl,_index)
size > 0
onlyOwner()
size = extcodesize(uint256)(account)
is an Assignment Operation (Slither line:3216)
proxyImplementation[_index]
_contains(set._inner,bytes32(uint256(value)))
require(bool,string)(Address.isContract(newImplementation),ProxyBase: Cannot set a proxy implementation to a non-contract address)
hasRole(ADMIN_ROLE,account)
require(bool,string)(impl != address(0),input is zero)
require(bool,string)(isAdmin(msg.sender),Accessible: Caller is not an admin)
require(bool,string)(_implementation(_index) != impl,same)
proxyImplementation[_index] = newImplementation
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)

End Stake1Proxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: upgradeTo in contract: Stake1Proxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin StakeProxyStorage.find_getter_in_contract (Slither line:2974)

proxyImplementation is a Variable object
newImplementation

End StakeProxyStorage.find_getter_in_contract (Slither line:3083)


Begin Stake1Proxy.find_getter_in_contract (Slither line:2974)

proxyImplementation is a Variable object
newImplementation
Checking function: addAdmin (Slither line:2988)
Checking function: removeAdmin (Slither line:2988)
Checking function: transferAdmin (Slither line:2988)
Checking function: isAdmin (Slither line:2988)
isAdmin returns bool variable  (Slither line:3008)
RETURN node expression: hasRole(ADMIN_ROLE,account) (Slither line:3028)
Checking function: hasRole (Slither line:2988)
hasRole returns bool variable  (Slither line:3008)
RETURN node expression: _roles[role].members.contains(account) (Slither line:3028)
Checking function: getRoleMemberCount (Slither line:2988)
getRoleMemberCount returns uint256 variable  (Slither line:3008)
RETURN node expression: _roles[role].members.length() (Slither line:3028)
Checking function: getRoleMember (Slither line:2988)
getRoleMember returns address variable  (Slither line:3008)
RETURN node expression: _roles[role].members.at(index) (Slither line:3028)
Checking function: getRoleAdmin (Slither line:2988)
getRoleAdmin returns bytes32 variable  (Slither line:3008)
RETURN node expression: _roles[role].adminRole (Slither line:3028)
Checking function: grantRole (Slither line:2988)
Checking function: revokeRole (Slither line:2988)
Checking function: renounceRole (Slither line:2988)
Checking function: _setupRole (Slither line:2988)
Checking function: _setRoleAdmin (Slither line:2988)
Checking function: _grantRole (Slither line:2988)
Checking function: _revokeRole (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: setProxyPause (Slither line:2988)
Checking function: upgradeTo (Slither line:2988)
Checking function: implementation (Slither line:2988)
implementation returns address variable  (Slither line:3008)
RETURN node expression: _implementation(_index) (Slither line:3028)
Checking function: setImplementation (Slither line:2988)
Checking function: setAliveImplementation (Slither line:2988)
Checking function: setSelectorImplementations (Slither line:2988)
Checking function: _setImplementation (Slither line:2988)
Checking function: _setAliveImplementation (Slither line:2988)
Checking function: _implementation (Slither line:2988)
_implementation returns address variable called impl (Slither line:3008)
RETURN node expression: proxyImplementation[_index] (Slither line:3028)

End Stake1Proxy.find_getter_in_contract (Slither line:3083)


Implementation retrieved by function: _implementation in contract: Stake1Proxy (Slither line:1285)

End Stake1Proxy.is_upgradeable_proxy (Slither line:1293)

impl_address_from_contract_call: newImplementation
impl_address_from_contract_call: StateVariable proxyImplementation
impl_address_from_contract_call: getter is _implementation
getter.full_name = _implementation(uint256)
library call: Address.isContract
library call: EnumerableSet.contains
library call: EnumerableSet.add
library call: EnumerableSet.length
library call: EnumerableSet.remove
library call: EnumerableSet.at
impl_address_from_contract_call: CallExpression require(bool,string)(_impl != address(0) && ! pauseProxy,impl OR proxy is false)
impl_address_from_contract_call: arg is _impl != address(0) && ! pauseProxy
impl_address_from_contract_call: arg is impl OR proxy is false
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression return(uint256,uint256)(0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is calldatasize()()
impl_address_from_contract_call: CallExpression calldatasize()()
impl_address_from_contract_call: CallExpression delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_impl,0,calldatasize()(),0,0)
impl_address_from_contract_call: arg is gas()()
impl_address_from_contract_call: CallExpression gas()()
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is returndatasize()()
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression _fallback()
impl_address_from_contract_call: CallExpression getSelectorImplementation(msg.sig)
impl_address_from_contract_call: arg is msg.sig
Checking external function setProxyPause
Checking external function upgradeTo
Checking external function implementation
Checking external function setImplementation
Checking external function setAliveImplementation
Checking external function setSelectorImplementations
Checking external function getSelectorImplementation
Checking public function addAdmin
Checking public function removeAdmin
Checking external function transferAdmin
Checking public function isAdmin
Checking public function hasRole
Checking public function getRoleMemberCount
Checking public function getRoleMember
Checking public function getRoleAdmin
Checking public function grantRole
Checking public function revokeRole
Checking public function renounceRole
Checking external function setProxyPause
Checking external function upgradeTo
Checking external function implementation
Checking external function setImplementation
Checking public function setAliveImplementation
Checking public function setSelectorImplementations
Checking public function getSelectorImplementation
Checking external function receive
Checking external function fallback
functions_writing_to_variable: proxyImplementation
functions_writing_to_variable: checking function Stake1Proxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.getRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._setImplementation (proxy_features line:898)
functions_writing_to_variable: exp = require(bool,string)(Address.isContract(newImplementation),ProxyBase: Cannot set a proxy implementation to a non-contract address) (proxy_features line:909)
functions_writing_to_variable: exp = _alive (proxy_features line:909)
functions_writing_to_variable: exp = proxyImplementation[_index] = newImplementation (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: proxyImplementation[_index] = newImplementation (proxy_features line:912)
functions_writing_to_variable: IndexAccess: proxyImplementation[_index] (proxy_features line:920)
functions_writing_to_variable: Identifier: proxyImplementation (proxy_features line:924)
get_value_assigned: proxyImplementation[_index] = newImplementation
functions_writing_to_variable: exp = _setAliveImplementation(newImplementation,_alive) (proxy_features line:909)
functions_writing_to_variable: _setImplementation writes newImplementation to proxyImplementation (proxy_features line:929)
functions_writing_to_variable: checking function Stake1Proxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.renounceRole (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setSelectorImplementations (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._grantRole (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setProxyPause (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.removeAdmin (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._setAliveImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._msgData (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.getRoleMemberCount (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.upgradeTo (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._implementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._fallback (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.grantRole (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.transferAdmin (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.implementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.getSelectorImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.getSelectorImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._setupRole (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.receive (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setProxyPause (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.isAdmin (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.getRoleMember (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setAliveImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setAliveImplementation (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.upgradeTo (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.revokeRole (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._setRoleAdmin (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.addAdmin (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy._msgSender (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.setSelectorImplementations (proxy_features line:898)
functions_writing_to_variable: checking function Stake1Proxy.hasRole (proxy_features line:898)
has_compatibility_checks: dependencies: ['impl', 'newImplementation', '_logic', 'newImplementation']
has_compatibility_checks: skipping internal function _setImplementation
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(_impl != address(0) && ! pauseProxy,impl OR proxy is false)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result__fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),_impl,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: _impl = getSelectorImplementation(msg.sig)
Found external function: setProxyPause
has_time_delay: (node.type) EXPRESSION
(Expression) setAliveImplementation(_implementation(_index),false)
has_time_delay: (node.type) EXPRESSION
(Expression) aliveImplementation[newImplementation] = _alive
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) _setAliveImplementation(newImplementation,_alive)
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(impl,_index,true)
has_time_delay: (node.type) RETURN
(Expression) _roles[role].members.contains(account)
has_time_delay: (node.type) RETURN
(Expression) set._indexes[value] != 0
has_time_delay: (node.type) EXPRESSION
(Expression) Upgraded(impl,_index)
has_time_delay: (node.type) RETURN
(Expression) size > 0
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) size = extcodesize(uint256)(account)
has_time_delay: (node.type) RETURN
(Expression) proxyImplementation[_index]
has_time_delay: (node.type) RETURN
(Expression) _contains(set._inner,bytes32(uint256(value)))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(Address.isContract(newImplementation),ProxyBase: Cannot set a proxy implementation to a non-contract address)
has_time_delay: (node.type) RETURN
(Expression) hasRole(ADMIN_ROLE,account)
has_time_delay: (node.type) IF
(Expression) _alive
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(impl != address(0),input is zero)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(isAdmin(msg.sender),Accessible: Caller is not an admin)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_implementation(_index) != impl,same)
has_time_delay: (node.type) EXPRESSION
(Expression) proxyImplementation[_index] = newImplementation
has_time_delay: (node.type) EXPRESSION
(Expression) _setAliveImplementation(newImplementation,_alive)
