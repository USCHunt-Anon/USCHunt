
Begin EscarooDiamond.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin EscarooDiamond.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2802)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
0
returndatasize()()

End EscarooDiamond.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin EscarooDiamond.find_delegatecall_in_exp_node

Found Expression Node: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)
Type of call: uint256 (Slither line:2817)
Args:
gas()()
facet
0
calldatasize()()
0
0

Found delegatecall in expression:
delegatecall(uint256,uint256,uint256,uint256,uint256,uint256) (Slither line:2824)

Destination is facet (Slither line:2828)
dest.value: facet (Slither line:2831)
Expression: address(bytes20(ds.facetAddressAndSelectorPosition[msg.sig].facetAddress)) (Slither line:2836)

End EscarooDiamond.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin EscarooDiamond.find_delegatecall_in_exp_node

Found Expression Node: revert(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: revert(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End EscarooDiamond.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin EscarooDiamond.find_delegatecall_in_exp_node

Found Expression Node: ds = position (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)

End EscarooDiamond.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin EscarooDiamond.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End EscarooDiamond.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin EscarooDiamond.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'facet'
Looking for corresponding Variable
Current function: fallback

Begin EscarooDiamond.find_delegate_variable_from_name
Searching for facet (Slither line:1674)

Searching State Variables (Slither line:1687)

Searching Local Variables (Slither line:1698)
Checking facet (Slither line:1703)
facet is a Local Variable in EscarooDiamond.fallback (Slither line:1707)
facet appears to be a Diamond facet address (Slither line:1713)

End EscarooDiamond.find_delegate_variable_by_name


End EscarooDiamond.find_delegatecall_in_asm (Slither line:1637)


End EscarooDiamond.is_proxy (Slither line:1476)


Begin EscarooDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: EscarooDiamond 
Local Variable: facet (Slither line:1164)
EscarooDiamond is delegating to facet
Looking for setter (Slither line:1200)


Begin EscarooDiamond.find_setter_in_contract (Slither line:3119)

Expression: address(bytes20(ds.facetAddressAndSelectorPosition[msg.sig].facetAddress)) (Slither line:3122)
Checking function: constructor(IDiamondCut.FacetCut[],EscarooDiamond.DiamondArgs) returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: receive() returns() (Slither line:3127)

Begin DiamondCut corner case handling (Slither line:3287)

require(bool,string)
require(bool,string)
OwnershipTransferred
require(bool,string)
ds.selectors.push
require(bool,string)
require(bool,string)
enforceHasContractCode
ds.selectors.pop
initializeDiamondCut
DiamondCut
addFunctions
replaceFunctions
revert(string)
removeFunctions
revert(string)
revert(string)
LibDiamond.diamondCut

End DiamondCut corner case handling (Slither line:3343)


End EscarooDiamond.find_setter_in_contract (Slither line:3345)


Implementation set by function: diamondCut in contract: LibDiamond (Slither line:1264)
Looking for getter (Slither line:1273)


Begin EscarooDiamond.find_getter_in_contract (Slither line:2974)

facet is a Variable object
address(bytes20(ds.facetAddressAndSelectorPosition[msg.sig].facetAddress))
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: receive (Slither line:2988)

End EscarooDiamond.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in EscarooDiamond (Slither line:1305)

Begin LibDiamond.find_getter_in_contract (Slither line:2974)

facet is a Variable object
address(bytes20(ds.facetAddressAndSelectorPosition[msg.sig].facetAddress))
Checking function: diamondStorage (Slither line:2988)
diamondStorage returns LibDiamond.DiamondStorage variable called ds (Slither line:3008)
Checking function: setContractOwner (Slither line:2988)
Checking function: contractOwner (Slither line:2988)
contractOwner returns address variable called contractOwner_ (Slither line:3008)
Checking function: enforceIsContractOwner (Slither line:2988)
Checking function: diamondCut (Slither line:2988)
Checking function: addFunctions (Slither line:2988)
Checking function: replaceFunctions (Slither line:2988)
Checking function: removeFunctions (Slither line:2988)
Checking function: initializeDiamondCut (Slither line:2988)
Checking function: enforceHasContractCode (Slither line:2988)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End LibDiamond.find_getter_in_contract (Slither line:3083)

Looking for Loupe functions in LibDiamond
diamondStorage() returns(LibDiamond.DiamondStorage)
setContractOwner(address) returns()
contractOwner() returns(address)
enforceIsContractOwner() returns()
diamondCut(IDiamondCut.FacetCut[],address,bytes) returns()
addFunctions(address,bytes4[]) returns()
replaceFunctions(address,bytes4[]) returns()
removeFunctions(address,bytes4[]) returns()
initializeDiamondCut(address,bytes) returns()
enforceHasContractCode(address,string) returns()
slitherConstructorConstantVariables() returns()
impl_address_from_contract_call: address(bytes20(ds.facetAddressAndSelectorPosition[msg.sig].facetAddress))
Checking external function fallback
Checking external function receive
functions_writing_to_variable: facet
functions_writing_to_variable: checking function LibDiamond.diamondCut (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.slitherConstructorConstantVariables (proxy_features line:898)
functions_writing_to_variable: checking function EscarooDiamond.constructor (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.replaceFunctions (proxy_features line:898)
functions_writing_to_variable: checking function EscarooDiamond.receive (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.setContractOwner (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.initializeDiamondCut (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.enforceIsContractOwner (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.addFunctions (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.removeFunctions (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.enforceHasContractCode (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.diamondStorage (proxy_features line:898)
functions_writing_to_variable: checking function LibDiamond.contractOwner (proxy_features line:898)
has_compatibility_checks: dependencies: ['REF_17', 'TMP_10', 'TMP_11', 'REF_18', 'ds', 'REF_19']
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_1 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),facet,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: ds = position
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: position = LibDiamond.DIAMOND_STORAGE_POSITION
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: facet = address(bytes20(ds.facetAddressAndSelectorPosition[msg.sig].facetAddress))
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: require(bool,string)(facet != address(0),Diamond: Function does not exist)
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: constructor
Found fallback
Found external function: receive
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length == 0,LibDiamondCut: _init is address(0) but_calldata is not empty)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress == address(0),LibDiamondCut: Can't add function that already exists)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddressAndSelectorPosition[selector] = FacetAddressAndSelectorPosition(_facetAddress,selectorCount)
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _functionSelectors[selectorIndex]
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_calldata.length > 0,LibDiamondCut: _calldata is empty but _init is not address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectors.push(selector)
has_time_delay: (node.type) IF
(Expression) _init != address(this)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorCount ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddressAndSelectorPosition = ds.facetAddressAndSelectorPosition[selector]
has_time_delay: (node.type) IF_LOOP
(Expression) facetIndex < _diamondCut.length
has_time_delay: (node.type) IF
(Expression) ! success
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddressAndSelectorPosition.facetAddress != address(0),LibDiamondCut: Can't remove function that doesn't exist)
has_time_delay: (node.type) EXPRESSION
(Expression) facetIndex ++
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddressAndSelectorPosition.facetAddress != address(this),LibDiamondCut: Can't remove immutable function.)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_init,LibDiamondCut: _init address has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorCount --
has_time_delay: (node.type) NEW VARIABLE
(Expression) action = _diamondCut[facetIndex].action
has_time_delay: (node.type) EXPRESSION
(Expression) (success,error) = _init.delegatecall(_calldata)
has_time_delay: (node.type) IF
(Expression) oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount
has_time_delay: (node.type) IF
(Expression) action == IDiamondCut.FacetCutAction.Add
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectors.pop()
has_time_delay: (node.type) EXPRESSION
(Expression) initializeDiamondCut(_init,_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) DiamondCut(_diamondCut,_init,_calldata)
has_time_delay: (node.type) EXPRESSION
(Expression) addFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) NEW VARIABLE
(Expression) lastSelector = ds.selectors[selectorCount]
has_time_delay: (node.type) EXPRESSION
(Expression) ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector
has_time_delay: (node.type) IF
(Expression) action == IDiamondCut.FacetCutAction.Replace
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddressAndSelectorPosition[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition
has_time_delay: (node.type) IF
(Expression) error.length > 0
has_time_delay: (node.type) EXPRESSION
(Expression) replaceFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) delete ds.facetAddressAndSelectorPosition[selector]
has_time_delay: (node.type) IF
(Expression) action == IDiamondCut.FacetCutAction.Remove
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(string(error))
has_time_delay: (node.type) EXPRESSION
(Expression) removeFunctions(_diamondCut[facetIndex].facetAddress,_diamondCut[facetIndex].functionSelectors)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: _init function reverted)
has_time_delay: (node.type) EXPRESSION
(Expression) revert(string)(LibDiamondCut: Incorrect FacetCutAction)
has_time_delay: (node.type) IF
(Expression) _init == address(0)
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress != address(0),LibDiamondCut: Replace facet can't be address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(contractSize > 0,_errorMessage)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_facetAddress,LibDiamondCut: Replace facet has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) contractSize = extcodesize(uint256)(_contract)
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _functionSelectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _functionSelectors[selectorIndex]
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorCount = uint16(ds.selectors.length)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = DIAMOND_STORAGE_POSITION
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != address(this),LibDiamondCut: Can't replace immutable function)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress != address(0),LibDiamondCut: Add facet can't be address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != _facetAddress,LibDiamondCut: Can't replace function with same function)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) EXPRESSION
(Expression) enforceHasContractCode(_facetAddress,LibDiamondCut: Add facet has no code)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldFacetAddress != address(0),LibDiamondCut: Can't replace function that doesn't exist)
has_time_delay: (node.type) NEW VARIABLE
(Expression) ds = diamondStorage()
has_time_delay: (node.type) EXPRESSION
(Expression) ds = position
has_time_delay: (node.type) EXPRESSION
(Expression) ds.facetAddressAndSelectorPosition[selector].facetAddress = _facetAddress
has_time_delay: (node.type) NEW VARIABLE
(Expression) selectorCount = ds.selectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_facetAddress == address(0),LibDiamondCut: Remove facet address must be address(0))
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _functionSelectors.length
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_functionSelectors.length > 0,LibDiamondCut: No selectors in facet to cut)
has_time_delay: (node.type) EXPRESSION
(Expression) selectorIndex ++
has_time_delay: (node.type) NEW VARIABLE
(Expression) selector = _functionSelectors[selectorIndex]
has_time_delay: (node.type) IF_LOOP
(Expression) selectorIndex < _functionSelectors.length
has_time_delay: (node.type) NEW VARIABLE
(Expression) oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress

Begin LibDiamond.is_proxy (Slither line:1425)


End LibDiamond.is_proxy (Slither line:1428)


Begin LibDiamond.is_upgradeable_proxy (Slither line:1136)

Checking contract: LibDiamond 

End LibDiamond.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondLoupe.is_proxy (Slither line:1425)


End IDiamondLoupe.is_proxy (Slither line:1428)


Begin IDiamondLoupe.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondLoupe 

End IDiamondLoupe.is_upgradeable_proxy (Slither line:1407)


Begin IDiamondCut.is_proxy (Slither line:1425)


End IDiamondCut.is_proxy (Slither line:1428)


Begin IDiamondCut.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDiamondCut 

End IDiamondCut.is_upgradeable_proxy (Slither line:1407)


Begin IERC173.is_proxy (Slither line:1425)


End IERC173.is_proxy (Slither line:1428)


Begin IERC173.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC173 

End IERC173.is_upgradeable_proxy (Slither line:1407)


Begin IERC165.is_proxy (Slither line:1425)


End IERC165.is_proxy (Slither line:1428)


Begin IERC165.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC165 

End IERC165.is_upgradeable_proxy (Slither line:1407)

