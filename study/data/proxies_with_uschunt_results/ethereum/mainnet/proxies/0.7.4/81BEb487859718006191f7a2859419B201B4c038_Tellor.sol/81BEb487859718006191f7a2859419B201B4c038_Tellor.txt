
Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin ITellor.is_proxy (Slither line:1425)


End ITellor.is_proxy (Slither line:1428)


Begin ITellor.is_upgradeable_proxy (Slither line:1136)

Checking contract: ITellor 

End ITellor.is_upgradeable_proxy (Slither line:1407)


Begin TellorVariables.is_proxy (Slither line:1425)


End TellorVariables.is_proxy (Slither line:1428)


Begin TellorVariables.is_upgradeable_proxy (Slither line:1136)

Checking contract: TellorVariables 

End TellorVariables.is_upgradeable_proxy (Slither line:1407)


Begin TellorStorage.is_proxy (Slither line:1425)


End TellorStorage.is_proxy (Slither line:1428)


Begin TellorStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: TellorStorage 

End TellorStorage.is_upgradeable_proxy (Slither line:1407)


Begin Utilities.is_proxy (Slither line:1425)


End Utilities.is_proxy (Slither line:1428)


Begin Utilities.is_upgradeable_proxy (Slither line:1136)

Checking contract: Utilities 

End Utilities.is_upgradeable_proxy (Slither line:1407)


Begin TellorGetters.is_proxy (Slither line:1425)


End TellorGetters.is_proxy (Slither line:1428)


Begin TellorGetters.is_upgradeable_proxy (Slither line:1136)

Checking contract: TellorGetters 

End TellorGetters.is_upgradeable_proxy (Slither line:1407)


Begin Extension.is_proxy (Slither line:1425)


End Extension.is_proxy (Slither line:1428)


Begin Extension.is_upgradeable_proxy (Slither line:1136)

Checking contract: Extension 

End Extension.is_upgradeable_proxy (Slither line:1407)


Begin TellorTransfer.is_proxy (Slither line:1425)


End TellorTransfer.is_proxy (Slither line:1428)


Begin TellorTransfer.is_upgradeable_proxy (Slither line:1136)

Checking contract: TellorTransfer 

End TellorTransfer.is_upgradeable_proxy (Slither line:1407)


Begin TellorStake.is_proxy (Slither line:1425)


End TellorStake.is_proxy (Slither line:1428)


Begin TellorStake.is_upgradeable_proxy (Slither line:1136)

Checking contract: TellorStake 

End TellorStake.is_upgradeable_proxy (Slither line:1407)


Begin Tellor.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Tellor.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2802)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
returndatasize()()

End Tellor.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Tellor.find_delegatecall_in_exp_node

Found Expression Node: switch_expr_91891_248_0_fallback_asm_0 = result (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)

End Tellor.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin Tellor.find_delegatecall_in_asm (Slither line:1541)


End Tellor.find_delegatecall_in_asm (Slither line:1637)


Begin Tellor.find_delegatecall_in_asm (Slither line:1541)


End Tellor.find_delegatecall_in_asm (Slither line:1637)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Tellor.find_delegatecall_in_exp_node

Found Expression Node: (result) = _delegate(addr) (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: _delegate
Type of call: tuple(bool,bytes memory) (Slither line:2817)
Args:
addr

End Tellor.find_delegatecall_in_exp_node (Slither line:2858)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin Tellor.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()()) (Slither line:2802)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
0
0
returndatasize()()

End Tellor.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


Found LowLevelCall (Slither line:2740)


Found delegatecall in LowLevelCall (Slither line:2742)

None (Slither line:2749)

End Contract.find_delegatecall_in_ir (Slither line:2773)


End Tellor.is_proxy (Slither line:1476)


Begin Tellor.is_upgradeable_proxy (Slither line:1136)

Checking contract: Tellor 
Local Variable: implementation (Slither line:1164)
Tellor is delegating to implementation
Looking for setter (Slither line:1200)


Begin Tellor.find_setter_in_contract (Slither line:3119)

Checking function: changeExtension(address) returns() (Slither line:3127)
Visibility: external
addresses[_EXTENSION] = _ext
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(msg.sender == addresses[_DEITY],only deity can call this fn)
Checking function: changeMigrator(address) returns() (Slither line:3127)
Visibility: external
require(bool,string)(msg.sender == addresses[_DEITY],only deity can call this fn)
addresses[_MIGRATOR] = _migrator
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Checking function: _migrate(address) returns() (Slither line:3127)
Visibility: internal
Checking function: migrateFrom(address,address,uint256,bool) returns() (Slither line:3127)
Visibility: external
_migrateFrom(_origin,_destination,_amount,_bypass)
0
require(bool,string)(previousSupply + _amount >= previousSupply,Overflow happened)
uints[_TOTAL_SUPPLY] += _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
updateBalanceAtNow(_to,previousBalance + _amount)
require(bool,string)(! migrated[_origin],already migrated)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
Transfer(address(0),_to,_amount)
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
_doMint(_destination,_amount)
migrated[_origin] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(msg.sender == addresses[_MIGRATOR],not allowed)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
min = mid
is an Assignment Operation (Slither line:3216)
require(bool,string)(_amount != 0,Tried to mint non-positive amount)
require(bool,string)(_to != address(0),Receiver is 0 address)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
Checking function: migrateFromBatch(address[],address[],uint256[]) returns() (Slither line:3127)
Visibility: external
require(bool,string)(_origin.length == _destination.length && _origin.length == _amount.length,mismatching input)
0
require(bool,string)(previousSupply + _amount >= previousSupply,Overflow happened)
uints[_TOTAL_SUPPLY] += _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
updateBalanceAtNow(_to,previousBalance + _amount)
require(bool,string)(! migrated[_origin],already migrated)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
Transfer(address(0),_to,_amount)
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
_doMint(_destination,_amount)
migrated[_origin] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
min = mid
is an Assignment Operation (Slither line:3216)
require(bool,string)(_amount != 0,Tried to mint non-positive amount)
index ++
_migrateFrom(_origin[index],_destination[index],_amount[index],false)
require(bool,string)(_to != address(0),Receiver is 0 address)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
require(bool,string)(msg.sender == addresses[_MIGRATOR],not allowed)
Checking function: _migrateFrom(address,address,uint256,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: migrateFor(address,uint256,bool) returns() (Slither line:3127)
Visibility: external
0
require(bool,string)(previousSupply + _amount >= previousSupply,Overflow happened)
uints[_TOTAL_SUPPLY] += _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
updateBalanceAtNow(_to,previousBalance + _amount)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
Transfer(address(0),_to,_amount)
checkpoints[mid].value
require(bool,string)(! migrated[_destination],already migrated)
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
_doMint(_destination,_amount)
require(bool,string)(msg.sender == addresses[_MIGRATOR],not allowed)
migrated[_destination] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
min = mid
is an Assignment Operation (Slither line:3216)
_migrateFor(_destination,_amount,_bypass)
require(bool,string)(_amount != 0,Tried to mint non-positive amount)
require(bool,string)(_to != address(0),Receiver is 0 address)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
Checking function: migrateForBatch(address[],uint256[]) returns() (Slither line:3127)
Visibility: external
0
require(bool,string)(previousSupply + _amount >= previousSupply,Overflow happened)
uints[_TOTAL_SUPPLY] += _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
index ++
_migrateFor(_destination[index],_amount[index],false)
updateBalanceAtNow(_to,previousBalance + _amount)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
Transfer(address(0),_to,_amount)
checkpoints[mid].value
require(bool,string)(! migrated[_destination],already migrated)
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
_doMint(_destination,_amount)
require(bool,string)(msg.sender == addresses[_MIGRATOR],not allowed)
migrated[_destination] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(_amount.length == _destination.length,mismatching input)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
min = mid
is an Assignment Operation (Slither line:3216)
require(bool,string)(_amount != 0,Tried to mint non-positive amount)
require(bool,string)(_to != address(0),Receiver is 0 address)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
Checking function: _migrateFor(address,uint256,bool) returns() (Slither line:3127)
Visibility: internal
Checking function: migrate() returns() (Slither line:3127)
Visibility: external
0
require(bool,string)(previousSupply + _amount >= previousSupply,Overflow happened)
uints[_TOTAL_SUPPLY] += _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
updateBalanceAtNow(_to,previousBalance + _amount)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
Transfer(address(0),_to,_amount)
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
require(bool,string)(! migrated[_user],Already migrated)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
_doMint(_user,ITellor(addresses[_OLD_TELLOR]).balanceOf(_user))
require(bool,string)(_amount != 0,Tried to mint non-positive amount)
min = mid
is an Assignment Operation (Slither line:3216)
_migrate(msg.sender)
migrated[_user] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(_to != address(0),Receiver is 0 address)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
Checking function: submitMiningSolution(string,uint256[5],uint256[5]) returns() (Slither line:3127)
Visibility: external
_adjustDifficulty()
_request.apiUintVars[_TOTAL_TIP] = 0
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(stakerDetails[msg.sender].currentStatus == 1,Miner status is not staker)
NewValue(_requestIds,_timeOfLastNewValueVar,b,uints[_CURRENT_TOTAL_TIPS],_currChallenge)
i ++
require(bool,string)(_requestIds[0] == currentMiners[0].value,Request ID is wrong)
newValueTimestamps.push(_timeOfLastNewValueVar)
require(bool,string)(_requestIds[1] == currentMiners[1].value,Request ID is wrong)
checkpoints[mid].value
require(bool,string)(_requestIds[2] == currentMiners[2].value,Request ID is wrong)
balanceOfAt(_user,block.number)
_newBlock(_nonce,_requestIds)
require(bool,string)(_requestIds[3] == currentMiners[3].value,Request ID is wrong)
_payReward(miners,_previousTime)
max[minI] = data[i]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
uints[_SLOT_PROGRESS] = 0
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(_requestIds[4] == currentMiners[4].value,Request ID is wrong)
uints[_T_BLOCK] ++
maxIndex[minI] = i
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
uints[_hashMsgSender] = block.timestamp
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
min5 = data[i]
is an Assignment Operation (Slither line:3216)
min = mid
is an Assignment Operation (Slither line:3216)
uints[_SLOT_PROGRESS] ++
max = mid - 1
is an Assignment Operation (Slither line:3216)
require(bool,string)(minersByChallenge[_currChallenge][msg.sender] == false,Miner already submitted the value)
minersByChallenge[_currChallenge][msg.sender] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(uint256(sha256(bytes)(abi.encodePacked(ripemd160(bytes)(abi.encodePacked(keccak256(bytes)(abi.encodePacked(bytesVars[_CURRENT_CHALLENGE],msg.sender,_nonce))))))) % uints[_DIFFICULTY] == 0 || block.timestamp - uints[_TIME_OF_LAST_NEW_VALUE] >= 900,Incorrect nonce for current challenge)
0
_tblock.valuesByTimestamp[0][_slotP] = _values[0]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
j_scope_0 ++
_tblock.valuesByTimestamp[1][_slotP] = _values[1]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
i_scope_0 ++
currentMiners[i_scope_0].value = _topId[i_scope_0]
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
_tblock.valuesByTimestamp[2][_slotP] = _values[2]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
requestQ[requestDetails[_topId[i_scope_0]].apiUintVars[_REQUEST_Q_POSITION]] = 0
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_tblock.valuesByTimestamp[3][_slotP] = _values[3]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints[checkpoints.length - 1].value
uints[_CURRENT_TOTAL_TIPS] += requestDetails[_topId[i_scope_0]].apiUintVars[_TOTAL_TIP]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_tblock.valuesByTimestamp[4][_slotP] = _values[4]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
min5 = max[j_scope_0]
is an Assignment Operation (Slither line:3216)
_tblock.minersByValue[0][_slotP] = msg.sender
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_currChallenge = keccak256(bytes)(abi.encode(_nonce,_currChallenge,blockhash(uint256)(block.number - 1)))
is an Assignment Operation (Slither line:3216)
minI = j_scope_0
is an Assignment Operation (Slither line:3216)
_tblock.minersByValue[1][_slotP] = msg.sender
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
bytesVars[_CURRENT_CHALLENGE] = _currChallenge
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
require(bool,string)(_amount != 0,Tried to mint non-positive amount)
_tblock.minersByValue[2][_slotP] = msg.sender
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
NewChallenge(_currChallenge,_topId,uints[_DIFFICULTY],uints[_CURRENT_TOTAL_TIPS])
uint256(a)
require(bool,string)(_to != address(0),Receiver is 0 address)
_tblock.minersByValue[3][_slotP] = msg.sender
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_doMint(miners[0],reward + _tip)
uint256(b)
_tblock.minersByValue[4][_slotP] = msg.sender
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_doMint(miners[1],reward + _tip)
checkpoints[min].value
_doMint(miners[2],reward + _tip)
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
_change = (_diff * (int256(uints[_TIME_TARGET]) - _change)) / 4000
is an Assignment Operation (Slither line:3216)
NonceSubmitted(msg.sender,_nonce,_requestIds,_values,_currChallenge,_slotP)
_doMint(miners[3],reward + _tip)
_doMint(miners[4],reward + _tip)
uints[_DIFFICULTY] = uint256(SafeMath.max(_diff + _change,1))
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
i ++
_doMint(addresses[_OWNER],_devShare)
require(bool,string)(previousSupply + _amount >= previousSupply,Overflow happened)
uints[_CURRENT_TOTAL_TIPS] = 0
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
uints[_TOTAL_SUPPLY] += _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_change = 1
is an Assignment Operation (Slither line:3216)
updateBalanceAtNow(_to,previousBalance + _amount)
a
Transfer(address(0),_to,_amount)
b
(_max,_index) = _getMax5(requestQ)
is an Assignment Operation (Slither line:3216)
uints[_TIME_OF_LAST_NEW_VALUE] = _timeOfLastNewValueVar
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_tblock.valuesByTimestamp[k][j] = _tblock.valuesByTimestamp[k][j - 1]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_tblock.minersByValue[k][j] = _tblock.minersByValue[k][j - 1]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
j --
require(bool,string)(uints[_hashMsgSender] == 0 || block.timestamp - uints[_hashMsgSender] > 900,Miner can only win rewards once per 15 min)
_tblock.valuesByTimestamp[k][j] = temp
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
i ++
j ++
max[j] = data[j + 1]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_tblock.minersByValue[k][j] = temp2
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
maxIndex[j] = j + 1
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
uints[_hashMsgSender] = block.timestamp
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
_verifyNonce(_nonce)
a = _tblock.valuesByTimestamp[k]
is an Assignment Operation (Slither line:3216)
_requestIds[i] = requestIdByRequestQIndex[_index[i]]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_request.finalValues[_timeOfLastNewValueVar] = a[2]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
min5 = max[j]
is an Assignment Operation (Slither line:3216)
_submitMiningSolution(_nonce,_requestIds,_values)
b[k] = a[2]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
k ++
_requestIds[i] = currentMiners[4 - i].value
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
minI = j
is an Assignment Operation (Slither line:3216)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
_request.minersByValue[_timeOfLastNewValueVar] = _tblock.minersByValue[k]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_request.valuesByTimestamp[_timeOfLastNewValueVar] = _tblock.valuesByTimestamp[k]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
delete _tblock.minersByValue[k]
delete _tblock.valuesByTimestamp[k]
_request.requestTimestamps.push(_timeOfLastNewValueVar)
_request.minedBlockNum[_timeOfLastNewValueVar] = block.number
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Checking function: _submitMiningSolution(string,uint256[5],uint256[5]) returns() (Slither line:3127)
Visibility: internal
Checking function: _verifyNonce(string) returns() (Slither line:3127)
Visibility: internal
Checking function: _adjustDifficulty() returns() (Slither line:3127)
Visibility: internal
Checking function: _payReward(address[5],uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _newBlock(string,uint256[5]) returns() (Slither line:3127)
Visibility: internal
Checking function: addTip(uint256,uint256) returns() (Slither line:3127)
Visibility: external
require(bool,string)(previousSupply - _amount <= previousSupply,Overflow happened)
_request.apiUintVars[_REQUEST_Q_POSITION] = _index
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
updateBalanceAtNow(_from,previousBalance - _amount)
uints[_TOTAL_SUPPLY] -= _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
requestQ[_request.apiUintVars[_REQUEST_Q_POSITION]] += _tip
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints[mid].value
balanceOfAt(_user,block.number)
min = mid
is an Assignment Operation (Slither line:3216)
max = mid - 1
is an Assignment Operation (Slither line:3216)
require(bool,string)(_requestId != 0,RequestId is 0)
require(bool,string)(_tip != 0,Tip should be greater than 0)
0
updateOnDeck(_requestId,_tip)
_doBurn(msg.sender,_tip)
uints[_REQUEST_COUNT] = _count
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints[checkpoints.length - 1].value
None
require(bool,string)(_requestId < _count,RequestId is not less than count)
minIndex = data.length - 1
is an Assignment Operation (Slither line:3216)
TipAdded(msg.sender,_requestId,_tip,requestDetails[_requestId].apiUintVars[_TOTAL_TIP])
assert(bool)(c >= a)
min = data[minIndex]
is an Assignment Operation (Slither line:3216)
c
checkpoints[min].value
require(bool,string)(previousBalance - _amount <= previousBalance,Overflow happened)
i --
min = data[i]
is an Assignment Operation (Slither line:3216)
minIndex = i
is an Assignment Operation (Slither line:3216)
_request.apiUintVars[_TOTAL_TIP] = _request.apiUintVars[_TOTAL_TIP].add(_tip)
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
uints[_CURRENT_TOTAL_TIPS] += _tip
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
(_min,_index) = _getMin(requestQ)
is an Assignment Operation (Slither line:3216)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
requestQ[_index] = _request.apiUintVars[_TOTAL_TIP]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
requestDetails[requestIdByRequestQIndex[_index]].apiUintVars[_REQUEST_Q_POSITION] = 0
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
requestIdByRequestQIndex[_index] = _requestId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Checking function: updateOnDeck(uint256,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _getMin(uint256[51]) returns(uint256,uint256) (Slither line:3127)
Visibility: internal
Checking function: _getMax5(uint256[51]) returns(uint256[5],uint256[5]) (Slither line:3127)
Visibility: internal
Checking function: _getTopRequestIDs() returns(uint256[5]) (Slither line:3127)
Visibility: internal
Checking function: _delegate(address) returns(bool,bytes) (Slither line:3127)
Visibility: internal
Checking function: fallback() returns() (Slither line:3127)
Checking function: slitherConstructorConstantVariables() returns() (Slither line:3127)
Visibility: internal
Checking function: beginDispute(uint256,uint256,uint256) returns() (Slither line:3127)
Visibility: public
require(bool,string)(_amount != 0,Tried to send non-positive amount)
NewDispute(disputeId,_requestId,_timestamp,_miner)
require(bool,string)(_to != address(0),Receiver is 0 address)
disputesById[disputeId].isPropFork = false
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
require(bool,string)(allowedToTrade(_from,_amount),Should have sufficient balance to trade)
disputesById[disputeId].hash = _hash
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
requestDetails[_requestId].apiUintVars[_DISPUTE_COUNT] = requestDetails[_requestId].apiUintVars[_DISPUTE_COUNT] + 1
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints[mid].value
_fee = uints[_STAKE_AMOUNT] * requestDetails[_requestId].apiUintVars[_DISPUTE_COUNT]
is an Assignment Operation (Slither line:3216)
balanceOfAt(_user,block.number)
updateBalanceAtNow(_from,previousBalance - _amount)
previousBalance = balanceOf(_to)
is an Assignment Operation (Slither line:3216)
_fee = uints[_DISPUTE_FEE] * dispRounds
is an Assignment Operation (Slither line:3216)
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
updateBalanceAtNow(_to,previousBalance + _amount)
min = mid
is an Assignment Operation (Slither line:3216)
Transfer(_from,_to,_amount)
disputesById[disputeId].reportedMiner = _miner
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
disputesById[disputeId].reportingParty = msg.sender
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
max = mid - 1
is an Assignment Operation (Slither line:3216)
disputesById[disputeId].proposedForkAddress = address(0)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
disputesById[disputeId].executed = false
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
disputesById[disputeId].disputeVotePassed = false
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
disputesById[disputeId].tally = 0
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
0
disputesById[disputeId].disputeUintVars[_REQUEST_ID] = _requestId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputesById[disputeId].disputeUintVars[_TIMESTAMP] = _timestamp
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputesById[disputeId].disputeUintVars[_VALUE] = _request.valuesByTimestamp[_timestamp][_minerIndex]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputesById[disputeId].disputeUintVars[_MIN_EXECUTION_DATE] = block.timestamp + 172800 * dispRounds
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints[checkpoints.length - 1].value
disputesById[disputeId].disputeUintVars[_BLOCK_NUMBER] = block.number
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputesById[disputeId].disputeUintVars[_MINER_SLOT] = _minerIndex
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputesById[disputeId].disputeUintVars[_FEE] = _fee
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_doTransfer(msg.sender,address(this),_fee)
stakerDetails[_miner].currentStatus = 3
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
checkpoints[min].value
_request.inDispute[_timestamp] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
_request.finalValues[_timestamp] = 0
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
uints[_DISPUTE_COUNT] = disputeId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputesById[disputeId].disputeUintVars[_ORIGINAL_ID] = hashId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disputeIdByDisputeHash[_hash] = disputeId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
hashId = disputeId
is an Assignment Operation (Slither line:3216)
(balanceOf(_user) >= _amount)
false
disputesById[origID].disputeUintVars[_DISPUTE_ROUNDS] = dispRounds
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
true
disputesById[origID].disputeUintVars[keccak256(bytes)(abi.encode(dispRounds))] = disputeId
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
require(bool,string)(disputesById[lastID].disputeUintVars[_MIN_EXECUTION_DATE] <= block.timestamp,Dispute is already open)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
require(bool,string)(_request.minedBlockNum[_timestamp] != 0,Mined block is 0)
require(bool,string)(_minerIndex < 5,Miner index is wrong)
require(bool,string)(block.timestamp - disputesById[lastID].disputeUintVars[_TALLY_DATE] <= 86400,Time for voting haven't elapsed)
Checking function: vote(uint256,bool) returns() (Slither line:3127)
Visibility: public
require(bool,string)(stakerDetails[msg.sender].currentStatus != 3,Miner is under dispute)
0
disp.voted[msg.sender] = true
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
disp.disputeUintVars[_NUM_OF_VOTES] += 1
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
c = a - b
is an Assignment Operation (Slither line:3216)
assert(bool)(c <= a)
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
Voted(_disputeId,_supportsDispute,msg.sender,voteWeight)
disp.tally = disp.tally.add(int256(voteWeight))
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
c = a - b
is an Assignment Operation (Slither line:3216)
assert(bool)(c >= a)
min = mid
is an Assignment Operation (Slither line:3216)
disp.tally = disp.tally.sub(int256(voteWeight))
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
c = a + b
is an Assignment Operation (Slither line:3216)
assert(bool)(c >= a)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
c = a + b
is an Assignment Operation (Slither line:3216)
require(bool,string)(disp.voted[msg.sender] != true,Sender has already voted)
assert(bool)(c <= a)
require(bool,string)(voteWeight != 0,User balance is 0)
Checking function: unlockDisputeFee(uint256) returns() (Slither line:3127)
Visibility: public
lastID = origID
is an Assignment Operation (Slither line:3216)
require(bool,string)(_amount != 0,Tried to send non-positive amount)
require(bool,string)(_to != address(0),Receiver is 0 address)
require(bool,string)(allowedToTrade(_from,_amount),Should have sufficient balance to trade)
checkpoints[mid].value
balanceOfAt(_user,block.number)
updateBalanceAtNow(_from,previousBalance - _amount)
previousBalance = balanceOf(_to)
is an Assignment Operation (Slither line:3216)
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
i ++
_id = disp.disputeUintVars[keccak256(bytes)(abi.encode(dispRounds - i))]
is an Assignment Operation (Slither line:3216)
updateBalanceAtNow(_to,previousBalance + _amount)
min = mid
is an Assignment Operation (Slither line:3216)
dispRounds = 1
is an Assignment Operation (Slither line:3216)
Transfer(_from,_to,_amount)
max = mid - 1
is an Assignment Operation (Slither line:3216)
_id = origID
is an Assignment Operation (Slither line:3216)
require(bool,string)(disp.disputeUintVars[_PAID] == 0,already paid out)
require(bool,string)(block.timestamp - last.disputeUintVars[_TALLY_DATE] > 86400,Time for voting haven't elapsed)
_doTransfer(address(this),disp2.reportingParty,disp2.disputeUintVars[_FEE])
0
disp.disputeUintVars[_PAID] = 1
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
stakes.currentStatus = 1
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
checkpoints[checkpoints.length - 1].value
stakes.startDate = block.timestamp - (block.timestamp % 86400)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
uints[_STAKE_COUNT] -= 1
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
addresses[_EXTENSION].delegatecall(abi.encodeWithSignature(updateMinDisputeFee))
_request.finalValues[disp.disputeUintVars[_TIMESTAMP]] = disp.disputeUintVars[_VALUE]
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
stakes.currentStatus = 5
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
checkpoints[min].value
_doTransfer(disp.reportedMiner,disp.reportingParty,uints[_STAKE_AMOUNT])
_request.inDispute[disp.disputeUintVars[_TIMESTAMP]] = false
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
stakes.currentStatus = 0
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
i_scope_0 ++
_id = disp.disputeUintVars[keccak256(bytes)(abi.encode(dispRounds - i_scope_0))]
is an Assignment Operation (Slither line:3216)
_doTransfer(address(this),last.reportedMiner,disputesById[_id].disputeUintVars[_FEE])
last = disputesById[_id]
is an Assignment Operation (Slither line:3216)
(balanceOf(_user) >= _amount)
false
requestDetails[disp.disputeUintVars[_REQUEST_ID]].apiUintVars[_DISPUTE_COUNT] --
true
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
Checking function: transfer(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
false
require(bool,string)(_amount != 0,Tried to send non-positive amount)
0
require(bool,string)(_to != address(0),Receiver is 0 address)
true
require(bool,string)(allowedToTrade(_from,_amount),Should have sufficient balance to trade)
_doTransfer(msg.sender,_to,_amount)
true
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
updateBalanceAtNow(_from,previousBalance - _amount)
previousBalance = balanceOf(_to)
is an Assignment Operation (Slither line:3216)
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
updateBalanceAtNow(_to,previousBalance + _amount)
min = mid
is an Assignment Operation (Slither line:3216)
Transfer(_from,_to,_amount)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
(balanceOf(_user) >= _amount)
Checking function: transferFrom(address,address,uint256) returns(bool) (Slither line:3127)
Visibility: public
true
false
require(bool,string)(_amount != 0,Tried to send non-positive amount)
0
require(bool,string)(_to != address(0),Receiver is 0 address)
true
require(bool,string)(allowedToTrade(_from,_amount),Should have sufficient balance to trade)
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
updateBalanceAtNow(_from,previousBalance - _amount)
previousBalance = balanceOf(_to)
is an Assignment Operation (Slither line:3216)
require(bool,string)(previousBalance + _amount >= previousBalance,Overflow happened)
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)
updateBalanceAtNow(_to,previousBalance + _amount)
min = mid
is an Assignment Operation (Slither line:3216)
Transfer(_from,_to,_amount)
max = mid - 1
is an Assignment Operation (Slither line:3216)
require(bool,string)(_allowances[_from][msg.sender] >= _amount,Allowance is wrong)
checkpoints[min].value
_doTransfer(_from,_to,_amount)
(balanceOf(_user) >= _amount)
_allowances[_from][msg.sender] -= _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Checking function: approve(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
require(bool,string)(_spender != address(0),ERC20: approve to the zero address)
_allowances[msg.sender][_spender] = _amount
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)
Approval(msg.sender,_spender,_amount)
require(bool,string)(msg.sender != address(0),ERC20: approve from the zero address)
true
Checking function: allowance(address,address) returns(uint256) (Slither line:3127)
Visibility: public
_allowances[_user][_spender]
Checking function: _doTransfer(address,address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _doMint(address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: _doBurn(address,uint256) returns() (Slither line:3127)
Visibility: internal
Checking function: balanceOf(address) returns(uint256) (Slither line:3127)
Visibility: public
0
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
min = mid
is an Assignment Operation (Slither line:3216)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
Checking function: balanceOfAt(address,uint256) returns(uint256) (Slither line:3127)
Visibility: public
0
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
min = mid
is an Assignment Operation (Slither line:3216)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
Checking function: allowedToTrade(address,uint256) returns(bool) (Slither line:3127)
Visibility: public
false
0
true
checkpoints[mid].value
checkpoints[checkpoints.length - 1].value
balanceOfAt(_user,block.number)
min = mid
is an Assignment Operation (Slither line:3216)
max = mid - 1
is an Assignment Operation (Slither line:3216)
checkpoints[min].value
(balanceOf(_user) >= _amount)
Checking function: updateBalanceAtNow(address,uint256) returns() (Slither line:3127)
Visibility: public
checkpoints.push(TellorStorage.Checkpoint(uint128(block.number),uint128(_value)))
oldCheckPoint.value = uint128(_value)
is an Assignment Operation (Slither line:3216)
Left side is a MemberAccess (Slither line:3219)

End Tellor.find_setter_in_contract (Slither line:3345)


Could not find implementation setter in Tellor (Slither line:1269)
Looking for getter (Slither line:1273)


Begin Tellor.find_getter_in_contract (Slither line:2974)

implementation is a Variable object
Checking function: beginDispute (Slither line:2988)
Checking function: vote (Slither line:2988)
Checking function: unlockDisputeFee (Slither line:2988)
Checking function: transfer (Slither line:2988)
transfer returns bool variable called success (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: transferFrom (Slither line:2988)
transferFrom returns bool variable called success (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: approve (Slither line:2988)
approve returns bool variable  (Slither line:3008)
RETURN node expression: true (Slither line:3028)
Checking function: allowance (Slither line:2988)
allowance returns uint256 variable  (Slither line:3008)
RETURN node expression: _allowances[_user][_spender] (Slither line:3028)
Checking function: _doTransfer (Slither line:2988)
Checking function: _doMint (Slither line:2988)
Checking function: _doBurn (Slither line:2988)
Checking function: balanceOf (Slither line:2988)
balanceOf returns uint256 variable  (Slither line:3008)
RETURN node expression: balanceOfAt(_user,block.number) (Slither line:3028)
Checking function: balanceOfAt (Slither line:2988)
balanceOfAt returns uint256 variable  (Slither line:3008)
RETURN node expression: 0 (Slither line:3028)
RETURN node expression: checkpoints[mid].value (Slither line:3028)
RETURN node expression: checkpoints[checkpoints.length - 1].value (Slither line:3028)
RETURN node expression: checkpoints[min].value (Slither line:3028)
Checking function: allowedToTrade (Slither line:2988)
allowedToTrade returns bool variable  (Slither line:3008)
RETURN node expression: false (Slither line:3028)
RETURN node expression: true (Slither line:3028)
RETURN node expression: (balanceOf(_user) >= _amount) (Slither line:3028)
Checking function: updateBalanceAtNow (Slither line:2988)
Checking function: changeExtension (Slither line:2988)
Checking function: changeMigrator (Slither line:2988)
Checking function: _migrate (Slither line:2988)
Checking function: migrateFrom (Slither line:2988)
Checking function: migrateFromBatch (Slither line:2988)
Checking function: _migrateFrom (Slither line:2988)
Checking function: migrateFor (Slither line:2988)
Checking function: migrateForBatch (Slither line:2988)
Checking function: _migrateFor (Slither line:2988)
Checking function: migrate (Slither line:2988)
Checking function: submitMiningSolution (Slither line:2988)
Checking function: _submitMiningSolution (Slither line:2988)
Checking function: _verifyNonce (Slither line:2988)
Checking function: _adjustDifficulty (Slither line:2988)
Checking function: _payReward (Slither line:2988)
Checking function: _newBlock (Slither line:2988)
Checking function: addTip (Slither line:2988)
Checking function: updateOnDeck (Slither line:2988)
Checking function: _getMin (Slither line:2988)
_getMin returns uint256 variable called min (Slither line:3008)
_getMin returns uint256 variable called minIndex (Slither line:3008)
Checking function: _getMax5 (Slither line:2988)
_getMax5 returns uint256[5] variable called max (Slither line:3008)
_getMax5 returns uint256[5] variable called maxIndex (Slither line:3008)
Checking function: _getTopRequestIDs (Slither line:2988)
_getTopRequestIDs returns uint256[5] variable called _requestIds (Slither line:3008)
Checking function: _delegate (Slither line:2988)
_delegate returns bool variable called succ (Slither line:3008)
_delegate returns bytes variable called ret (Slither line:3008)
Checking function: fallback (Slither line:2988)
Checking function: slitherConstructorConstantVariables (Slither line:2988)

End Tellor.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in Tellor (Slither line:1305)
Checking node of type EXPRESSION (Slither line:1395)
return(uint256,uint256)(0,returndatasize()())
Checking node of type NEW VARIABLE (Slither line:1395)
addr
addr = addresses[_EXTENSION]
Checking node of type IF (Slither line:1395)
Checking node of type EXPRESSION (Slither line:1395)
switch_expr_91891_248_0_fallback_asm_0 = result
Checking node of type INLINE ASM (Slither line:1395)
Checking node of type END_IF (Slither line:1395)
Checking node of type ENTRY_POINT (Slither line:1395)
Checking node of type EXPRESSION (Slither line:1395)
(result) = _delegate(addr)
Checking node of type NEW VARIABLE (Slither line:1395)
switch_expr_91891_248_0_fallback_asm_0
None
Checking node of type EXPRESSION (Slither line:1395)
returndatacopy(uint256,uint256,uint256)(0,0,returndatasize()())
Checking node of type EXPRESSION (Slither line:1395)
(succ,ret) = implementation.delegatecall(msg.data)
Checking node of type EXPRESSION (Slither line:1395)
revert(uint256,uint256)(0,returndatasize()())
Checking node of type ENTRY_POINT (Slither line:1395)
Checking node of type NEW VARIABLE (Slither line:1395)
result
None

End Tellor.is_upgradeable_proxy (Slither line:1407)

