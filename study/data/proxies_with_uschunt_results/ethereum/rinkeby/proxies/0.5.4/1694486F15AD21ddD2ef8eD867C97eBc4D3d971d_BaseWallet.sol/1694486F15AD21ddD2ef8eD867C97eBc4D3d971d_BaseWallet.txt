
Begin Module.is_proxy (Slither line:1425)


End Module.is_proxy (Slither line:1428)


Begin Module.is_upgradeable_proxy (Slither line:1136)

Checking contract: Module 

End Module.is_upgradeable_proxy (Slither line:1407)


Begin BaseWallet.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BaseWallet.find_delegatecall_in_exp_node

Found Expression Node: Received(msg.value,msg.sender,msg.data) (Slither line:2792)
Expression called: Received
Type of call: tuple() (Slither line:2807)
Args:
msg.value
msg.sender
msg.data

End BaseWallet.find_delegatecall_in_exp_node (Slither line:2848)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

ENTRY_POINT (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin BaseWallet.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(authorised[module],BW: must be an authorised module for static call) (Slither line:2792)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2807)
Args:
authorised[module]
BW: must be an authorised module for static call

End BaseWallet.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin BaseWallet.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    calldatacopy(0, 0, calldatasize()) (Slither line:1576)
    let result := staticcall(gas(), module, 0, calldatasize(), 0, 0) (Slither line:1576)
    returndatacopy(0, 0, returndatasize()) (Slither line:1576)
    switch result (Slither line:1576)
    case 0 { (Slither line:1576)
        revert(0, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
    default { (Slither line:1576)
        return(0, returndatasize()) (Slither line:1576)
    } (Slither line:1576)
} (Slither line:1576)

End BaseWallet.find_delegatecall_in_asm (Slither line:1637)


Begin BaseWallet.find_delegatecall_in_asm (Slither line:1541)

{ (Slither line:1576)
    calldatacopy(0, 0, calldatasize()) (Slither line:1576)
    let result := staticcall(gas(), module, 0, calldatasize(), 0, 0) (Slither line:1576)

Found call in inline asm (Slither line:1622)
Destination param is called 'module'
Looking for corresponding Variable
Current function: fallback

Begin BaseWallet.find_delegate_variable_from_name
Searching for module (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking implementation (Slither line:1689)
Checking owner (Slither line:1689)
Checking authorised (Slither line:1689)
Checking enabled (Slither line:1689)
Checking modules (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking module (Slither line:1703)
module is a Local Variable in BaseWallet.fallback (Slither line:1707)
Expression: enabled[msg.sig] (Slither line:1719)
enabled is a State Variable in contract BaseWallet (Slither line:1749)

End BaseWallet.find_delegate_variable_by_name


End BaseWallet.find_delegatecall_in_asm (Slither line:1637)


End BaseWallet.is_proxy (Slither line:1476)


Begin BaseWallet.is_upgradeable_proxy (Slither line:1136)

Checking contract: BaseWallet 
BaseWallet is delegating to enabled
Looking for setter (Slither line:1200)


Begin BaseWallet.find_setter_in_contract (Slither line:3109)

Checking function: init(address,address[]) returns() (Slither line:3117)
Checking function: authoriseModule(address,bool) returns() (Slither line:3117)
Visibility: external
require(bool,string)(modules > 0,BW: wallet must have at least one module)
require(bool,string)(authorised[msg.sender],BW: msg.sender not an authorized module)
Module(_module).init(this)
modules -= 1
is an Assignment Operation (Slither line:3206)
delete authorised[_module]
AuthorisedModule(_module,_value)
moduleOnly()
modules += 1
is an Assignment Operation (Slither line:3206)
authorised[_module] = true
is an Assignment Operation (Slither line:3206)
Left side is an IndexAccess (Slither line:3235)
Checking function: enableStaticCall(address,bytes4) returns() (Slither line:3117)
Visibility: external
require(bool,string)(authorised[msg.sender],BW: msg.sender not an authorized module)
moduleOnly()
require(bool,string)(authorised[_module],BW: must be an authorised module for static call)
enabled[_method] = _module
is an Assignment Operation (Slither line:3206)
Left side is an IndexAccess (Slither line:3235)

End BaseWallet.find_setter_in_contract (Slither line:3315)


Implementation set by function: enableStaticCall in contract: BaseWallet (Slither line:1264)
Looking for getter (Slither line:1273)


Begin BaseWallet.find_getter_in_contract (Slither line:2964)

enabled is a Variable object
_module
Checking function: init (Slither line:2978)
Checking function: authoriseModule (Slither line:2978)
Checking function: enableStaticCall (Slither line:2978)
Checking function: setOwner (Slither line:2978)
Checking function: invoke (Slither line:2978)
invoke returns bytes variable called _result (Slither line:2998)
Checking function: fallback (Slither line:2978)

End BaseWallet.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in BaseWallet (Slither line:1305)

Begin Module.find_getter_in_contract (Slither line:2964)

enabled is a Variable object
_module

End Module.find_getter_in_contract (Slither line:3073)

Checking external function init
Checking external function authoriseModule
Checking external function enableStaticCall
Checking external function setOwner
Checking external function invoke
Checking external function fallback
functions_writing_to_variable: enabled
functions_writing_to_variable: checking function BaseWallet.init (proxy_features line:893)
functions_writing_to_variable: checking function BaseWallet.enableStaticCall (proxy_features line:893)
functions_writing_to_variable: exp = require(bool,string)(authorised[_module],BW: must be an authorised module for static call) (proxy_features line:904)
functions_writing_to_variable: exp = enabled[_method] = _module (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: enabled[_method] = _module (proxy_features line:907)
functions_writing_to_variable: IndexAccess: enabled[_method] (proxy_features line:915)
functions_writing_to_variable: Identifier: enabled (proxy_features line:919)
get_value_assigned: enabled[_method] = _module
functions_writing_to_variable: exp = EnabledStaticCall(_module,_method) (proxy_features line:904)
functions_writing_to_variable: exp = moduleOnly() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool,string)(authorised[msg.sender],BW: msg.sender not an authorized module) (proxy_features line:904)
functions_writing_to_variable: enableStaticCall writes _module to enabled (proxy_features line:924)
functions_writing_to_variable: checking function BaseWallet.fallback (proxy_features line:893)
functions_writing_to_variable: checking function BaseWallet.invoke (proxy_features line:893)
functions_writing_to_variable: checking function BaseWallet.setOwner (proxy_features line:893)
functions_writing_to_variable: checking function BaseWallet.authoriseModule (proxy_features line:893)
has_compatibility_checks: dependencies: ['_module']
has_compatibility_checks: checking external function enableStaticCall
require(bool,string)(authorised[msg.sender],BW: msg.sender not an authorized module)
has_compatibility_checks: condition authorised[msg.sender]
require(bool,string)(authorised[_module],BW: must be an authorised module for static call)
has_compatibility_checks: condition authorised[_module]
check_condition_from_expression: modifier calls: ['moduleOnly()']
Found external function: init
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(authorised[msg.sender],BW: msg.sender not an authorized module)
has_time_delay: (node.type) EXPRESSION
(Expression) moduleOnly()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(authorised[_module],BW: must be an authorised module for static call)
has_time_delay: (node.type) EXPRESSION
(Expression) enabled[_method] = _module
has_time_delay: (node.type) EXPRESSION
(Expression) EnabledStaticCall(_module,_method)
