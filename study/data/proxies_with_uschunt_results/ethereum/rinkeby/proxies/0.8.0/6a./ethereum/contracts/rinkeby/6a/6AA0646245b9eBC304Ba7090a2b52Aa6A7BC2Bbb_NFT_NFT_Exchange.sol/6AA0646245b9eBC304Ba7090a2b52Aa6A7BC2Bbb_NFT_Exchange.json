{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "Proxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.0/6a./ethereum/contracts/rinkeby/6a/6AA0646245b9eBC304Ba7090a2b52Aa6A7BC2Bbb_NFT_NFT_Exchange.sol/6AA0646245b9eBC304Ba7090a2b52Aa6A7BC2Bbb_NFT_Exchange.sol#1300-1334)",
        "elements": [],
        "description": "Proxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.0/6a./ethereum/contracts/rinkeby/6a/6AA0646245b9eBC304Ba7090a2b52Aa6A7BC2Bbb_NFT_NFT_Exchange.sol/6AA0646245b9eBC304Ba7090a2b52Aa6A7BC2Bbb_NFT_Exchange.sol#1300-1334) is an upgradeable proxy.\n_implementation was found in a different contract.\n_implementation is an address state variable.\n uses Inherited Storage\nFound compatibility checks in all upgrade functions.\nTo remove upgradeability, delete upgradeTo from OwnedUpgradeabilityProxy\n",
        "id": "734ed39e3e23f1beef2b30121eb90361caf7322eafb3978c17debe9715c3e8cd",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "OwnedUpgradeabilityStorage._implementation",
          "impl_address_setter": "OwnedUpgradeabilityProxy.upgradeTo(address)",
          "impl_address_getter": "OwnedUpgradeabilityStorage.implementation()",
          "impl_address_location": "OwnedUpgradeabilityStorage (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.0/6a./ethereum/contracts/rinkeby/6a/6AA0646245b9eBC304Ba7090a2b52Aa6A7BC2Bbb_NFT_NFT_Exchange.sol/6AA0646245b9eBC304Ba7090a2b52Aa6A7BC2Bbb_NFT_Exchange.sol#1155-1193)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "inherited_storage": true,
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": true,
            "functions": {
              "OwnedUpgradeabilityProxy.upgradeToAndCall(address,bytes)": {
                "check": "require(bool)(_implementation != implementation)",
                "is_correct": true
              },
              "OwnedUpgradeabilityProxy.upgradeTo(address)": {
                "check": "require(bool)(_implementation != implementation)",
                "is_correct": true
              }
            }
          },
          "can_remove_upgradeability": true,
          "how_to_remove_upgradeability": "remove upgradeTo from OwnedUpgradeabilityProxy",
          "immutable_functions": {
            "other": [
              "upgradeabilityOwner()",
              "implementation()",
              "proxyType()"
            ]
          }
        }
      }
    ]
  }
}