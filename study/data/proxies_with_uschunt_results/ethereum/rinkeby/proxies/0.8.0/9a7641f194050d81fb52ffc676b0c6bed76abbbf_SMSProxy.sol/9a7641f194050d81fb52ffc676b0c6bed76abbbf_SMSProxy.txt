
Begin SMSProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Begin SMSProxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(0,returndatasize()()) (Slither line:2792)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2807)
Args:
0
returndatasize()()

End SMSProxy.find_delegatecall_in_exp_node (Slither line:2848)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)


Found Assembly Node (Slither line:1447)


Begin SMSProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'implementation'
Looking for corresponding Variable
Current function: fallback

Begin SMSProxy.find_delegate_variable_from_name
Searching for implementation (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking implementationPosition (Slither line:1689)
Checking proxyOwnerPosition (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking implementation (Slither line:1703)
implementation is a Local Variable in SMSProxy.fallback (Slither line:1707)
Expression: implementation() (Slither line:1719)

Begin SMSProxy.find_delegate_from_call_exp

implementation() (Slither line:1993)
called = implementation (Slither line:2000)
AssignmentOperation: impl = sload(uint256)(position) (Slither line:2107)
CallExpression: sload(uint256) (Slither line:2113)
Found storage slot: implementationPosition (Slither line:2130)
implementation returns a variable of type address   called impl (Slither line:2183)
implementation contains assembly - looking for sload (Slither line:2189)

End SMSProxy.find_delegate_from_call_exp (Slither line:2318)

Call Expression
End SMSProxy.find_delegate_variable_by_name (Slither line:1739)


End SMSProxy.find_delegatecall_in_asm (Slither line:1637)

Setting SMSProxy._delegate_variable = SMSProxy._proxy_impl_slot: implementationPosition (Slither line:1473)


End SMSProxy.is_proxy (Slither line:1476)


Begin SMSProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: SMSProxy 
Call destination implementationPosition is constant (Slither line:1146)

implementationPosition is the implementation storage slot (Slither line:1149)

SMSProxy is delegating to implementationPosition
Looking for setter (Slither line:1200)


Begin SMSProxy.find_setter_in_contract (Slither line:3109)

Expression: keccak256(bytes)(xyz.secretmoneysociety.implementation.address) (Slither line:3112)
Checking function: constructor() returns() (Slither line:3117)
Checking function: transferProxyOwnership(address) returns() (Slither line:3117)
Visibility: public
require(bool)(msg.sender == proxyOwner())
_setUpgradeabilityOwner(_newOwner)
sstore(uint256,uint256)(position,_newProxyOwner)
sstore(uint256,uint256)
require(bool)(_newOwner != address(0))
owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3206)
keccak256(bytes)(xyz.secretmoneysociety.implementation.address)
onlyProxyOwner()
Checking function: upgradeTo(address) returns() (Slither line:3117)
Visibility: public
owner = sload(uint256)(position)
is an Assignment Operation (Slither line:3206)
keccak256(bytes)(xyz.secretmoneysociety.implementation.address)
impl = sload(uint256)(position)
is an Assignment Operation (Slither line:3206)
keccak256(bytes)(xyz.secretmoneysociety.implementation.address)
_upgradeTo(_implementation)
onlyProxyOwner()
require(bool)(msg.sender == proxyOwner())
require(bool)(currentImplementation != _newImplementation)
_setImplementation(_newImplementation)
sstore(uint256,uint256)(position,_newImplementation)
sstore(uint256,uint256)

End SMSProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: upgradeTo in contract: SMSProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin SMSProxy.find_getter_in_contract (Slither line:2964)

implementationPosition is a Variable object
keccak256(bytes)(xyz.secretmoneysociety.implementation.address)
Checking function: constructor (Slither line:2978)
Checking function: transferProxyOwnership (Slither line:2978)
Checking function: upgradeTo (Slither line:2978)
Checking function: implementation (Slither line:2978)
implementation returns address variable called impl (Slither line:2998)
implementation contains assembly (Slither line:3041)

End SMSProxy.find_getter_in_contract (Slither line:3073)


Implementation retrieved by function: implementation in contract: SMSProxy (Slither line:1285)

End SMSProxy.is_upgradeable_proxy (Slither line:1293)

detect_storage_slot: SMSProxy
Setter found in contract SMSProxy
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function transferProxyOwnership
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function upgradeTo
Found 'msg.sender ==' in expression: require(bool)(msg.sender == proxyOwner())
Checking public function implementation
Checking public function proxyOwner
Checking external function fallback
functions_writing_to_variable: implementationPosition
functions_writing_to_variable: checking function SMSProxy.proxyOwner (proxy_features line:893)
functions_writing_to_variable: checking function SMSProxy.upgradeTo (proxy_features line:893)
get_value_assigned: sstore(uint256,uint256)(position,_newImplementation)
functions_writing_to_variable: upgradeTo writes _newImplementation to implementationPosition using sstore (proxy_features line:993)
functions_writing_to_variable: checking function SMSProxy._setUpgradeabilityOwner (proxy_features line:893)
functions_writing_to_variable: checking function SMSProxy.implementation (proxy_features line:893)
functions_writing_to_variable: checking function SMSProxy._setImplementation (proxy_features line:893)
get_value_assigned: sstore(uint256,uint256)(position,_newImplementation)
functions_writing_to_variable: _setImplementation writes _newImplementation to implementationPosition using sstore (proxy_features line:993)
functions_writing_to_variable: checking function SMSProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function SMSProxy.transferProxyOwnership (proxy_features line:893)
functions_writing_to_variable: checking function SMSProxy._upgradeTo (proxy_features line:893)
get_value_assigned: sstore(uint256,uint256)(position,_newImplementation)
functions_writing_to_variable: _upgradeTo writes _newImplementation to implementationPosition using sstore (proxy_features line:993)
functions_writing_to_variable: checking function SMSProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function SMSProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: exp = implementationPosition = keccak256(bytes)(xyz.secretmoneysociety.implementation.address) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: implementationPosition = keccak256(bytes)(xyz.secretmoneysociety.implementation.address) (proxy_features line:907)
functions_writing_to_variable: Identifier: implementationPosition (proxy_features line:919)
get_value_assigned: implementationPosition = keccak256(bytes)(xyz.secretmoneysociety.implementation.address)
functions_writing_to_variable: exp = proxyOwnerPosition = keccak256(bytes)(xyz.secretmoneysociety.proxy.owner) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: proxyOwnerPosition = keccak256(bytes)(xyz.secretmoneysociety.proxy.owner) (proxy_features line:907)
has_compatibility_checks: dependencies: []
has_compatibility_checks: checking public function upgradeTo
require(bool)(msg.sender == proxyOwner())
has_compatibility_checks: condition msg.sender == proxyOwner()
require(bool)(currentImplementation != _newImplementation)
has_compatibility_checks: condition currentImplementation != _newImplementation
check_condition_from_expression: modifier calls: ['onlyProxyOwner()']
check_condition_from_expression: condition implementation() != _newImplementation
has_compatibility_checks: skipping internal function _setImplementation
has_compatibility_checks: skipping internal function _upgradeTo
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: implementation = implementation()
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),implementation,0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: calldatacopy(uint256,uint256,uint256)(0,0,calldatasize()())
Found public function: constructor
Found public function: transferProxyOwnership
has_time_delay: (node.type) EXPRESSION
(Expression) owner = sload(uint256)(position)
has_time_delay: (node.type) EXPRESSION
(Expression) impl = sload(uint256)(position)
has_time_delay: (node.type) EXPRESSION
(Expression) _upgradeTo(_implementation)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyProxyOwner()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(msg.sender == proxyOwner())
has_time_delay: (node.type) NEW VARIABLE
(Expression) currentImplementation = implementation()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(currentImplementation != _newImplementation)
has_time_delay: (node.type) EXPRESSION
(Expression) _setImplementation(_newImplementation)
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = implementationPosition
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = proxyOwnerPosition
has_time_delay: (node.type) NEW VARIABLE
(Expression) position = implementationPosition
has_time_delay: (node.type) EXPRESSION
(Expression) sstore(uint256,uint256)(position,_newImplementation)
