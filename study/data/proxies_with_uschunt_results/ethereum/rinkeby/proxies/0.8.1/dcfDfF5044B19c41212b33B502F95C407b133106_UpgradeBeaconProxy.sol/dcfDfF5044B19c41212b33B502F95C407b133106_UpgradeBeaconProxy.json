{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "UpgradeBeaconProxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.1/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol#245-377)",
        "elements": [],
        "description": "UpgradeBeaconProxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.1/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol#245-377) may be an upgradeable proxy.\n_implementation is declared in the proxy.\nUpgradeBeaconProxy._getImplementation(address)._implementation (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.1/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol#368) gets value from a cross-contract call: _upgradeBeacon.staticcall()\nMissing compatibility check in UpgradeBeaconProxy.receive()\nMissing compatibility check in UpgradeBeaconProxy.fallback()\nMissing compatibility check in UpgradeBeaconProxy.constructor(address,bytes)\nFound compatibility check in UpgradeBeaconProxy.constructor(address,bytes)\n",
        "id": "2bd33564045f915cf6c173bb91277fcb4e08d50da56eabf4973588fab4ca8a8d",
        "features": {
          "upgradeable": "maybe",
          "impl_address_variable": "UpgradeBeaconProxy._getImplementation(address)._implementation",
          "impl_address_setter": "not found",
          "impl_address_getter": "UpgradeBeaconProxy._getImplementation(address)",
          "impl_address_location": "UpgradeBeaconProxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.8.1/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol/dcfDfF5044B19c41212b33B502F95C407b133106_UpgradeBeaconProxy.sol#245-377)",
          "impl_address_scope": "LocalVariable",
          "impl_address_type": "address",
          "impl_address_from_contract_call": "_upgradeBeacon.staticcall()",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "UpgradeBeaconProxy.receive()": "missing",
              "UpgradeBeaconProxy.fallback()": "missing",
              "UpgradeBeaconProxy.constructor(address,bytes)": "require(bool,string)(account.code.length > 0,beacon !contract)"
            }
          },
          "can_remove_upgradeability": false
        }
      }
    ]
  }
}