{
  "success": true,
  "error": null,
  "results": {
    "detectors": [
      {
        "contract": "TokenUnlockProxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.5.16/4112e0fe32d971b25c7401ec5f5a94935260889c_TokenUnlockProxy.sol/4112e0fe32d971b25c7401ec5f5a94935260889c_TokenUnlockProxy.sol#375-412)",
        "elements": [],
        "description": "TokenUnlockProxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.5.16/4112e0fe32d971b25c7401ec5f5a94935260889c_TokenUnlockProxy.sol/4112e0fe32d971b25c7401ec5f5a94935260889c_TokenUnlockProxy.sol#375-412) is an upgradeable proxy.\nlogic_contract is declared in the proxy.\nlogic_contract is an address state variable\nMissing compatibility check in TokenUnlockProxy.constructor(address,address,address)\nMissing compatibility check in TokenUnlockProxy.setLogicContract(address)\n",
        "id": "9d359f1bdb1cf9900c2213fa05ba5a3bbdbd7a649cc13efbf0503011647468b5",
        "features": {
          "upgradeable": true,
          "impl_address_variable": "TokenUnlockProxy.logic_contract",
          "impl_address_setter": "TokenUnlockProxy.setLogicContract(address)",
          "impl_address_getter": "not found",
          "impl_address_location": "TokenUnlockProxy (../../smart-contract-sanctuary/ethereum/contracts/rinkeby/sorted/0.5.16/4112e0fe32d971b25c7401ec5f5a94935260889c_TokenUnlockProxy.sol/4112e0fe32d971b25c7401ec5f5a94935260889c_TokenUnlockProxy.sol#375-412)",
          "impl_address_scope": "StateVariable",
          "impl_address_type": "address",
          "master_copy_coupling": "missing implementation source",
          "transparent": false,
          "external_functions_require_specific_sender": false,
          "fallback_receive_not_callable_by_specific_sender": false,
          "compatibility_checks": {
            "has_all_checks": false,
            "functions": {
              "TokenUnlockProxy.constructor(address,address,address)": "missing",
              "TokenUnlockProxy.setLogicContract(address)": "missing"
            }
          },
          "can_remove_upgradeability": false,
          "immutable_functions": {
            "other": [
              "setHalt(bool)",
              "owner()",
              "isOwner()",
              "renounceOwnership()",
              "transferOwnership(address)",
              "setOperator(uint256,address)",
              "getOperator(uint256)",
              "getMultiSignatureAddress()",
              "setLogicContract(address)"
            ]
          }
        }
      }
    ]
  }
}