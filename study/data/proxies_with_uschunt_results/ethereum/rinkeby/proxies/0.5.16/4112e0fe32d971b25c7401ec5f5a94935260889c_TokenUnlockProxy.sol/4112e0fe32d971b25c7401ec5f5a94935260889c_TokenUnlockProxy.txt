
Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin Halt.is_proxy (Slither line:1425)


End Halt.is_proxy (Slither line:1428)


Begin Halt.is_upgradeable_proxy (Slither line:1136)

Checking contract: Halt 

End Halt.is_upgradeable_proxy (Slither line:1407)


Begin whiteListUint32.is_proxy (Slither line:1425)


End whiteListUint32.is_proxy (Slither line:1428)


Begin whiteListUint32.is_upgradeable_proxy (Slither line:1136)

Checking contract: whiteListUint32 

End whiteListUint32.is_upgradeable_proxy (Slither line:1407)


Begin whiteListUint256.is_proxy (Slither line:1425)


End whiteListUint256.is_proxy (Slither line:1428)


Begin whiteListUint256.is_upgradeable_proxy (Slither line:1136)

Checking contract: whiteListUint256 

End whiteListUint256.is_upgradeable_proxy (Slither line:1407)


Begin whiteListAddress.is_proxy (Slither line:1425)


End whiteListAddress.is_proxy (Slither line:1428)


Begin whiteListAddress.is_upgradeable_proxy (Slither line:1136)

Checking contract: whiteListAddress 

End whiteListAddress.is_upgradeable_proxy (Slither line:1407)


Begin Operator.is_proxy (Slither line:1425)


End Operator.is_proxy (Slither line:1428)


Begin Operator.is_upgradeable_proxy (Slither line:1136)

Checking contract: Operator 

End Operator.is_upgradeable_proxy (Slither line:1407)


Begin IMultiSignature.is_proxy (Slither line:1425)


End IMultiSignature.is_proxy (Slither line:1428)


Begin IMultiSignature.is_upgradeable_proxy (Slither line:1136)

Checking contract: IMultiSignature 

End IMultiSignature.is_upgradeable_proxy (Slither line:1407)


Begin multiSignatureClient.is_proxy (Slither line:1425)


End multiSignatureClient.is_proxy (Slither line:1428)


Begin multiSignatureClient.is_upgradeable_proxy (Slither line:1136)

Checking contract: multiSignatureClient 

End multiSignatureClient.is_upgradeable_proxy (Slither line:1407)


Begin TokenUnlockData.is_proxy (Slither line:1425)


End TokenUnlockData.is_proxy (Slither line:1428)


Begin TokenUnlockData.is_upgradeable_proxy (Slither line:1136)

Checking contract: TokenUnlockData 

End TokenUnlockData.is_upgradeable_proxy (Slither line:1407)


Begin TokenUnlockProxy.is_proxy (Slither line:1425)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


End Contract.find_delegatecall_in_ir (Slither line:2763)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2727)


Found LowLevelCall (Slither line:2730)


Found delegatecall in LowLevelCall (Slither line:2732)


End Contract.find_delegatecall_in_ir (Slither line:2763)


End TokenUnlockProxy.is_proxy (Slither line:1476)


Begin TokenUnlockProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: TokenUnlockProxy 
TokenUnlockProxy is delegating to logic_contract
Looking for setter (Slither line:1200)


Begin TokenUnlockProxy.find_setter_in_contract (Slither line:3109)

Checking function: constructor(address,address,address) returns() (Slither line:3117)
Checking function: setLogicContract(address) returns(bool) (Slither line:3117)
Visibility: public
checkMultiSignature()
logic_contract = _logicAddress
is an Assignment Operation (Slither line:3206)

End TokenUnlockProxy.find_setter_in_contract (Slither line:3315)


Implementation set by function: setLogicContract in contract: TokenUnlockProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin TokenUnlockProxy.find_getter_in_contract (Slither line:2964)

logic_contract is a Variable object
_logicAddress
Checking function: setHalt (Slither line:2978)
Checking function: constructor (Slither line:2978)
Checking function: owner (Slither line:2978)
owner returns address variable  (Slither line:2998)
RETURN node expression: _owner (Slither line:3018)
Checking function: isOwner (Slither line:2978)
isOwner returns bool variable  (Slither line:2998)
RETURN node expression: msg.sender == _owner (Slither line:3018)
Checking function: renounceOwnership (Slither line:2978)
Checking function: transferOwnership (Slither line:2978)
Checking function: _transferOwnership (Slither line:2978)
Checking function: setOperator (Slither line:2978)
Checking function: getOperator (Slither line:2978)
getOperator returns address variable  (Slither line:2998)
RETURN node expression: _operators[index] (Slither line:3018)
Checking function: constructor (Slither line:2978)
Checking function: getMultiSignatureAddress (Slither line:2978)
getMultiSignatureAddress returns address variable  (Slither line:2998)
RETURN node expression: address(getValue(multiSignaturePositon)) (Slither line:3018)
Checking function: checkMultiSignature (Slither line:2978)
Checking function: saveValue (Slither line:2978)
Checking function: getValue (Slither line:2978)
getValue returns uint256 variable called value (Slither line:2998)
Checking function: constructor (Slither line:2978)
Checking function: setLogicContract (Slither line:2978)
setLogicContract returns bool variable called success (Slither line:2998)
Checking function: fallback (Slither line:2978)
Checking function: slitherConstructorVariables (Slither line:2978)
Checking function: slitherConstructorConstantVariables (Slither line:2978)

End TokenUnlockProxy.find_getter_in_contract (Slither line:3073)

Could not find implementation getter in TokenUnlockProxy (Slither line:1305)

Begin Ownable.find_getter_in_contract (Slither line:2964)

logic_contract is a Variable object
_logicAddress
Checking function: constructor (Slither line:2978)
Checking function: owner (Slither line:2978)
owner returns address variable  (Slither line:2998)
RETURN node expression: _owner (Slither line:3018)
Checking function: isOwner (Slither line:2978)
isOwner returns bool variable  (Slither line:2998)
RETURN node expression: msg.sender == _owner (Slither line:3018)
Checking function: renounceOwnership (Slither line:2978)
Checking function: transferOwnership (Slither line:2978)
Checking function: _transferOwnership (Slither line:2978)

End Ownable.find_getter_in_contract (Slither line:3073)

Checking public function setHalt
Found 'msg.sender ==' in expression: msg.sender == _owner
Checking public function setHalt
Found 'msg.sender ==' in expression: msg.sender == _owner
Checking public function owner
Checking public function isOwner
Found 'msg.sender ==' in expression: msg.sender == _owner
Checking public function renounceOwnership
Found 'msg.sender ==' in expression: msg.sender == _owner
Checking public function transferOwnership
Found 'msg.sender ==' in expression: msg.sender == _owner
Checking public function setOperator
Found 'msg.sender ==' in expression: msg.sender == _owner
Checking public function getOperator
Checking public function getMultiSignatureAddress
Checking public function setLogicContract
Checking external function fallback
functions_writing_to_variable: logic_contract
functions_writing_to_variable: checking function TokenUnlockProxy.owner (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.setOperator (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.constructor (proxy_features line:893)
functions_writing_to_variable: exp = phxAddress = _phxAddress (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: phxAddress = _phxAddress (proxy_features line:907)
functions_writing_to_variable: exp = logic_contract = _logicAddress (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: logic_contract = _logicAddress (proxy_features line:907)
functions_writing_to_variable: Identifier: logic_contract (proxy_features line:919)
get_value_assigned: logic_contract = _logicAddress
functions_writing_to_variable: exp = multiSignatureClient(_multiSignature) (proxy_features line:904)
functions_writing_to_variable: constructor writes _logicAddress to logic_contract (proxy_features line:924)
functions_writing_to_variable: checking function TokenUnlockProxy.isOwner (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.checkMultiSignature (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.getOperator (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.setLogicContract (proxy_features line:893)
functions_writing_to_variable: exp = logic_contract = _logicAddress (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: logic_contract = _logicAddress (proxy_features line:907)
functions_writing_to_variable: Identifier: logic_contract (proxy_features line:919)
get_value_assigned: logic_contract = _logicAddress
functions_writing_to_variable: exp = require(bool)(true) (proxy_features line:904)
functions_writing_to_variable: exp = onlyOperator(1) (proxy_features line:904)
functions_writing_to_variable: exp = validCall() (proxy_features line:904)
functions_writing_to_variable: exp = require(bool,string)(_operators[index] == msg.sender,Operator: caller is not the eligible Operator) (proxy_features line:904)
functions_writing_to_variable: exp = checkMultiSignature() (proxy_features line:904)
functions_writing_to_variable: exp = msgHash = keccak256(bytes)(abi.encodePacked(msg.sender,address(this),value,msg.data)) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: msgHash = keccak256(bytes)(abi.encodePacked(msg.sender,address(this),value,msg.data)) (proxy_features line:907)
functions_writing_to_variable: exp = multiSign = getMultiSignatureAddress() (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: multiSign = getMultiSignatureAddress() (proxy_features line:907)
functions_writing_to_variable: exp = index = getValue(msgHash) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: index = getValue(msgHash) (proxy_features line:907)
functions_writing_to_variable: exp = newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index) (proxy_features line:904)
functions_writing_to_variable: AssignmentOperation: newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index) (proxy_features line:907)
functions_writing_to_variable: exp = require(bool,string)(newIndex > 0,multiSignatureClient : This tx is not aprroved) (proxy_features line:904)
functions_writing_to_variable: exp = saveValue(msgHash,newIndex) (proxy_features line:904)
functions_writing_to_variable: exp = address(getValue(multiSignaturePositon)) (proxy_features line:904)
functions_writing_to_variable: setLogicContract writes _logicAddress to logic_contract (proxy_features line:924)
functions_writing_to_variable: checking function TokenUnlockProxy.renounceOwnership (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.saveValue (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.fallback (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.slitherConstructorVariables (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.slitherConstructorConstantVariables (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.getValue (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.setHalt (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.constructor (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy._transferOwnership (proxy_features line:893)
functions_writing_to_variable: checking function TokenUnlockProxy.getMultiSignatureAddress (proxy_features line:893)
has_compatibility_checks: dependencies: ['_logicAddress', '_logicAddress']
has_compatibility_checks: checking public function constructor
require(bool,string)(multiSignature != address(0),multiSignatureClient : Multiple signature contract address is zero!)
has_compatibility_checks: condition multiSignature != address(0)
has_compatibility_checks: checking public function setLogicContract
require(bool)(true)
has_compatibility_checks: condition true
require(bool,string)(newIndex > 0,multiSignatureClient : This tx is not aprroved)
has_compatibility_checks: condition newIndex > 0
require(bool,string)(_operators[index] == msg.sender,Operator: caller is not the eligible Operator)
has_compatibility_checks: condition _operators[index] == msg.sender
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: NEW VARIABLE
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: EXPRESSION
 dominator expression: (success) = logic_contract.delegatecall(msg.data)
can_toggle_delegatecall_on_off:
 dominator node type: ENTRY_POINT
 dominator expression: None
Found public function: setHalt
has_time_delay: (node.type) EXPRESSION
(Expression) checkMultiSignature()
has_time_delay: (node.type) NEW VARIABLE
(Expression) index = getValue(msgHash)
has_time_delay: (node.type) EXPRESSION
(Expression) logic_contract = _logicAddress
has_time_delay: (node.type) RETURN
(Expression) address(getValue(multiSignaturePositon))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool)(true)
has_time_delay: (node.type) NEW VARIABLE
(Expression) newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index)
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(newIndex > 0,multiSignatureClient : This tx is not aprroved)
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOperator(1)
has_time_delay: (node.type) EXPRESSION
(Expression) validCall()
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(_operators[index] == msg.sender,Operator: caller is not the eligible Operator)
has_time_delay: (node.type) EXPRESSION
(Expression) saveValue(msgHash,newIndex)
has_time_delay: (node.type) NEW VARIABLE
(Expression) msgHash = keccak256(bytes)(abi.encodePacked(msg.sender,address(this),value,msg.data))
has_time_delay: (node.type) NEW VARIABLE
(Expression) multiSign = getMultiSignatureAddress()
