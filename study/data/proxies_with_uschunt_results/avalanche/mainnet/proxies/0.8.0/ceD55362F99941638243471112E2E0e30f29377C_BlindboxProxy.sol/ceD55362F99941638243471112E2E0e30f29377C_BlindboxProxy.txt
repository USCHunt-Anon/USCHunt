
Begin IRand.is_proxy (Slither line:1425)


End IRand.is_proxy (Slither line:1428)


Begin IRand.is_upgradeable_proxy (Slither line:1136)

Checking contract: IRand 

End IRand.is_upgradeable_proxy (Slither line:1407)


Begin IERC1538.is_proxy (Slither line:1425)


End IERC1538.is_proxy (Slither line:1428)


Begin IERC1538.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC1538 

End IERC1538.is_upgradeable_proxy (Slither line:1407)


Begin LPInterface.is_proxy (Slither line:1425)


End LPInterface.is_proxy (Slither line:1428)


Begin LPInterface.is_upgradeable_proxy (Slither line:1136)

Checking contract: LPInterface 

End LPInterface.is_upgradeable_proxy (Slither line:1407)


Begin INFT.is_proxy (Slither line:1425)


End INFT.is_proxy (Slither line:1428)


Begin INFT.is_upgradeable_proxy (Slither line:1136)

Checking contract: INFT 

End INFT.is_upgradeable_proxy (Slither line:1407)


Begin IERC20.is_proxy (Slither line:1425)


End IERC20.is_proxy (Slither line:1428)


Begin IERC20.is_upgradeable_proxy (Slither line:1136)

Checking contract: IERC20 

End IERC20.is_upgradeable_proxy (Slither line:1407)


Begin IDEX.is_proxy (Slither line:1425)


End IDEX.is_proxy (Slither line:1428)


Begin IDEX.is_upgradeable_proxy (Slither line:1136)

Checking contract: IDEX 

End IDEX.is_upgradeable_proxy (Slither line:1407)


Begin SafeMath.is_proxy (Slither line:1425)


End SafeMath.is_proxy (Slither line:1428)


Begin SafeMath.is_upgradeable_proxy (Slither line:1136)

Checking contract: SafeMath 

End SafeMath.is_upgradeable_proxy (Slither line:1407)


Begin Counters.is_proxy (Slither line:1425)


End Counters.is_proxy (Slither line:1428)


Begin Counters.is_upgradeable_proxy (Slither line:1136)

Checking contract: Counters 

End Counters.is_upgradeable_proxy (Slither line:1407)


Begin Context.is_proxy (Slither line:1425)


End Context.is_proxy (Slither line:1428)


Begin Context.is_upgradeable_proxy (Slither line:1136)

Checking contract: Context 

End Context.is_upgradeable_proxy (Slither line:1407)


Begin Ownable.is_proxy (Slither line:1425)


End Ownable.is_proxy (Slither line:1428)


Begin Ownable.is_upgradeable_proxy (Slither line:1136)

Checking contract: Ownable 

End Ownable.is_upgradeable_proxy (Slither line:1407)


Begin ProxyBaseStorage.is_proxy (Slither line:1425)


End ProxyBaseStorage.is_proxy (Slither line:1428)


Begin ProxyBaseStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: ProxyBaseStorage 

End ProxyBaseStorage.is_upgradeable_proxy (Slither line:1407)


Begin BlindboxStorage.is_proxy (Slither line:1425)


End BlindboxStorage.is_proxy (Slither line:1428)


Begin BlindboxStorage.is_upgradeable_proxy (Slither line:1136)

Checking contract: BlindboxStorage 

End BlindboxStorage.is_upgradeable_proxy (Slither line:1407)


Begin BlindboxProxy.is_proxy (Slither line:1425)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin BlindboxProxy.find_delegatecall_in_exp_node

Found Expression Node: return(uint256,uint256)(ptr_fallback_asm_0,size_fallback_asm_0) (Slither line:2802)
Expression called: return(uint256,uint256)
Type of call:  (Slither line:2817)
Args:
ptr_fallback_asm_0
size_fallback_asm_0

End BlindboxProxy.find_delegatecall_in_exp_node (Slither line:2858)

IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin BlindboxProxy.find_delegatecall_in_exp_node

Found Expression Node: size_fallback_asm_0 = returndatasize()() (Slither line:2802)
Expression Type: = (Slither line:2805)
Checking right side of assignment expression... (Slither line:2813)
Expression called: returndatasize()
Type of call: uint256 (Slither line:2817)
Args:

End BlindboxProxy.find_delegatecall_in_exp_node (Slither line:2858)

END_IF (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

RETURN (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

NEW VARIABLE (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin BlindboxProxy.find_delegatecall_in_exp_node

Found Expression Node: require(bool,string)(delegate != address(0),Function does not exist.) (Slither line:2802)
Expression called: require(bool,string)
Type of call: tuple() (Slither line:2817)
Args:
delegate != address(0)
Function does not exist.

End BlindboxProxy.find_delegatecall_in_exp_node (Slither line:2858)

EXPRESSION (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Begin BlindboxProxy.find_delegatecall_in_exp_node

Found Expression Node: returndatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,size_fallback_asm_0) (Slither line:2802)
Expression called: returndatacopy(uint256,uint256,uint256)
Type of call:  (Slither line:2817)
Args:
ptr_fallback_asm_0
0
size_fallback_asm_0

End BlindboxProxy.find_delegatecall_in_exp_node (Slither line:2858)

INLINE ASM (Slither line:1433)

Begin Contract.find_delegatecall_in_ir (Slither line:2737)


End Contract.find_delegatecall_in_ir (Slither line:2773)


Found Assembly Node (Slither line:1447)


Begin BlindboxProxy.find_delegatecall_in_asm (Slither line:1541)


Found delegatecall in YulFunctionCall (Slither line:1563)
Destination param is called 'delegate'
Looking for corresponding Variable
Current function: fallback

Begin BlindboxProxy.find_delegate_variable_from_name
Searching for delegate (Slither line:1674)

Searching State Variables (Slither line:1687)
Checking delegates (Slither line:1689)
Checking funcSignatures (Slither line:1689)
Checking funcSignatureToIndex (Slither line:1689)
Checking proxy (Slither line:1689)
Checking a (Slither line:1689)
Checking b (Slither line:1689)
Checking c (Slither line:1689)
Checking vrf (Slither line:1689)
Checking ALIA (Slither line:1689)
Checking ETH (Slither line:1689)
Checking USD (Slither line:1689)
Checking MATIC (Slither line:1689)
Checking nft (Slither line:1689)
Checking dex (Slither line:1689)
Checking platform (Slither line:1689)
Checking token (Slither line:1689)
Checking _boxId (Slither line:1689)
Checking generativeSeriesId (Slither line:1689)
Checking genSeries (Slither line:1689)
Checking genseriesRoyalty (Slither line:1689)
Checking _allowedCurrenciesGen (Slither line:1689)
Checking bankAddressGen (Slither line:1689)
Checking baseCurrencyGen (Slither line:1689)
Checking genCollection (Slither line:1689)
Checking boxesGen (Slither line:1689)
Checking genBoxOwner (Slither line:1689)
Checking nftsToMint (Slither line:1689)
Checking nonGenerativeSeriesId (Slither line:1689)
Checking _CopiesData (Slither line:1689)
Checking nonGenSeries (Slither line:1689)
Checking _allowedCurrencies (Slither line:1689)
Checking bankAddress (Slither line:1689)
Checking nonGenseriesRoyalty (Slither line:1689)
Checking baseCurrency (Slither line:1689)
Checking boxesNonGen (Slither line:1689)
Checking nonGenBoxOwner (Slither line:1689)
Checking seriesIdsByCollection (Slither line:1689)
Checking deployTime (Slither line:1689)
Checking LPAlia (Slither line:1689)
Checking LPWETH (Slither line:1689)
Checking LPMATIC (Slither line:1689)
Checking _whitelisted (Slither line:1689)
Checking _isWhiteListed (Slither line:1689)
Checking _boxesCrytpoUser (Slither line:1689)
Checking _boxesNoncryptoUser (Slither line:1689)
Checking _perBoxUserLimit (Slither line:1689)
Checking _isCryptoAllowed (Slither line:1689)
Checking _registrationFee (Slither line:1689)
Checking _owner (Slither line:1689)

Searching Local Variables (Slither line:1698)
Checking delegate (Slither line:1703)
delegate is a Local Variable in BlindboxProxy.fallback (Slither line:1707)
Expression: delegates[msg.sig] (Slither line:1719)
delegates is a State Variable in contract ProxyBaseStorage (Slither line:1749)

End BlindboxProxy.find_delegate_variable_by_name


End BlindboxProxy.find_delegatecall_in_asm (Slither line:1637)


End BlindboxProxy.is_proxy (Slither line:1476)


Begin BlindboxProxy.is_upgradeable_proxy (Slither line:1136)

Checking contract: BlindboxProxy 
BlindboxProxy is delegating to delegates
Looking for setter (Slither line:1200)

Looking for setter in ProxyBaseStorage (Slither line:1204)


Begin ProxyBaseStorage.find_setter_in_contract (Slither line:3119)


End ProxyBaseStorage.find_setter_in_contract (Slither line:3345)


Could not find setter in ProxyBaseStorage 
Looking in BlindboxProxy (Slither line:1213)

Begin BlindboxProxy.find_setter_in_contract (Slither line:3119)

Checking function: constructor() returns() (Slither line:3127)
Checking function: fallback() returns() (Slither line:3127)
Checking function: updateContract(address,string,string) returns() (Slither line:3127)
Visibility: external
updateContract contains assembly (Slither line:3153)
delegates[funcId] = _delegate
is an Assignment Operation (Slither line:3216)
Left side is an IndexAccess (Slither line:3245)

End BlindboxProxy.find_setter_in_contract (Slither line:3345)


Implementation set by function: updateContract in contract: BlindboxProxy (Slither line:1264)
Looking for getter (Slither line:1273)


Begin ProxyBaseStorage.find_getter_in_contract (Slither line:2974)

delegates is a Variable object
_delegate

End ProxyBaseStorage.find_getter_in_contract (Slither line:3083)


Begin BlindboxProxy.find_getter_in_contract (Slither line:2974)

delegates is a Variable object
_delegate
Checking function: constructor (Slither line:2988)
Checking function: owner (Slither line:2988)
owner returns address variable  (Slither line:3008)
RETURN node expression: _owner (Slither line:3028)
Checking function: renounceOwnership (Slither line:2988)
Checking function: transferOwnership (Slither line:2988)
Checking function: _transferOwnership (Slither line:2988)
Checking function: _msgSender (Slither line:2988)
_msgSender returns address variable  (Slither line:3008)
RETURN node expression: msg.sender (Slither line:3028)
Checking function: _msgData (Slither line:2988)
_msgData returns bytes variable  (Slither line:3008)
RETURN node expression: msg.data (Slither line:3028)
Checking function: constructor (Slither line:2988)
Checking function: fallback (Slither line:2988)
Checking function: updateContract (Slither line:2988)

End BlindboxProxy.find_getter_in_contract (Slither line:3083)

Could not find implementation getter in BlindboxProxy (Slither line:1305)
or in ProxyBaseStorage (Slither line:1319)
Checking for delegates at slot 0 in contract Ownable (Slither line:1355)
Found _owner at slot 0 in contract Ownable (Slither line:1362)
Checking for _owner at slot 0 in contract ProxyBaseStorage (Slither line:1355)
Found delegates at slot 0 in contract ProxyBaseStorage (Slither line:1362)

Begin ProxyBaseStorage.find_getter_in_contract (Slither line:2974)

delegates is a Variable object
_delegate

End ProxyBaseStorage.find_getter_in_contract (Slither line:3083)

impl_address_from_contract_call: _delegate
impl_address_from_contract_call: StateVariable delegates
impl_address_from_contract_call: getter is None
impl_address_from_contract_call: CallExpression return(uint256,uint256)(ptr_fallback_asm_0,size_fallback_asm_0)
impl_address_from_contract_call: arg is ptr_fallback_asm_0
impl_address_from_contract_call: arg is size_fallback_asm_0
impl_address_from_contract_call: CallExpression returndatasize()()
impl_address_from_contract_call: CallExpression require(bool,string)(delegate != address(0),Function does not exist.)
impl_address_from_contract_call: arg is delegate != address(0)
impl_address_from_contract_call: arg is Function does not exist.
impl_address_from_contract_call: CallExpression returndatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,size_fallback_asm_0)
impl_address_from_contract_call: arg is ptr_fallback_asm_0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is size_fallback_asm_0
impl_address_from_contract_call: CallExpression mload(uint256)(0x40)
impl_address_from_contract_call: arg is 0x40
impl_address_from_contract_call: CallExpression calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()())
impl_address_from_contract_call: arg is ptr_fallback_asm_0
impl_address_from_contract_call: arg is 0
impl_address_from_contract_call: arg is calldatasize()()
impl_address_from_contract_call: CallExpression calldatasize()()
impl_address_from_contract_call: CallExpression delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),delegate,ptr_fallback_asm_0,calldatasize()(),0,0)
impl_address_from_contract_call: arg is gas()()
impl_address_from_contract_call: CallExpression gas()()
impl_address_from_contract_call: CallExpression revert(uint256,uint256)(ptr_fallback_asm_0,size_fallback_asm_0)
impl_address_from_contract_call: arg is ptr_fallback_asm_0
impl_address_from_contract_call: arg is size_fallback_asm_0
Checking public function owner
Checking public function renounceOwnership
Checking public function transferOwnership
Checking external function updateContract
Checking external function updateContract
Checking external function fallback
functions_writing_to_variable: delegates
functions_writing_to_variable: checking function BlindboxProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.updateContract (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: exp = proxy = address(this) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: proxy = address(this) (proxy_features line:912)
functions_writing_to_variable: exp = signature = updateContract(address,string,string) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: signature = updateContract(address,string,string) (proxy_features line:912)
functions_writing_to_variable: exp = funcId = bytes4(keccak256(bytes)(signature)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcId = bytes4(keccak256(bytes)(signature)) (proxy_features line:912)
functions_writing_to_variable: exp = delegates[funcId] = proxy (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: delegates[funcId] = proxy (proxy_features line:912)
functions_writing_to_variable: IndexAccess: delegates[funcId] (proxy_features line:920)
functions_writing_to_variable: Identifier: delegates (proxy_features line:924)
get_value_assigned: delegates[funcId] = proxy
functions_writing_to_variable: exp = funcSignatures.push(signature) (proxy_features line:909)
functions_writing_to_variable: exp = funcSignatureToIndex[signature] = funcSignatures.length (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcSignatureToIndex[signature] = funcSignatures.length (proxy_features line:912)
functions_writing_to_variable: IndexAccess: funcSignatureToIndex[signature] (proxy_features line:920)
functions_writing_to_variable: exp = FunctionUpdate(funcId,address(0),proxy,string(signature)) (proxy_features line:909)
functions_writing_to_variable: exp = CommitMessage(Added ERC1538 updateContract function at contract creation) (proxy_features line:909)
functions_writing_to_variable: constructor writes proxy to delegates (proxy_features line:929)
functions_writing_to_variable: checking function BlindboxProxy.owner (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy._transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy._msgData (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.updateContract (proxy_features line:898)
functions_writing_to_variable: exp = _delegate != address(0) (proxy_features line:909)
functions_writing_to_variable: exp = pos = extcodesize(uint256)(_delegate) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: pos = extcodesize(uint256)(_delegate) (proxy_features line:912)
functions_writing_to_variable: exp = require(bool,string)(pos > 0,_delegate address is not a contract and is not address(0)) (proxy_features line:909)
functions_writing_to_variable: exp = signatures = bytes(_functionSignatures) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: signatures = bytes(_functionSignatures) (proxy_features line:912)
functions_writing_to_variable: exp = pos = signatures + 32 (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: pos = signatures + 32 (proxy_features line:912)
functions_writing_to_variable: exp = start = pos (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: start = pos (proxy_features line:912)
functions_writing_to_variable: exp = signaturesEnd = pos + mload(uint256)(signatures) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: signaturesEnd = pos + mload(uint256)(signatures) (proxy_features line:912)
functions_writing_to_variable: exp = pos < signaturesEnd (proxy_features line:909)
functions_writing_to_variable: exp = char = byte(uint256,uint256)(0,mload(uint256)(pos)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: char = byte(uint256,uint256)(0,mload(uint256)(pos)) (proxy_features line:912)
functions_writing_to_variable: exp = char == 0x29 (proxy_features line:909)
functions_writing_to_variable: exp = pos ++ (proxy_features line:909)
functions_writing_to_variable: exp = num = (pos - start) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: num = (pos - start) (proxy_features line:912)
functions_writing_to_variable: exp = start = pos (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: start = pos (proxy_features line:912)
functions_writing_to_variable: exp = mstore(uint256,uint256)(signatures,num) (proxy_features line:909)
functions_writing_to_variable: exp = funcId = bytes4(keccak256(bytes)(signatures)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcId = bytes4(keccak256(bytes)(signatures)) (proxy_features line:912)
functions_writing_to_variable: exp = oldDelegate = delegates[funcId] (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: oldDelegate = delegates[funcId] (proxy_features line:912)
functions_writing_to_variable: exp = _delegate == address(0) (proxy_features line:909)
functions_writing_to_variable: exp = index = funcSignatureToIndex[signatures] (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: index = funcSignatureToIndex[signatures] (proxy_features line:912)
functions_writing_to_variable: exp = require(bool,string)(index != 0,Function does not exist.) (proxy_features line:909)
functions_writing_to_variable: exp = index -- (proxy_features line:909)
functions_writing_to_variable: exp = lastIndex = funcSignatures.length - 1 (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: lastIndex = funcSignatures.length - 1 (proxy_features line:912)
functions_writing_to_variable: exp = index != lastIndex (proxy_features line:909)
functions_writing_to_variable: exp = funcSignatures[index] = funcSignatures[lastIndex] (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcSignatures[index] = funcSignatures[lastIndex] (proxy_features line:912)
functions_writing_to_variable: IndexAccess: funcSignatures[index] (proxy_features line:920)
functions_writing_to_variable: exp = funcSignatureToIndex[funcSignatures[lastIndex]] = index + 1 (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcSignatureToIndex[funcSignatures[lastIndex]] = index + 1 (proxy_features line:912)
functions_writing_to_variable: IndexAccess: funcSignatureToIndex[funcSignatures[lastIndex]] (proxy_features line:920)
functions_writing_to_variable: exp = funcSignatures.pop() (proxy_features line:909)
functions_writing_to_variable: exp = delete funcSignatureToIndex[signatures] (proxy_features line:909)
functions_writing_to_variable: exp = delete delegates[funcId] (proxy_features line:909)
functions_writing_to_variable: exp = FunctionUpdate(funcId,oldDelegate,address(0),string(signatures)) (proxy_features line:909)
functions_writing_to_variable: exp = funcSignatureToIndex[signatures] == 0 (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(oldDelegate == address(0),FuncId clash.) (proxy_features line:909)
functions_writing_to_variable: exp = delegates[funcId] = _delegate (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: delegates[funcId] = _delegate (proxy_features line:912)
functions_writing_to_variable: IndexAccess: delegates[funcId] (proxy_features line:920)
functions_writing_to_variable: Identifier: delegates (proxy_features line:924)
get_value_assigned: delegates[funcId] = _delegate
functions_writing_to_variable: exp = funcSignatures.push(signatures) (proxy_features line:909)
functions_writing_to_variable: exp = funcSignatureToIndex[signatures] = funcSignatures.length (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcSignatureToIndex[signatures] = funcSignatures.length (proxy_features line:912)
functions_writing_to_variable: IndexAccess: funcSignatureToIndex[signatures] (proxy_features line:920)
functions_writing_to_variable: exp = FunctionUpdate(funcId,address(0),_delegate,string(signatures)) (proxy_features line:909)
functions_writing_to_variable: exp = delegates[funcId] != _delegate (proxy_features line:909)
functions_writing_to_variable: exp = delegates[funcId] = _delegate (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: delegates[funcId] = _delegate (proxy_features line:912)
functions_writing_to_variable: IndexAccess: delegates[funcId] (proxy_features line:920)
functions_writing_to_variable: Identifier: delegates (proxy_features line:924)
get_value_assigned: delegates[funcId] = _delegate
functions_writing_to_variable: exp = FunctionUpdate(funcId,oldDelegate,_delegate,string(signatures)) (proxy_features line:909)
functions_writing_to_variable: exp = signatures = signatures + num (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: signatures = signatures + num (proxy_features line:912)
functions_writing_to_variable: exp = pos ++ (proxy_features line:909)
functions_writing_to_variable: exp = CommitMessage(_commitMessage) (proxy_features line:909)
functions_writing_to_variable: exp = onlyOwner() (proxy_features line:909)
functions_writing_to_variable: exp = require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner) (proxy_features line:909)
functions_writing_to_variable: exp = msg.sender (proxy_features line:909)
functions_writing_to_variable: exp = _owner (proxy_features line:909)
functions_writing_to_variable: updateContract writes _delegate to delegates (proxy_features line:929)
functions_writing_to_variable: checking function BlindboxProxy._msgSender (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.renounceOwnership (proxy_features line:898)
has_compatibility_checks: dependencies: ['_delegate', 'REF_25', 'proxy', 'TMP_55']
functions_writing_to_variable: proxy
functions_writing_to_variable: checking function BlindboxProxy.fallback (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.updateContract (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: exp = proxy = address(this) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: proxy = address(this) (proxy_features line:912)
functions_writing_to_variable: Identifier: proxy (proxy_features line:924)
get_value_assigned: proxy = address(this)
functions_writing_to_variable: exp = signature = updateContract(address,string,string) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: signature = updateContract(address,string,string) (proxy_features line:912)
functions_writing_to_variable: exp = funcId = bytes4(keccak256(bytes)(signature)) (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcId = bytes4(keccak256(bytes)(signature)) (proxy_features line:912)
functions_writing_to_variable: exp = delegates[funcId] = proxy (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: delegates[funcId] = proxy (proxy_features line:912)
functions_writing_to_variable: IndexAccess: delegates[funcId] (proxy_features line:920)
functions_writing_to_variable: exp = funcSignatures.push(signature) (proxy_features line:909)
functions_writing_to_variable: exp = funcSignatureToIndex[signature] = funcSignatures.length (proxy_features line:909)
functions_writing_to_variable: AssignmentOperation: funcSignatureToIndex[signature] = funcSignatures.length (proxy_features line:912)
functions_writing_to_variable: IndexAccess: funcSignatureToIndex[signature] (proxy_features line:920)
functions_writing_to_variable: exp = FunctionUpdate(funcId,address(0),proxy,string(signature)) (proxy_features line:909)
functions_writing_to_variable: exp = CommitMessage(Added ERC1538 updateContract function at contract creation) (proxy_features line:909)
functions_writing_to_variable: checking function BlindboxProxy.owner (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy._transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy._msgData (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.updateContract (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy._msgSender (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.constructor (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.transferOwnership (proxy_features line:898)
functions_writing_to_variable: checking function BlindboxProxy.renounceOwnership (proxy_features line:898)
has_compatibility_checks: skipping constructor
has_compatibility_checks: checking external function updateContract
has_compatibility_checks: IF node exp = index != lastIndex
has_compatibility_checks: IF node exp = delegates[funcId] != _delegate
has_compatibility_checks: IF node exp = _delegate != address(0)
require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
has_compatibility_checks: condition owner() == _msgSender()
has_compatibility_checks: IF node exp = _delegate == address(0)
require(bool,string)(pos > 0,_delegate address is not a contract and is not address(0))
has_compatibility_checks: condition pos > 0
require(bool,string)(oldDelegate == address(0),FuncId clash.)
has_compatibility_checks: condition oldDelegate == address(0)
has_compatibility_checks: IF node exp = funcSignatureToIndex[signatures] == 0
has_compatibility_checks: IF node exp = char == 0x29
require(bool,string)(index != 0,Function does not exist.)
has_compatibility_checks: condition index != 0
can_toggle_delegatecall_on_off: found delegatecall in EXPRESSION node: None
can_toggle_delegatecall_on_off:
 dominator node type: INLINE ASM
 dominator expression: None
can_toggle_delegatecall_on_off:
 dominator node type: IF
 dominator expression: msg.sig == bytes4(0) && msg.value != uint256(0)
can_toggle_delegatecall_on_off: successors:
 NodeType: EXPRESSION  expression: return(uint256,uint256)(ptr_fallback_asm_0,size_fallback_asm_0)
 NodeType: NEW VARIABLE  expression: None
 NodeType: EXPRESSION  expression: size_fallback_asm_0 = returndatasize()()
 NodeType: END_IF  expression: None
 NodeType: RETURN  expression: None
 NodeType: NEW VARIABLE  expression: None
 NodeType: NEW VARIABLE  expression: delegate = delegates[msg.sig]
 NodeType: EXPRESSION  expression: require(bool,string)(delegate != address(0),Function does not exist.)
 NodeType: EXPRESSION  expression: returndatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,size_fallback_asm_0)
 NodeType: INLINE ASM  expression: {'AST': {'nodeType': 'YulBlock', 'src': '27210:366:0', 'statements': [{'nodeType': 'YulVariableDeclaration', 'src': '27224:22:0', 'value': {'arguments': [{'kind': 'number', 'nodeType': 'YulLiteral', 'src': '27241:4:0', 'type': '', 'value': '0x40'}], 'functionName': {'name': 'mload', 'nodeType': 'YulIdentifier', 'src': '27235:5:0'}, 'nodeType': 'YulFunctionCall', 'src': '27235:11:0'}, 'variables': [{'name': 'ptr', 'nodeType': 'YulTypedName', 'src': '27228:3:0', 'type': ''}]}, {'expression': {'arguments': [{'name': 'ptr', 'nodeType': 'YulIdentifier', 'src': '27272:3:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '27277:1:0', 'type': '', 'value': '0'}, {'arguments': [], 'functionName': {'name': 'calldatasize', 'nodeType': 'YulIdentifier', 'src': '27280:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '27280:14:0'}], 'functionName': {'name': 'calldatacopy', 'nodeType': 'YulIdentifier', 'src': '27259:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '27259:36:0'}, 'nodeType': 'YulExpressionStatement', 'src': '27259:36:0'}, {'nodeType': 'YulVariableDeclaration', 'src': '27308:70:0', 'value': {'arguments': [{'arguments': [], 'functionName': {'name': 'gas', 'nodeType': 'YulIdentifier', 'src': '27335:3:0'}, 'nodeType': 'YulFunctionCall', 'src': '27335:5:0'}, {'name': 'delegate', 'nodeType': 'YulIdentifier', 'src': '27342:8:0'}, {'name': 'ptr', 'nodeType': 'YulIdentifier', 'src': '27352:3:0'}, {'arguments': [], 'functionName': {'name': 'calldatasize', 'nodeType': 'YulIdentifier', 'src': '27357:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '27357:14:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '27373:1:0', 'type': '', 'value': '0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '27376:1:0', 'type': '', 'value': '0'}], 'functionName': {'name': 'delegatecall', 'nodeType': 'YulIdentifier', 'src': '27322:12:0'}, 'nodeType': 'YulFunctionCall', 'src': '27322:56:0'}, 'variables': [{'name': 'result', 'nodeType': 'YulTypedName', 'src': '27312:6:0', 'type': ''}]}, {'nodeType': 'YulVariableDeclaration', 'src': '27391:28:0', 'value': {'arguments': [], 'functionName': {'name': 'returndatasize', 'nodeType': 'YulIdentifier', 'src': '27403:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '27403:16:0'}, 'variables': [{'name': 'size', 'nodeType': 'YulTypedName', 'src': '27395:4:0', 'type': ''}]}, {'expression': {'arguments': [{'name': 'ptr', 'nodeType': 'YulIdentifier', 'src': '27447:3:0'}, {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '27452:1:0', 'type': '', 'value': '0'}, {'name': 'size', 'nodeType': 'YulIdentifier', 'src': '27455:4:0'}], 'functionName': {'name': 'returndatacopy', 'nodeType': 'YulIdentifier', 'src': '27432:14:0'}, 'nodeType': 'YulFunctionCall', 'src': '27432:28:0'}, 'nodeType': 'YulExpressionStatement', 'src': '27432:28:0'}, {'cases': [{'body': {'nodeType': 'YulBlock', 'src': '27506:19:0', 'statements': [{'expression': {'arguments': [{'name': 'ptr', 'nodeType': 'YulIdentifier', 'src': '27514:3:0'}, {'name': 'size', 'nodeType': 'YulIdentifier', 'src': '27519:4:0'}], 'functionName': {'name': 'revert', 'nodeType': 'YulIdentifier', 'src': '27507:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '27507:17:0'}, 'nodeType': 'YulExpressionStatement', 'src': '27507:17:0'}]}, 'nodeType': 'YulCase', 'src': '27499:26:0', 'value': {'kind': 'number', 'nodeType': 'YulLiteral', 'src': '27504:1:0', 'type': '', 'value': '0'}}, {'body': {'nodeType': 'YulBlock', 'src': '27546:20:0', 'statements': [{'expression': {'arguments': [{'name': 'ptr', 'nodeType': 'YulIdentifier', 'src': '27555:3:0'}, {'name': 'size', 'nodeType': 'YulIdentifier', 'src': '27560:4:0'}], 'functionName': {'name': 'return', 'nodeType': 'YulIdentifier', 'src': '27547:6:0'}, 'nodeType': 'YulFunctionCall', 'src': '27547:18:0'}, 'nodeType': 'YulExpressionStatement', 'src': '27547:18:0'}]}, 'nodeType': 'YulCase', 'src': '27538:28:0', 'value': 'default'}], 'expression': {'name': 'result', 'nodeType': 'YulIdentifier', 'src': '27480:6:0'}, 'nodeType': 'YulSwitch', 'src': '27473:93:0'}]}, 'evmVersion': 'istanbul', 'externalReferences': [{'declaration': 1181, 'isOffset': False, 'isSlot': False, 'src': '27342:8:0', 'valueSize': 1}], 'id': 1197, 'nodeType': 'InlineAssembly', 'src': '27201:375:0'}
 NodeType: EXPRESSION  expression: switch_expr_27473_93_0_fallback_asm_0 = result_fallback_asm_0
 NodeType: EXPRESSION  expression: ptr_fallback_asm_0 = mload(uint256)(0x40)
 NodeType: NEW VARIABLE  expression: None
 NodeType: NEW VARIABLE  expression: None
 NodeType: IF  expression: switch_expr_27473_93_0_fallback_asm_0 == 0
 NodeType: END_IF  expression: None
 NodeType: EXPRESSION  expression: calldatacopy(uint256,uint256,uint256)(ptr_fallback_asm_0,0,calldatasize()())
 NodeType: EXPRESSION  expression: result_fallback_asm_0 = delegatecall(uint256,uint256,uint256,uint256,uint256,uint256)(gas()(),delegate,ptr_fallback_asm_0,calldatasize()(),0,0)
can_toggle_delegatecall_on_off: delegatecall_condition = False
 NodeType: EXPRESSION  expression: revert(uint256,uint256)(ptr_fallback_asm_0,size_fallback_asm_0)
Found public function: owner
has_time_delay: (node.type) EXPRESSION
(Expression) delegates[funcId] = _delegate
has_time_delay: (node.type) EXPRESSION
(Expression) lastIndex = funcSignatures.length - 1
has_time_delay: (node.type) EXPRESSION
(Expression) pos ++
has_time_delay: (node.type) IF
(Expression) index != lastIndex
has_time_delay: (node.type) EXPRESSION
(Expression) funcSignatures.push(signatures)
has_time_delay: (node.type) RETURN
(Expression) _owner
has_time_delay: (node.type) EXPRESSION
(Expression) num = (pos - start)
has_time_delay: (node.type) EXPRESSION
(Expression) funcSignatures.pop()
has_time_delay: (node.type) EXPRESSION
(Expression) funcSignatureToIndex[signatures] = funcSignatures.length
has_time_delay: (node.type) EXPRESSION
(Expression) start = pos
has_time_delay: (node.type) EXPRESSION
(Expression) FunctionUpdate(funcId,address(0),_delegate,string(signatures))
has_time_delay: (node.type) EXPRESSION
(Expression) funcSignatures[index] = funcSignatures[lastIndex]
has_time_delay: (node.type) EXPRESSION
(Expression) onlyOwner()
has_time_delay: (node.type) IF
(Expression) delegates[funcId] != _delegate
has_time_delay: (node.type) EXPRESSION
(Expression) funcSignatureToIndex[funcSignatures[lastIndex]] = index + 1
has_time_delay: (node.type) EXPRESSION
(Expression) funcId = bytes4(keccak256(bytes)(signatures))
has_time_delay: (node.type) IF
(Expression) _delegate != address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) pos = signatures + 32
has_time_delay: (node.type) EXPRESSION
(Expression) mstore(uint256,uint256)(signatures,num)
has_time_delay: (node.type) EXPRESSION
(Expression) start = pos
has_time_delay: (node.type) IF_LOOP
(Expression) pos < signaturesEnd
has_time_delay: (node.type) EXPRESSION
(Expression) delete funcSignatureToIndex[signatures]
has_time_delay: (node.type) EXPRESSION
(Expression) delegates[funcId] = _delegate
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
has_time_delay: (node.type) EXPRESSION
(Expression) signaturesEnd = pos + mload(uint256)(signatures)
has_time_delay: (node.type) EXPRESSION
(Expression) oldDelegate = delegates[funcId]
has_time_delay: (node.type) EXPRESSION
(Expression) delete delegates[funcId]
has_time_delay: (node.type) EXPRESSION
(Expression) FunctionUpdate(funcId,oldDelegate,_delegate,string(signatures))
has_time_delay: (node.type) IF
(Expression) _delegate == address(0)
has_time_delay: (node.type) EXPRESSION
(Expression) FunctionUpdate(funcId,oldDelegate,address(0),string(signatures))
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(pos > 0,_delegate address is not a contract and is not address(0))
has_time_delay: (node.type) EXPRESSION
(Expression) pos ++
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(oldDelegate == address(0),FuncId clash.)
has_time_delay: (node.type) EXPRESSION
(Expression) pos = extcodesize(uint256)(_delegate)
has_time_delay: (node.type) IF
(Expression) funcSignatureToIndex[signatures] == 0
has_time_delay: (node.type) IF
(Expression) char == 0x29
has_time_delay: (node.type) EXPRESSION
(Expression) signatures = signatures + num
has_time_delay: (node.type) EXPRESSION
(Expression) index = funcSignatureToIndex[signatures]
has_time_delay: (node.type) EXPRESSION
(Expression) char = byte(uint256,uint256)(0,mload(uint256)(pos))
has_time_delay: (node.type) EXPRESSION
(Expression) CommitMessage(_commitMessage)
has_time_delay: (node.type) RETURN
(Expression) msg.sender
has_time_delay: (node.type) EXPRESSION
(Expression) require(bool,string)(index != 0,Function does not exist.)
has_time_delay: (node.type) NEW VARIABLE
(Expression) signatures = bytes(_functionSignatures)
has_time_delay: (node.type) EXPRESSION
(Expression) index --
